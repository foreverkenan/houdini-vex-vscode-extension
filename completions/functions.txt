append(string &array, string value)#append(${1:string &array}, ${2:string value})
append(<type> &array[], <type> value)#append(${1:<type> &array[]}, ${2:<type> value})
append(<type> &array[], <type> values[])#append(${1:<type> &array[]}, ${2:<type> values[]})
argsort(<type> value[])#argsort(${1:<type> value[]})
array(...)#array(${1:...})
insert(string &str, int index, string value)#insert(${1:string &str}, ${2:int index}, ${3:string value})
insert(<type> &array[], int index, <type> value)#insert(${1:<type> &array[]}, ${2:int index}, ${3:<type> value})
insert(<type> &array[], int index, <type> values[])#insert(${1:<type> &array[]}, ${2:int index}, ${3:<type> values[]})
insert(dict &dstdict, string dstkey, dict srcdict, string srckey)#insert(${1:dict &dstdict}, ${2:string dstkey}, ${3:dict srcdict}, ${4:string srckey})
insert(dict &dstdict, dict srcdict)#insert(${1:dict &dstdict}, ${2:dict srcdict})
isvalidindex(<type> &array[], int index)#isvalidindex(${1:<type> &array[]}, ${2:int index})
isvalidindex(string str, int index)#isvalidindex(${1:string str}, ${2:int index})
isvalidindex(dict d, string key)#isvalidindex(${1:dict d}, ${2:string key})
len(<vector> v)#len(${1:<vector> v})
len(<matrix> m)#len(${1:<matrix> m})
len(<type> array[])#len(${1:<type> array[]})
len(string s)#len(${1:string s})
len(dict d)#len(${1:dict d})
pop(<type> &array[])#pop(${1:<type> &array[]})
pop(<type> &array[], int index)#pop(${1:<type> &array[]}, ${2:int index})
push(<type> &array[], <type> value)#push(${1:<type> &array[]}, ${2:<type> value})
push(<type> &array[], <type> values[])#push(${1:<type> &array[]}, ${2:<type> values[]})
removeindex(<type> &array[], int index)#removeindex(${1:<type> &array[]}, ${2:int index})
removeindex(dict &dictionary, string index)#removeindex(${1:dict &dictionary}, ${2:string index})
removevalue(<type> &array[], <type> value)#removevalue(${1:<type> &array[]}, ${2:<type> value})
reorder(string value, int indices[])#reorder(${1:string value}, ${2:int indices[]})
reorder(<type> values[], int indices[])#reorder(${1:<type> values[]}, ${2:int indices[]})
resize(<type> &array[], int size)#resize(${1:<type> &array[]}, ${2:int size})
resize(<type> &array[], int size, <type> val)#resize(${1:<type> &array[]}, ${2:int size}, ${3:<type> val})
reverse(string str)#reverse(${1:string str})
reverse(<type> values[])#reverse(${1:<type> values[]})
slice(string s, int start, int end)#slice(${1:string s}, ${2:int start}, ${3:int end})
slice(string s, int start, int end, int step)#slice(${1:string s}, ${2:int start}, ${3:int end}, ${4:int step})
slice(<type> s[], int start, int end)#slice(${1:<type> s[]}, ${2:int start}, ${3:int end})
slice(<type> s[], int start, int end, int step)#slice(${1:<type> s[]}, ${2:int start}, ${3:int end}, ${4:int step})
slice(string s, int hasstart, int start, int hasend, int end, int hasstep, int step)#slice(${1:string s}, ${2:int hasstart}, ${3:int start}, ${4:int hasend}, ${5:int end}, ${6:int hasstep}, ${7:int step})
slice(<type> array[], int hasstart, int start, int hasend, int end, int hasstep, int step)#slice(${1:<type> array[]}, ${2:int hasstart}, ${3:int start}, ${4:int hasend}, ${5:int end}, ${6:int hasstep}, ${7:int step})
sort(int values[])#sort(${1:int values[]})
sort(float values[])#sort(${1:float values[]})
sort(string values[])#sort(${1:string values[]})
upush(<type> &array[], <type> value)#upush(${1:<type> &array[]}, ${2:<type> value})
addattrib(int geohandle, string attribclass, string name, <type> defvalue)#addattrib(${1:int geohandle}, ${2:string attribclass}, ${3:string name}, ${4:<type> defvalue})
addattrib(int geohandle, string attribclass, string name, <type> defvalue[])#addattrib(${1:int geohandle}, ${2:string attribclass}, ${3:string name}, ${4:<type> defvalue[]})
adddetailattrib(int geohandle, string name, <type> defvalue)#adddetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue})
adddetailattrib(int geohandle, string name, <type> defvalue[])#adddetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]})
adddetailattrib(int geohandle, string name, <type> defvalue, string typeinfo)#adddetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue}, ${4:string typeinfo})
adddetailattrib(int geohandle, string name, <type> defvalue[], string typeinfo)#adddetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]}, ${4:string typeinfo})
addpointattrib(int geohandle, string name, <type> defvalue)#addpointattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue})
addpointattrib(int geohandle, string name, <type> defvalue[])#addpointattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]})
addpointattrib(int geohandle, string name, <type> defvalue, string typeinfo)#addpointattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue}, ${4:string typeinfo})
addpointattrib(int geohandle, string name, <type> defvalue[], string typeinfo)#addpointattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]}, ${4:string typeinfo})
addprimattrib(int geohandle, string name, <type> defvalue)#addprimattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue})
addprimattrib(int geohandle, string name, <type> defvalue[])#addprimattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]})
addprimattrib(int geohandle, string name, <type> defvalue, string typeinfo)#addprimattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue}, ${4:string typeinfo})
addprimattrib(int geohandle, string name, <type> defvalue[], string typeinfo)#addprimattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]}, ${4:string typeinfo})
addvertexattrib(int geohandle, string name, <type> defvalue)#addvertexattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue})
addvertexattrib(int geohandle, string name, <type> defvalue[])#addvertexattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]})
addvertexattrib(int geohandle, string name, <type> defvalue, string typeinfo)#addvertexattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue}, ${4:string typeinfo})
addvertexattrib(int geohandle, string name, <type> defvalue[], string typeinfo)#addvertexattrib(${1:int geohandle}, ${2:string name}, ${3:<type> defvalue[]}, ${4:string typeinfo})
addvisualizer(int geohandle, string op_url)#addvisualizer(${1:int geohandle}, ${2:string op_url})
attrib(<geometry> geometry, string attribclass, string name, int elemnum)#attrib(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string name}, ${4:int elemnum})
attribclass(<geometry> geometry, string attribute_name)#attribclass(${1:<geometry> geometry}, ${2:string attribute_name})
attribdataid(<geometry> geometry, string attribclass, string attribute_name)#attribdataid(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
attribsize(<geometry> geometry, string attribclass, string attribute_name)#attribsize(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
attribtype(<geometry> geometry, string attribclass, string attribute_name)#attribtype(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
attribtypeinfo(<geometry> geometry, string attribclass, string attribute_name)#attribtypeinfo(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order)#curvearclen(${1:vector positions[]}, ${2:float uv1}, ${3:float uv2}, ${4:int closedflag}, ${5:int fmt}, ${6:int order})
curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs)#curvearclen(${1:vector positions[]}, ${2:float uv1}, ${3:float uv2}, ${4:int closedflag}, ${5:int fmt}, ${6:int order}, ${7:int divs})
curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs, int primuvmode)#curvearclen(${1:vector positions[]}, ${2:float uv1}, ${3:float uv2}, ${4:int closedflag}, ${5:int fmt}, ${6:int order}, ${7:int divs}, ${8:int primuvmode})
curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs, int primuvmode, float primuvtol)#curvearclen(${1:vector positions[]}, ${2:float uv1}, ${3:float uv2}, ${4:int closedflag}, ${5:int fmt}, ${6:int order}, ${7:int divs}, ${8:int primuvmode}, ${9:float primuvtol})
detail(<geometry> geometry, string attribute_name, int ignored=0)#detail(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int ignored=0})
detailattrib(<geometry> geometry, string attribute_name, int ignored, int &success)#detailattrib(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int ignored}, ${4:int &success})
detailattribsize(<geometry> geometry, string attribute_name)#detailattribsize(${1:<geometry> geometry}, ${2:string attribute_name})
detailattribtype(<geometry> geometry, string attribute_name)#detailattribtype(${1:<geometry> geometry}, ${2:string attribute_name})
detailattribtypeinfo(<geometry> geometry, string attribute_name)#detailattribtypeinfo(${1:<geometry> geometry}, ${2:string attribute_name})
detailintrinsic(<geometry> geometry, string intrinsic_name)#detailintrinsic(${1:<geometry> geometry}, ${2:string intrinsic_name})
findattribval(<geometry> geometry, string attribclass, string attribute_name, int|stringvalue, int which=0)#findattribval(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int|stringvalue}, ${5:int which=0})
findattribval(<geometry> geometry, string attribclass, string attribute_name, int|stringvalue)#findattribval(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int|stringvalue})
findattribvalcount(<geometry> geometry, string attribclass, string attribute_name, int|stringvalue)#findattribvalcount(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int|stringvalue})
getattrib(<geometry> geometry, string attribclass, string attribute_name, int elemnum, int &success)#getattrib(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int elemnum}, ${5:int &success})
getattribute(string geometry, <type> &value, string attribclass, string attribute_name, int element_number, int vertex_number)#getattribute(${1:string geometry}, ${2:<type> &value}, ${3:string attribclass}, ${4:string attribute_name}, ${5:int element_number}, ${6:int vertex_number})
getattribute(string geometry, <type> &value[], string attribclass, string attribute_name, int element_number, int vertex_number)#getattribute(${1:string geometry}, ${2:<type> &value[]}, ${3:string attribclass}, ${4:string attribute_name}, ${5:int element_number}, ${6:int vertex_number})
hasattrib(<geometry> geometry, string attribclass, string attribute_name)#hasattrib(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
hasdetailattrib(<geometry> geometry, string attribute_name)#hasdetailattrib(${1:<geometry> geometry}, ${2:string attribute_name})
haspointattrib(<geometry> geometry, string attribute_name)#haspointattrib(${1:<geometry> geometry}, ${2:string attribute_name})
hasprimattrib(<geometry> geometry, string attribute_name)#hasprimattrib(${1:<geometry> geometry}, ${2:string attribute_name})
hasvertexattrib(<geometry> geometry, string attribute_name)#hasvertexattrib(${1:<geometry> geometry}, ${2:string attribute_name})
idtopoint(<geometry> geometry, int id)#idtopoint(${1:<geometry> geometry}, ${2:int id})
idtoprim(<geometry> geometry, int id)#idtoprim(${1:<geometry> geometry}, ${2:int id})
nametopoint(<geometry> geometry, string name)#nametopoint(${1:<geometry> geometry}, ${2:string name})
nametoprim(<geometry> geometry, string name)#nametoprim(${1:<geometry> geometry}, ${2:string name})
nuniqueval(<geometry> geometry, string attribclass, string attribute_name)#nuniqueval(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
point(<geometry> geometry, string attribute_name, int pointnumber)#point(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int pointnumber})
pointattrib(<geometry> geometry, string attribute_name, int pointnumber, int &success)#pointattrib(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int pointnumber}, ${4:int &success})
pointattribsize(<geometry> geometry, string attribute_name)#pointattribsize(${1:<geometry> geometry}, ${2:string attribute_name})
pointattribtype(<geometry> geometry, string attribute_name)#pointattribtype(${1:<geometry> geometry}, ${2:string attribute_name})
pointattribtypeinfo(<geometry> geometry, string attribute_name)#pointattribtypeinfo(${1:<geometry> geometry}, ${2:string attribute_name})
pointlocaltransforms(<geometry> geometry, int pnts[])#pointlocaltransforms(${1:<geometry> geometry}, ${2:int pnts[]})
pointtransform(<geometry> geometry, int pnt)#pointtransform(${1:<geometry> geometry}, ${2:int pnt})
pointtransformrigid(<geometry> geometry, int pnt)#pointtransformrigid(${1:<geometry> geometry}, ${2:int pnt})
pointtransforms(<geometry> geometry, int pnts[])#pointtransforms(${1:<geometry> geometry}, ${2:int pnts[]})
pointtransforms(<geometry> geometry)#pointtransforms(${1:<geometry> geometry})
pointtransformsrigid(<geometry> geometry, int pnts[])#pointtransformsrigid(${1:<geometry> geometry}, ${2:int pnts[]})
pointtransformsrigid(<geometry> geometry)#pointtransformsrigid(${1:<geometry> geometry})
prim(<geometry> geometry, string attribute_name, int primnumber)#prim(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int primnumber})
prim_attribute(<geometry> geometry, <type> &value, string attribute_name, int prim_number, float u, float v)#prim_attribute(${1:<geometry> geometry}, ${2:<type> &value}, ${3:string attribute_name}, ${4:int prim_number}, ${5:float u}, ${6:float v})
prim_attribute(<geometry> geometry, <type> &value[], string attribute_name, int prim_number, float u, float v)#prim_attribute(${1:<geometry> geometry}, ${2:<type> &value[]}, ${3:string attribute_name}, ${4:int prim_number}, ${5:float u}, ${6:float v})
prim_attribute(<geometry> geometry, <type> &value, string attribute_name, int prim_number, vector uvw)#prim_attribute(${1:<geometry> geometry}, ${2:<type> &value}, ${3:string attribute_name}, ${4:int prim_number}, ${5:vector uvw})
prim_attribute(<geometry> geometry, <type> &value[], string attribute_name, int prim_number, vector uvw)#prim_attribute(${1:<geometry> geometry}, ${2:<type> &value[]}, ${3:string attribute_name}, ${4:int prim_number}, ${5:vector uvw})
primarclen(<geometry> geometry, vector2 uv1, vector2 uv2, int prim_num)#primarclen(${1:<geometry> geometry}, ${2:vector2 uv1}, ${3:vector2 uv2}, ${4:int prim_num})
primarclen(<geometry> geometry, vector2 uv1, vector2 uv2, int prim_num, int divs)#primarclen(${1:<geometry> geometry}, ${2:vector2 uv1}, ${3:vector2 uv2}, ${4:int prim_num}, ${5:int divs})
primarclen(<geometry> geometry, vector2 uv1, vector2 uv2, int prim_num, int divs, int primuvmode)#primarclen(${1:<geometry> geometry}, ${2:vector2 uv1}, ${3:vector2 uv2}, ${4:int prim_num}, ${5:int divs}, ${6:int primuvmode})
primarclen(<geometry> geometry, vector2 uv1, vector2 uv2, int prim_num, int divs, int primuvmode, float primuvtol)#primarclen(${1:<geometry> geometry}, ${2:vector2 uv1}, ${3:vector2 uv2}, ${4:int prim_num}, ${5:int divs}, ${6:int primuvmode}, ${7:float primuvtol})
primattrib(<geometry> geometry, string attribute_name, int prim, int &success)#primattrib(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int prim}, ${4:int &success})
primattribsize(<geometry> geometry, string attribute_name)#primattribsize(${1:<geometry> geometry}, ${2:string attribute_name})
primattribtype(<geometry> geometry, string attribute_name)#primattribtype(${1:<geometry> geometry}, ${2:string attribute_name})
primattribtypeinfo(<geometry> geometry, string attribute_name)#primattribtypeinfo(${1:<geometry> geometry}, ${2:string attribute_name})
primduv(<geometry> geometry, int prim_number, vector2 uv, int du, int dv)#primduv(${1:<geometry> geometry}, ${2:int prim_number}, ${3:vector2 uv}, ${4:int du}, ${5:int dv})
priminteriorweights(<geometry> geometry, int prim_num, vector uvw, int &verts[], float &weights[])#priminteriorweights(${1:<geometry> geometry}, ${2:int prim_num}, ${3:vector uvw}, ${4:int &verts[]}, ${5:float &weights[]})
primintrinsic(<geometry> geometry, string intrinsic_name, int prim_num)#primintrinsic(${1:<geometry> geometry}, ${2:string intrinsic_name}, ${3:int prim_num})
primuv(<geometry> geometry, string attribute_name, int prim_num, vector uvw)#primuv(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int prim_num}, ${4:vector uvw})
primuvconvert(<geometry> geometry, vector2 uv, int prim_num, int mode)#primuvconvert(${1:<geometry> geometry}, ${2:vector2 uv}, ${3:int prim_num}, ${4:int mode})
primuvconvert(<geometry> geometry, vector2 uv, int prim_num, int mode, float tolerance)#primuvconvert(${1:<geometry> geometry}, ${2:vector2 uv}, ${3:int prim_num}, ${4:int mode}, ${5:float tolerance})
primuvconvert(<geometry> geometry, float uv, int prim_num, int mode)#primuvconvert(${1:<geometry> geometry}, ${2:float uv}, ${3:int prim_num}, ${4:int mode})
primuvconvert(<geometry> geometry, float uv, int prim_num, int mode, float tolerance)#primuvconvert(${1:<geometry> geometry}, ${2:float uv}, ${3:int prim_num}, ${4:int mode}, ${5:float tolerance})
removedetailattrib(int geohandle, string name)#removedetailattrib(${1:int geohandle}, ${2:string name})
removepointattrib(int geohandle, string name)#removepointattrib(${1:int geohandle}, ${2:string name})
removepointgroup(int geohandle, string name)#removepointgroup(${1:int geohandle}, ${2:string name})
removeprimattrib(int geohandle, string name)#removeprimattrib(${1:int geohandle}, ${2:string name})
removeprimgroup(int geohandle, string name)#removeprimgroup(${1:int geohandle}, ${2:string name})
removevertexattrib(int geohandle, string name)#removevertexattrib(${1:int geohandle}, ${2:string name})
removevertexgroup(int geohandle, string name)#removevertexgroup(${1:int geohandle}, ${2:string name})
setattrib(int geohandle, string attribclass, string attribute_name, int element_num, int vertex_num, <type> value, string mode="set")#setattrib(${1:int geohandle}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int element_num}, ${5:int vertex_num}, ${6:<type> value}, ${7:string mode="set"})
setattrib(int geohandle, string attribclass, string attribute_name, int element_num, int vertex_num, <type> value[], string mode="set")#setattrib(${1:int geohandle}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int element_num}, ${5:int vertex_num}, ${6:<type> value[]}, ${7:string mode="set"})
setattribtypeinfo(int geohandle, string attribclass, string name, string typeinfo)#setattribtypeinfo(${1:int geohandle}, ${2:string attribclass}, ${3:string name}, ${4:string typeinfo})
setdetailattrib(int geohandle, string name, <type> value, string mode="set")#setdetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> value}, ${4:string mode="set"})
setdetailattrib(int geohandle, string name, <type> value[], string mode="set")#setdetailattrib(${1:int geohandle}, ${2:string name}, ${3:<type> value[]}, ${4:string mode="set"})
setdetailintrinsic(int geohandle, string name, <type> value, string mode="set")#setdetailintrinsic(${1:int geohandle}, ${2:string name}, ${3:<type> value}, ${4:string mode="set"})
setdetailintrinsic(int geohandle, string name, <type> value[], string mode="set")#setdetailintrinsic(${1:int geohandle}, ${2:string name}, ${3:<type> value[]}, ${4:string mode="set"})
setpointattrib(int geohandle, string name, int point_num, <type> value, string mode="set")#setpointattrib(${1:int geohandle}, ${2:string name}, ${3:int point_num}, ${4:<type> value}, ${5:string mode="set"})
setpointattrib(int geohandle, string name, int point_num, <type> value[], string mode="set")#setpointattrib(${1:int geohandle}, ${2:string name}, ${3:int point_num}, ${4:<type> value[]}, ${5:string mode="set"})
setpointlocaltransforms(int geohandle, int pnts[], matrix transforms[])#setpointlocaltransforms(${1:int geohandle}, ${2:int pnts[]}, ${3:matrix transforms[]})
setpointtransform(int geohandle, int pt, matrix transform)#setpointtransform(${1:int geohandle}, ${2:int pt}, ${3:matrix transform})
setpointtransform(int geohandle, int pt, matrix transform, int constrain)#setpointtransform(${1:int geohandle}, ${2:int pt}, ${3:matrix transform}, ${4:int constrain})
setpointtransforms(int geohandle, int pnts[], matrix transforms[])#setpointtransforms(${1:int geohandle}, ${2:int pnts[]}, ${3:matrix transforms[]})
setpointtransforms(int geohandle, int pnts[], matrix transforms[], int constrain)#setpointtransforms(${1:int geohandle}, ${2:int pnts[]}, ${3:matrix transforms[]}, ${4:int constrain})
setprimattrib(int geohandle, string name, int prim_num, <type> value, string mode="set")#setprimattrib(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:<type> value}, ${5:string mode="set"})
setprimattrib(int geohandle, string name, int prim_num, <type> value[], string mode="set")#setprimattrib(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:<type> value[]}, ${5:string mode="set"})
setprimintrinsic(int geohandle, string name, int prim_num, <type> value, string mode="set")#setprimintrinsic(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:<type> value}, ${5:string mode="set"})
setprimintrinsic(int geohandle, string name, int prim_num, <type> value[], string mode="set")#setprimintrinsic(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:<type> value[]}, ${5:string mode="set"})
setvertexattrib(int geohandle, string name, int prim_num, int vertex_num, <type> value, string mode="set")#setvertexattrib(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:int vertex_num}, ${5:<type> value}, ${6:string mode="set"})
setvertexattrib(int geohandle, string name, int prim_num, int vertex_num, <type> value[], string mode="set")#setvertexattrib(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:int vertex_num}, ${5:<type> value[]}, ${6:string mode="set"})
uniqueval(<geometry> geometry, string attribclass, string attribute_name, int which)#uniqueval(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name}, ${4:int which})
uniquevals(<geometry> geometry, string attribclass, string attribute_name)#uniquevals(${1:<geometry> geometry}, ${2:string attribclass}, ${3:string attribute_name})
uvsample(<geometry> geometry, string attr_name, string uv_attr_name, vector uvw)#uvsample(${1:<geometry> geometry}, ${2:string attr_name}, ${3:string uv_attr_name}, ${4:vector uvw})
uvsample(<geometry> geometry, string primgroup, string attr_name, string uv_attr_name, vector uvw)#uvsample(${1:<geometry> geometry}, ${2:string primgroup}, ${3:string attr_name}, ${4:string uv_attr_name}, ${5:vector uvw})
vertex(<geometry> geometry, string attribute_name, int linear_vertex_index)#vertex(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int linear_vertex_index})
vertex(<geometry> geometry, string attribute_name, int prim_num, int vertex_num)#vertex(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int prim_num}, ${4:int vertex_num})
vertexattrib(<geometry> geometry, string attribute_name, int linear_vertex_index, int &success)#vertexattrib(${1:<geometry> geometry}, ${2:string attribute_name}, ${3:int linear_vertex_index}, ${4:int &success})
vertexattribsize(<geometry> geometry, string attribute_name)#vertexattribsize(${1:<geometry> geometry}, ${2:string attribute_name})
vertexattribtype(<geometry> geometry, string attribute_name)#vertexattribtype(${1:<geometry> geometry}, ${2:string attribute_name})
vertexattribtypeinfo(<geometry> geometry, string attribute_name)#vertexattribtypeinfo(${1:<geometry> geometry}, ${2:string attribute_name})
albedo(bsdf b, ...)#albedo(${1:bsdf b}, ${2:...})
albedo(bsdf b, int mask, ...)#albedo(${1:bsdf b}, ${2:int mask}, ${3:...})
albedo(bsdf b, vector viewer, ...)#albedo(${1:bsdf b}, ${2:vector viewer}, ${3:...})
albedo(bsdf b, vector viewer, int mask, ...)#albedo(${1:bsdf b}, ${2:vector viewer}, ${3:int mask}, ${4:...})
ashikhmin(float exponentx, float exponenty, vector framex, vector framey, ...)#ashikhmin(${1:float exponentx}, ${2:float exponenty}, ${3:vector framex}, ${4:vector framey}, ${5:...})
ashikhmin(vector nml, float exponentx, float exponenty, vector framex, vector framey, ...)#ashikhmin(${1:vector nml}, ${2:float exponentx}, ${3:float exponenty}, ${4:vector framex}, ${5:vector framey}, ${6:...})
blinn(float exponent, ...)#blinn(${1:float exponent}, ${2:...})
blinn(vector nml, float exponent, ...)#blinn(${1:vector nml}, ${2:float exponent}, ${3:...})
blinn(vector nml, vector V, float roughness, ...)#blinn(${1:vector nml}, ${2:vector V}, ${3:float roughness}, ${4:...})
chiang(vector nn, vector tanV, float R_v, float R_s, float TT_v, float TT_s, float TRT_v, float TRT_s, float shift, vector absorption_coeff, float ior, ...)#chiang(${1:vector nn}, ${2:vector tanV}, ${3:float R_v}, ${4:float R_s}, ${5:float TT_v}, ${6:float TT_s}, ${7:float TRT_v}, ${8:float TRT_s}, ${9:float shift}, ${10:vector absorption_coeff}, ${11:float ior}, ${12:...})
chiang_fur(vector nn, vector tanV, float mask, float cuticle, float R_v, float R_s, float TT_v, float TT_s, float TRT_v, float TRT_s, float shift, vector absorption_coeff, float ior, float R2_v, float R2_s, vector R2_color, ...)#chiang_fur(${1:vector nn}, ${2:vector tanV}, ${3:float mask}, ${4:float cuticle}, ${5:float R_v}, ${6:float R_s}, ${7:float TT_v}, ${8:float TT_s}, ${9:float TRT_v}, ${10:float TRT_s}, ${11:float shift}, ${12:vector absorption_coeff}, ${13:float ior}, ${14:float R2_v}, ${15:float R2_s}, ${16:vector R2_color}, ${17:...})
cone(vector normal, vector dir, float angle, ...)#cone(${1:vector normal}, ${2:vector dir}, ${3:float angle}, ${4:...})
cone(vector dir, float angle, ...)#cone(${1:vector dir}, ${2:float angle}, ${3:...})
cvex_bsdf(string eval_cvex_shader, string sampler_cvex_shader, ...)#cvex_bsdf(${1:string eval_cvex_shader}, ${2:string sampler_cvex_shader}, ${3:...})
diffuse(...)#diffuse(${1:...})
diffuse(float roughness, ...)#diffuse(${1:float roughness}, ${2:...})
diffuse(vector nml, ...)#diffuse(${1:vector nml}, ${2:...})
diffuse(vector nml, float roughness, ...)#diffuse(${1:vector nml}, ${2:float roughness}, ${3:...})
diffuse(vector nml, vector geo_normal, ...)#diffuse(${1:vector nml}, ${2:vector geo_normal}, ${3:...})
diffuse(vector nml, vector geo_normal, float roughness, ...)#diffuse(${1:vector nml}, ${2:vector geo_normal}, ${3:float roughness}, ${4:...})
diffuse(vector nml, vector V, float roughness, ...)#diffuse(${1:vector nml}, ${2:vector V}, ${3:float roughness}, ${4:...})
eval_bsdf(bsdf b, vector viewer, vector light, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:...})
eval_bsdf(bsdf b, vector viewer, vector light, int mask, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:int mask}, ${5:...})
eval_bsdf(bsdf b, vector viewer, vector light, float &pdf, int mask, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:float &pdf}, ${5:int mask}, ${6:...})
eval_bsdf(bsdf b, vector viewer, vector light, vector normal, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:vector normal}, ${5:...})
eval_bsdf(bsdf b, vector viewer, vector light, vector normal, int mask, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:vector normal}, ${5:int mask}, ${6:...})
eval_bsdf(bsdf b, vector viewer, vector light, vector normal, float &pdf, int mask, ...)#eval_bsdf(${1:bsdf b}, ${2:vector viewer}, ${3:vector light}, ${4:vector normal}, ${5:float &pdf}, ${6:int mask}, ${7:...})
getbounces(bsdf b)#getbounces(${1:bsdf b})
ggx(vector ng, vector nn, vector xg, vector yg, vector F0, vector F90, float alphax, float alphay, int masking, int fresblend, float eta, float reflect, float refract, int reflectmask, int refractmask, float dispersion, ...)#ggx(${1:vector ng}, ${2:vector nn}, ${3:vector xg}, ${4:vector yg}, ${5:vector F0}, ${6:vector F90}, ${7:float alphax}, ${8:float alphay}, ${9:int masking}, ${10:int fresblend}, ${11:float eta}, ${12:float reflect}, ${13:float refract}, ${14:int reflectmask}, ${15:int refractmask}, ${16:float dispersion}, ${17:...})
hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, ...)#hair(${1:vector N}, ${2:vector tip}, ${3:float lobe_shift}, ${4:float lobe_width_lon}, ${5:...})
hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, ...)#hair(${1:vector N}, ${2:vector tip}, ${3:float lobe_shift}, ${4:float lobe_width_lon}, ${5:float lobe_with_azi}, ${6:...})
hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, float glint_shift, float glint_intensity, ...)#hair(${1:vector N}, ${2:vector tip}, ${3:float lobe_shift}, ${4:float lobe_width_lon}, ${5:float lobe_with_azi}, ${6:float glint_shift}, ${7:float glint_intensity}, ${8:...})
henyeygreenstein(float anisotropic_bias, ...)#henyeygreenstein(${1:float anisotropic_bias}, ${2:...})
isotropic(...)#isotropic(${1:...})
mask_bsdf(bsdf b, int mask)#mask_bsdf(${1:bsdf b}, ${2:int mask})
normal_bsdf(bsdf b)#normal_bsdf(${1:bsdf b})
phong(float exponent, ...)#phong(${1:float exponent}, ${2:...})
phong(vector nml, float exponent, ...)#phong(${1:vector nml}, ${2:float exponent}, ${3:...})
phong(vector nml, vector V, float shinyness, ...)#phong(${1:vector nml}, ${2:vector V}, ${3:float shinyness}, ${4:...})
phonglobe(vector dir, float exponent, ...)#phonglobe(${1:vector dir}, ${2:float exponent}, ${3:...})
phonglobe(vector nml, vector dir, float exponent, ...)#phonglobe(${1:vector nml}, ${2:vector dir}, ${3:float exponent}, ${4:...})
phonglobe(vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)#phonglobe(${1:vector dir}, ${2:float exponentx}, ${3:float exponenty}, ${4:vector framex}, ${5:vector framey}, ${6:...})
phonglobe(vector nml, vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)#phonglobe(${1:vector nml}, ${2:vector dir}, ${3:float exponentx}, ${4:float exponenty}, ${5:vector framex}, ${6:vector framey}, ${7:...})
sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, int &type, float sx, float sy, ...)#sample_bsdf(${1:bsdf F}, ${2:vector viewer_u}, ${3:vector &dir}, ${4:vector &eval}, ${5:int &type}, ${6:float sx}, ${7:float sy}, ${8:...})
sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, int &type, float sx, float sy, int mask, ...)#sample_bsdf(${1:bsdf F}, ${2:vector viewer_u}, ${3:vector &dir}, ${4:vector &eval}, ${5:int &type}, ${6:float sx}, ${7:float sy}, ${8:int mask}, ${9:...})
sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, ...)#sample_bsdf(${1:bsdf F}, ${2:vector viewer_u}, ${3:vector &dir}, ${4:vector &eval}, ${5:float &pdf}, ${6:int &type}, ${7:float sx}, ${8:float sy}, ${9:...})
sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, int mask, ...)#sample_bsdf(${1:bsdf F}, ${2:vector viewer_u}, ${3:vector &dir}, ${4:vector &eval}, ${5:float &pdf}, ${6:int &type}, ${7:float sx}, ${8:float sy}, ${9:int mask}, ${10:...})
sample_bsdf(bsdf b, vector viewer_u, vector normal_v, int &flags, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, int mask, ...)#sample_bsdf(${1:bsdf b}, ${2:vector viewer_u}, ${3:vector normal_v}, ${4:int &flags}, ${5:vector &dir}, ${6:vector &eval}, ${7:float &pdf}, ${8:int &type}, ${9:float sx}, ${10:float sy}, ${11:int mask}, ${12:...})
solid_angle(bsdf b, int mask)#solid_angle(${1:bsdf b}, ${2:int mask})
split_bsdf(bsdf &lobes[], bsdf source, float &weights[])#split_bsdf(${1:bsdf &lobes[]}, ${2:bsdf source}, ${3:float &weights[]})
split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask)#split_bsdf(${1:bsdf &lobes[]}, ${2:bsdf source}, ${3:float &weights[]}, ${4:int mask})
split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type)#split_bsdf(${1:bsdf &lobes[]}, ${2:bsdf source}, ${3:float &weights[]}, ${4:int mask}, ${5:int type})
split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type, float u)#split_bsdf(${1:bsdf &lobes[]}, ${2:bsdf source}, ${3:float &weights[]}, ${4:int mask}, ${5:int type}, ${6:float u})
split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type, float u, float cdf[])#split_bsdf(${1:bsdf &lobes[]}, ${2:bsdf source}, ${3:float &weights[]}, ${4:int mask}, ${5:int type}, ${6:float u}, ${7:float cdf[]})
sssapprox(vector albedo, float meanFreePath, float roughness, float scale, ...)#sssapprox(${1:vector albedo}, ${2:float meanFreePath}, ${3:float roughness}, ${4:float scale}, ${5:...})
specular(vector dir, ...)#specular(${1:vector dir}, ${2:...})
specular(vector nml, vector V, float roughness, ...)#specular(${1:vector nml}, ${2:vector V}, ${3:float roughness}, ${4:...})
chadd(string channel_names)#chadd(${1:string channel_names})
chadd(string channel_names[])#chadd(${1:string channel_names[]})
chattr(string attrname, int &success)#chattr(${1:string attrname}, ${2:int &success})
chattr(int opinput, string attrname, int &success)#chattr(${1:int opinput}, ${2:string attrname}, ${3:int &success})
chattr(string attrname, int channel, int &success)#chattr(${1:string attrname}, ${2:int channel}, ${3:int &success})
chattr(int opinput, string attrname, int channel, int &success)#chattr(${1:int opinput}, ${2:string attrname}, ${3:int channel}, ${4:int &success})
chattr(string attrname, int channel, int sample, int &success)#chattr(${1:string attrname}, ${2:int channel}, ${3:int sample}, ${4:int &success})
chattr(int opinput, string attrname, int channel, int sample, int &success)#chattr(${1:int opinput}, ${2:string attrname}, ${3:int channel}, ${4:int sample}, ${5:int &success})
chattr(string attrclass, string attrname, int channel, int sample, int &success)#chattr(${1:string attrclass}, ${2:string attrname}, ${3:int channel}, ${4:int sample}, ${5:int &success})
chattr(int opinput, string attribclass, string attrname, int channel, int sample, int &success)#chattr(${1:int opinput}, ${2:string attribclass}, ${3:string attrname}, ${4:int channel}, ${5:int sample}, ${6:int &success})
chattrnames(int opinput, string attribclass)#chattrnames(${1:int opinput}, ${2:string attribclass})
chattrnames(string attrclass)#chattrnames(${1:string attrclass})
chend(int opinput=0)#chend(${1:int opinput=0})
chendf(int opinput=0)#chendf(${1:int opinput=0})
chendt(int opinput=0)#chendt(${1:int opinput=0})
chindex(int opinput, string name)#chindex(${1:int opinput}, ${2:string name})
chindex(string name)#chindex(${1:string name})
chindex(string names[])#chindex(${1:string names[]})
chinput(int channel_index, float|intsample)#chinput(${1:int channel_index}, ${2:float|intsample})
chinput(int opinput, int channel_index, float|intsample)#chinput(${1:int opinput}, ${2:int channel_index}, ${3:float|intsample})
chinput(string channel_name, float|intsample)#chinput(${1:string channel_name}, ${2:float|intsample})
chinput(int opinput, string channel_name, float|intsample)#chinput(${1:int opinput}, ${2:string channel_name}, ${3:float|intsample})
chinput(int channel_index, float|intsample, vector &t, vector &r, vector &s)#chinput(${1:int channel_index}, ${2:float|intsample}, ${3:vector &t}, ${4:vector &r}, ${5:vector &s})
chinput(int opinput, int channel_index, float|intsample, vector &t, vector &r, vector &s)#chinput(${1:int opinput}, ${2:int channel_index}, ${3:float|intsample}, ${4:vector &t}, ${5:vector &r}, ${6:vector &s})
chinput(string channel_name, float|intsample, vector &t, vector &r, vector &s)#chinput(${1:string channel_name}, ${2:float|intsample}, ${3:vector &t}, ${4:vector &r}, ${5:vector &s})
chinput(int opinput, string channel_name, float|intsample, vector &t, vector &r, vector &s)#chinput(${1:int opinput}, ${2:string channel_name}, ${3:float|intsample}, ${4:vector &t}, ${5:vector &r}, ${6:vector &s})
chinputlimits(int opinput, int channel, float &channel_min, float &channel_max)#chinputlimits(${1:int opinput}, ${2:int channel}, ${3:float &channel_min}, ${4:float &channel_max})
chnames()#chnames(${1:})
chnames(int opinput)#chnames(${1:int opinput})
chnumchan()#chnumchan(${1:})
chnumchan(int opinput)#chnumchan(${1:int opinput})
chop(string filename, int|stringchannel, float|intsample)#chop(${1:string filename}, ${2:int|stringchannel}, ${3:float|intsample})
choplocal(string filename, int|stringchannel, float|intsample)#choplocal(${1:string filename}, ${2:int|stringchannel}, ${3:float|intsample})
choplocalt(string filename, int|stringchannel, float|intsample, float time)#choplocalt(${1:string filename}, ${2:int|stringchannel}, ${3:float|intsample}, ${4:float time})
chopt(string filename, int|stringchannel, float|intsample, float time)#chopt(${1:string filename}, ${2:int|stringchannel}, ${3:float|intsample}, ${4:float time})
chrate()#chrate(${1:})
chrate(int opinput)#chrate(${1:int opinput})
chreadbuf(int index)#chreadbuf(${1:int index})
chremove(int channel_index)#chremove(${1:int channel_index})
chremove(int channel_indices[])#chremove(${1:int channel_indices[]})
chremove(string channel_name)#chremove(${1:string channel_name})
chremove(string channel_names[])#chremove(${1:string channel_names[]})
chremoveattr(string attrclass, string attrname)#chremoveattr(${1:string attrclass}, ${2:string attrname})
chremoveattr(string attrclass, string attrnames[])#chremoveattr(${1:string attrclass}, ${2:string attrnames[]})
chremoveattr(string attrname)#chremoveattr(${1:string attrname})
chremoveattr(string attrnames[])#chremoveattr(${1:string attrnames[]})
chrename(int channel_index, string new_name)#chrename(${1:int channel_index}, ${2:string new_name})
chrename(string channel_name, string new_name)#chrename(${1:string channel_name}, ${2:string new_name})
chresizebuf(int size)#chresizebuf(${1:int size})
chsetattr(string attrclass, string attrname, int channel, int sample, <type> value)#chsetattr(${1:string attrclass}, ${2:string attrname}, ${3:int channel}, ${4:int sample}, ${5:<type> value})
chsetattr(string attrname, int channel, int sample, <type> value)#chsetattr(${1:string attrname}, ${2:int channel}, ${3:int sample}, ${4:<type> value})
chsetlength(int clip_length)#chsetlength(${1:int clip_length})
chsetrate(int clip_rate)#chsetrate(${1:int clip_rate})
chsetrate(float clip_rate)#chsetrate(${1:float clip_rate})
chsetstart(int start)#chsetstart(${1:int start})
chsetstart(float start)#chsetstart(${1:float start})
chstart()#chstart(${1:})
chstart(int opinput)#chstart(${1:int opinput})
chstartf()#chstartf(${1:})
chstartf(int opinput)#chstartf(${1:int opinput})
chstartt()#chstartt(${1:})
chstartt(int opinput)#chstartt(${1:int opinput})
chwritebuf(int index, float value)#chwritebuf(${1:int index}, ${2:float value})
chwritebuf(int index, vector t, vector r, vector s)#chwritebuf(${1:int index}, ${2:vector t}, ${3:vector r}, ${4:vector s})
isframes()#isframes(${1:})
issamples()#issamples(${1:})
isseconds()#isseconds(${1:})
ninputs()#ninputs(${1:})
chprim_clear(int geohandle, int prim)#chprim_clear(${1:int geohandle}, ${2:int prim})
chprim_destroykey(int geohandle, int prim, float time)#chprim_destroykey(${1:int geohandle}, ${2:int prim}, ${3:float time})
chprim_end(<geometry> geometry, int prim)#chprim_end(${1:<geometry> geometry}, ${2:int prim})
chprim_eval(<geometry> geometry, int prim, float time)#chprim_eval(${1:<geometry> geometry}, ${2:int prim}, ${3:float time})
chprim_insertkey(int geohandle, int prim, float time)#chprim_insertkey(${1:int geohandle}, ${2:int prim}, ${3:float time})
chprim_keycount(<geometry> geometry, int prim)#chprim_keycount(${1:<geometry> geometry}, ${2:int prim})
chprim_keytimes(<geometry> geometry, int prim)#chprim_keytimes(${1:<geometry> geometry}, ${2:int prim})
chprim_keyvalues(<geometry> geometry, int prim)#chprim_keyvalues(${1:<geometry> geometry}, ${2:int prim})
chprim_length(<geometry> geometry, int prim)#chprim_length(${1:<geometry> geometry}, ${2:int prim})
chprim_setkeyaccel(int geohandle, int prim, float time, float accel)#chprim_setkeyaccel(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float accel})
chprim_setkeyaccel(int geohandle, int prim, float time, float accel, int half)#chprim_setkeyaccel(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float accel}, ${5:int half})
chprim_setkeyslope(int geohandle, int prim, float time, float slope)#chprim_setkeyslope(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float slope})
chprim_setkeyslope(int geohandle, int prim, float time, float slope, int half)#chprim_setkeyslope(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float slope}, ${5:int half})
chprim_setkeyvalue(int geohandle, int prim, float time, float value)#chprim_setkeyvalue(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float value})
chprim_setkeyvalue(int geohandle, int prim, float time, float value, int half)#chprim_setkeyvalue(${1:int geohandle}, ${2:int prim}, ${3:float time}, ${4:float value}, ${5:int half})
chprim_start(<geometry> geometry, int prim)#chprim_start(${1:<geometry> geometry}, ${2:int prim})
blackbody(float temperature, float luminance)#blackbody(${1:float temperature}, ${2:float luminance})
ctransform(string fromspace, string tospace, vector clr)#ctransform(${1:string fromspace}, ${2:string tospace}, ${3:vector clr})
ctransform(string tospace, vector clr)#ctransform(${1:string tospace}, ${2:vector clr})
luminance(vector rgb)#luminance(${1:vector rgb})
luminance(vector4 rgb)#luminance(${1:vector4 rgb})
luminance(float r, float g, float b)#luminance(${1:float r}, ${2:float g}, ${3:float b})
atof(string str)#atof(${1:string str})
atoi(string str)#atoi(${1:string str})
atoi(string str, int base)#atoi(${1:string str}, ${2:int base})
cracktransform(int trs, int xyz, int c, vector pivot, vector pivot_rotate, matrix xform)#cracktransform(${1:int trs}, ${2:int xyz}, ${3:int c}, ${4:vector pivot}, ${5:vector pivot_rotate}, ${6:matrix xform})
cracktransform(int trs, int xyz, int c, vector pivot, matrix xform)#cracktransform(${1:int trs}, ${2:int xyz}, ${3:int c}, ${4:vector pivot}, ${5:matrix xform})
cracktransform(int trs, int xyz, vector pivot, vector pivot_rotate, matrix xform, vector &t, vector &r, vector &s, vector &shears)#cracktransform(${1:int trs}, ${2:int xyz}, ${3:vector pivot}, ${4:vector pivot_rotate}, ${5:matrix xform}, ${6:vector &t}, ${7:vector &r}, ${8:vector &s}, ${9:vector &shears})
cracktransform(int trs, int xyz, vector pivot, matrix xform, vector &t, vector &r, vector &s)#cracktransform(${1:int trs}, ${2:int xyz}, ${3:vector pivot}, ${4:matrix xform}, ${5:vector &t}, ${6:vector &r}, ${7:vector &s})
degrees(float num_in_rads)#degrees(${1:float num_in_rads})
degrees(vector2 nums_in_rads)#degrees(${1:vector2 nums_in_rads})
degrees(vector nums_in_rads)#degrees(${1:vector nums_in_rads})
degrees(vector4 nums_in_rads)#degrees(${1:vector4 nums_in_rads})
eulertoquaternion(vector rotations, int order)#eulertoquaternion(${1:vector rotations}, ${2:int order})
hsvtorgb(vector hsv)#hsvtorgb(${1:vector hsv})
hsvtorgb(float hue, float sat, float val)#hsvtorgb(${1:float hue}, ${2:float sat}, ${3:float val})
qconvert(vector4 quaternion)#qconvert(${1:vector4 quaternion})
qconvert(vector4 quaternion, vector offset)#qconvert(${1:vector4 quaternion}, ${2:vector offset})
quaterniontoeuler(vector4 orient, int order)#quaterniontoeuler(${1:vector4 orient}, ${2:int order})
radians(float angle_in_degrees)#radians(${1:float angle_in_degrees})
radians(<vector> nums_in_degs)#radians(${1:<vector> nums_in_degs})
rgbtohsv(vector rgb)#rgbtohsv(${1:vector rgb})
rgbtohsv(float r, float g, float b)#rgbtohsv(${1:float r}, ${2:float g}, ${3:float b})
rgbtoxyz(vector rgb)#rgbtoxyz(${1:vector rgb})
serialize(<vector> vectors[])#serialize(${1:<vector> vectors[]})
serialize(<matrix> matrices[])#serialize(${1:<matrix> matrices[]})
unserialize(float values[])#unserialize(${1:float values[]})
xyztorgb(vector xyz)#xyztorgb(${1:vector xyz})
agentchannelcount(<geometry> geometry, int prim)#agentchannelcount(${1:<geometry> geometry}, ${2:int prim})
agentchannelnames(<geometry> geometry, int prim)#agentchannelnames(${1:<geometry> geometry}, ${2:int prim})
agentchannelvalue(<geometry> geometry, int prim, int channel)#agentchannelvalue(${1:<geometry> geometry}, ${2:int prim}, ${3:int channel})
agentchannelvalues(<geometry> geometry, int prim)#agentchannelvalues(${1:<geometry> geometry}, ${2:int prim})
agentclipcatalog(<geometry> geometry, int prim)#agentclipcatalog(${1:<geometry> geometry}, ${2:int prim})
agentclipchannel(<geometry> geometry, int prim, string clipname, string channel)#agentclipchannel(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:string channel})
agentclipchannel(<geometry> geometry, int prim, int clipindex, string channel)#agentclipchannel(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:string channel})
agentclipchannelnames(<geometry> geometry, int prim, string clipname)#agentclipchannelnames(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname})
agentclipchannelnames(<geometry> geometry, int prim, int clipindex)#agentclipchannelnames(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex})
agentcliplayerblend(float values[], float value_weights[], int value_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])#agentcliplayerblend(${1:float values[]}, ${2:float value_weights[]}, ${3:int value_layer_ids[]}, ${4:int layer_blend_modes[]}, ${5:float layer_weights[]}, ${6:int layer_parent_ids[]})
agentcliplayerblend(matrix values[], float value_weights[], int value_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])#agentcliplayerblend(${1:matrix values[]}, ${2:float value_weights[]}, ${3:int value_layer_ids[]}, ${4:int layer_blend_modes[]}, ${5:float layer_weights[]}, ${6:int layer_parent_ids[]})
agentcliplength(<geometry> geometry, int prim, string clipname)#agentcliplength(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname})
agentcliplength(<geometry> geometry, int prim, int clipindex)#agentcliplength(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex})
agentclipnames(<geometry> geometry, int prim)#agentclipnames(${1:<geometry> geometry}, ${2:int prim})
agentclipsample(<geometry> geometry, int prim, string clipname, float time, int channel_index)#agentclipsample(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time}, ${5:int channel_index})
agentclipsample(<geometry> geometry, int prim, string clipname, float time, string channel)#agentclipsample(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time}, ${5:string channel})
agentclipsample(<geometry> geometry, int prim, int clipindex, float time, int channel_index)#agentclipsample(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time}, ${5:int channel_index})
agentclipsample(<geometry> geometry, int prim, int clipindex, float time, string channel)#agentclipsample(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time}, ${5:string channel})
agentclipsamplelocal(<geometry> geometry, int prim, string clipname, float time)#agentclipsamplelocal(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time})
agentclipsamplelocal(<geometry> geometry, int prim, int clipindex, float time)#agentclipsamplelocal(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time})
agentclipsamplelocal(<geometry> geometry, int prim, string clipname, float time, int transform)#agentclipsamplelocal(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time}, ${5:int transform})
agentclipsamplelocal(<geometry> geometry, int prim, int clipindex, float time, int transform)#agentclipsamplelocal(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time}, ${5:int transform})
agentclipsamplerate(<geometry> geometry, int prim, string clipname)#agentclipsamplerate(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname})
agentclipsamplerate(<geometry> geometry, int prim, int clipindex)#agentclipsamplerate(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex})
agentclipsampleworld(<geometry> geometry, int prim, string clipname, float time)#agentclipsampleworld(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time})
agentclipsampleworld(<geometry> geometry, int prim, int clipindex, float time)#agentclipsampleworld(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time})
agentclipsampleworld(<geometry> geometry, int prim, string clipname, float time, int transform)#agentclipsampleworld(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname}, ${4:float time}, ${5:int transform})
agentclipsampleworld(<geometry> geometry, int prim, int clipindex, float time, int transform)#agentclipsampleworld(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex}, ${4:float time}, ${5:int transform})
agentclipstarttime(<geometry> geometry, int prim, string clipname)#agentclipstarttime(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname})
agentclipstarttime(<geometry> geometry, int prim, int clipindex)#agentclipstarttime(${1:<geometry> geometry}, ${2:int prim}, ${3:int clipindex})
agentcliptimes(<geometry> geometry, int prim)#agentcliptimes(${1:<geometry> geometry}, ${2:int prim})
agentcliptransformgroups(<geometry> geometry, int prim)#agentcliptransformgroups(${1:<geometry> geometry}, ${2:int prim})
agentclipweights(<geometry> geometry, int prim)#agentclipweights(${1:<geometry> geometry}, ${2:int prim})
agentcollisionlayers(<geometry> geometry, int prim)#agentcollisionlayers(${1:<geometry> geometry}, ${2:int prim})
agentcurrentlayers(<geometry> geometry, int prim)#agentcurrentlayers(${1:<geometry> geometry}, ${2:int prim})
agentfindclip(<geometry> geometry, int prim, string clipname)#agentfindclip(${1:<geometry> geometry}, ${2:int prim}, ${3:string clipname})
agentfindlayer(<geometry> geometry, int prim, string layername)#agentfindlayer(${1:<geometry> geometry}, ${2:int prim}, ${3:string layername})
agentfindtransformgroup(<geometry> geometry, int prim, string transformgroup)#agentfindtransformgroup(${1:<geometry> geometry}, ${2:int prim}, ${3:string transformgroup})
agentlayerbindings(<geometry> geometry, int prim, string layername, string shapetype)#agentlayerbindings(${1:<geometry> geometry}, ${2:int prim}, ${3:string layername}, ${4:string shapetype})
agentlayerbindings(<geometry> geometry, int prim, int layerindex, string shapetype)#agentlayerbindings(${1:<geometry> geometry}, ${2:int prim}, ${3:int layerindex}, ${4:string shapetype})
agentlayers(<geometry> geometry, int prim)#agentlayers(${1:<geometry> geometry}, ${2:int prim})
agentlayershapes(<geometry> geometry, int prim, string layername, string shapetype)#agentlayershapes(${1:<geometry> geometry}, ${2:int prim}, ${3:string layername}, ${4:string shapetype})
agentlayershapes(<geometry> geometry, int prim, int layerindex, string shapetype)#agentlayershapes(${1:<geometry> geometry}, ${2:int prim}, ${3:int layerindex}, ${4:string shapetype})
agentlayershapes(<geometry> geometry, int prim, string layername, int transform)#agentlayershapes(${1:<geometry> geometry}, ${2:int prim}, ${3:string layername}, ${4:int transform})
agentlayershapes(<geometry> geometry, int prim, int layerindex, int transform)#agentlayershapes(${1:<geometry> geometry}, ${2:int prim}, ${3:int layerindex}, ${4:int transform})
agentlocaltransform(<geometry> geometry, int prim, int transform)#agentlocaltransform(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentlocaltransforms(<geometry> geometry, int prim)#agentlocaltransforms(${1:<geometry> geometry}, ${2:int prim})
agentmetadata(<geometry> geometry, int prim)#agentmetadata(${1:<geometry> geometry}, ${2:int prim})
agentrestlocaltransform(<geometry> geometry, int prim, int transform)#agentrestlocaltransform(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentrestworldtransform(<geometry> geometry, int prim, int transform)#agentrestworldtransform(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentrigchildren(<geometry> geometry, int prim, int transform)#agentrigchildren(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentrigfind(<geometry> geometry, int prim, string transformname)#agentrigfind(${1:<geometry> geometry}, ${2:int prim}, ${3:string transformname})
agentrigfindchannel(<geometry> geometry, int prim, string channelname)#agentrigfindchannel(${1:<geometry> geometry}, ${2:int prim}, ${3:string channelname})
agentrigparent(<geometry> geometry, int prim, int transform)#agentrigparent(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters)#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot)#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[])#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot}, ${10:float targetweights[]}, ${11:int targetpriorities[]}, ${12:int targetdepths[]})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[])#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot}, ${10:float targetweights[]}, ${11:int targetpriorities[]}, ${12:int targetdepths[]}, ${13:int targettypes[]}, ${14:matrix targetoffsets[]})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], string goalxformattrib, string constrainedxformattrib, string jointlimitsattrib)#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot}, ${10:float targetweights[]}, ${11:int targetpriorities[]}, ${12:int targetdepths[]}, ${13:string goalxformattrib}, ${14:string constrainedxformattrib}, ${15:string jointlimitsattrib})
agentsolvefbik(<geometry> geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[], string goalxformattrib, string constrainedxformattrib, string jointlimitsattrib)#agentsolvefbik(${1:<geometry> geometry}, ${2:int outgeo}, ${3:int prim}, ${4:int targets[]}, ${5:matrix targetxforms[]}, ${6:int xformgroup}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot}, ${10:float targetweights[]}, ${11:int targetpriorities[]}, ${12:int targetdepths[]}, ${13:int targettypes[]}, ${14:matrix targetoffsets[]}, ${15:string goalxformattrib}, ${16:string constrainedxformattrib}, ${17:string jointlimitsattrib})
agenttransformcount(<geometry> geometry, int prim)#agenttransformcount(${1:<geometry> geometry}, ${2:int prim})
agenttransformgroupmember(<geometry> geometry, int prim, string transformgroup, int transform)#agenttransformgroupmember(${1:<geometry> geometry}, ${2:int prim}, ${3:string transformgroup}, ${4:int transform})
agenttransformgroupmember(<geometry> geometry, int prim, int transformgroupidx, int transform)#agenttransformgroupmember(${1:<geometry> geometry}, ${2:int prim}, ${3:int transformgroupidx}, ${4:int transform})
agenttransformgroupmemberchannel(<geometry> geometry, int prim, int transformgroupidx, int channel)#agenttransformgroupmemberchannel(${1:<geometry> geometry}, ${2:int prim}, ${3:int transformgroupidx}, ${4:int channel})
agenttransformgroups(<geometry> geometry, int prim)#agenttransformgroups(${1:<geometry> geometry}, ${2:int prim})
agenttransformgroupweight(<geometry> geometry, int prim, int transformgroup, int transform)#agenttransformgroupweight(${1:<geometry> geometry}, ${2:int prim}, ${3:int transformgroup}, ${4:int transform})
agenttransformnames(<geometry> geometry, int prim)#agenttransformnames(${1:<geometry> geometry}, ${2:int prim})
agenttransformtolocal(<geometry> geometry, int prim, matrix &transforms[])#agenttransformtolocal(${1:<geometry> geometry}, ${2:int prim}, ${3:matrix &transforms[]})
agenttransformtoworld(<geometry> geometry, int prim, matrix &transforms[])#agenttransformtoworld(${1:<geometry> geometry}, ${2:int prim}, ${3:matrix &transforms[]})
agentworldtransform(<geometry> geometry, int prim, int transform)#agentworldtransform(${1:<geometry> geometry}, ${2:int prim}, ${3:int transform})
agentworldtransforms(<geometry> geometry, int prim)#agentworldtransforms(${1:<geometry> geometry}, ${2:int prim})
setagentchannelvalue(int geohandle, int prim, float value, int channel)#setagentchannelvalue(${1:int geohandle}, ${2:int prim}, ${3:float value}, ${4:int channel})
setagentchannelvalues(int geohandle, int prim, float values[])#setagentchannelvalues(${1:int geohandle}, ${2:int prim}, ${3:float values[]})
setagentclipnames(int geohandle, int prim, string clipnames[])#setagentclipnames(${1:int geohandle}, ${2:int prim}, ${3:string clipnames[]})
setagentclips(int geohandle, int prim, string clip_names[], float clip_times[], float clip_weights[], string clip_transform_groups[], int clip_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])#setagentclips(${1:int geohandle}, ${2:int prim}, ${3:string clip_names[]}, ${4:float clip_times[]}, ${5:float clip_weights[]}, ${6:string clip_transform_groups[]}, ${7:int clip_layer_ids[]}, ${8:int layer_blend_modes[]}, ${9:float layer_weights[]}, ${10:int layer_parent_ids[]})
setagentclips(int geohandle, int prim, int clip_ids[], float clip_times[], float clip_weights[], int clip_transform_group_ids[], int clip_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])#setagentclips(${1:int geohandle}, ${2:int prim}, ${3:int clip_ids[]}, ${4:float clip_times[]}, ${5:float clip_weights[]}, ${6:int clip_transform_group_ids[]}, ${7:int clip_layer_ids[]}, ${8:int layer_blend_modes[]}, ${9:float layer_weights[]}, ${10:int layer_parent_ids[]})
setagentcliptimes(int geohandle, int prim, float cliptimes[])#setagentcliptimes(${1:int geohandle}, ${2:int prim}, ${3:float cliptimes[]})
setagentclipweights(int geohandle, int prim, float clipweights[])#setagentclipweights(${1:int geohandle}, ${2:int prim}, ${3:float clipweights[]})
setagentcollisionlayers(int geohandle, int prim, string layernames[])#setagentcollisionlayers(${1:int geohandle}, ${2:int prim}, ${3:string layernames[]})
setagentcollisionlayers(int geohandle, int prim, int layer_ids[])#setagentcollisionlayers(${1:int geohandle}, ${2:int prim}, ${3:int layer_ids[]})
setagentcurrentlayers(int geohandle, int prim, string layernames[])#setagentcurrentlayers(${1:int geohandle}, ${2:int prim}, ${3:string layernames[]})
setagentcurrentlayers(int geohandle, int prim, int layer_ids[])#setagentcurrentlayers(${1:int geohandle}, ${2:int prim}, ${3:int layer_ids[]})
setagentlocaltransform(int geohandle, int prim, matrix transform, int index)#setagentlocaltransform(${1:int geohandle}, ${2:int prim}, ${3:matrix transform}, ${4:int index})
setagentlocaltransforms(int geohandle, int prim, matrix transforms[])#setagentlocaltransforms(${1:int geohandle}, ${2:int prim}, ${3:matrix transforms[]})
setagentworldtransform(int geohandle, int prim, matrix transform, int index)#setagentworldtransform(${1:int geohandle}, ${2:int prim}, ${3:matrix transform}, ${4:int index})
setagentworldtransforms(int geohandle, int prim, matrix transforms[])#setagentworldtransforms(${1:int geohandle}, ${2:int prim}, ${3:matrix transforms[]})
json_dumps(dict d, int flags)#json_dumps(${1:dict d}, ${2:int flags})
json_loads(string json, int flags)#json_loads(${1:string json}, ${2:int flags})
keys(dict d)#keys(${1:dict d})
typeid(<type> value)#typeid(${1:<type> value})
typeid(<type> value[])#typeid(${1:<type> value[]})
typeid(dict dictionary, string key)#typeid(${1:dict dictionary}, ${2:string key})
dimport(string name, <type> &out)#dimport(${1:string name}, ${2:<type> &out})
file_stat(string filename, int &stat_data[], ...)#file_stat(${1:string filename}, ${2:int &stat_data[]}, ${3:...})
filter_remap(vector2 uv, string filter, float width, ...)#filter_remap(${1:vector2 uv}, ${2:string filter}, ${3:float width}, ${4:...})
fuzzify(string ramp_basis[], float ramp_values[], float ramp_positions[], float crisp_value, float min_value, float max_value)#fuzzify(${1:string ramp_basis[]}, ${2:float ramp_values[]}, ${3:float ramp_positions[]}, ${4:float crisp_value}, ${5:float min_value}, ${6:float max_value})
fuzzy_and(int a, int b, ...)#fuzzy_and(${1:int a}, ${2:int b}, ${3:...})
fuzzy_and(float a, float b, ...)#fuzzy_and(${1:float a}, ${2:float b}, ${3:...})
fuzzy_defuzz_centroid(float aggregated_membership[], float min_value, float max_value)#fuzzy_defuzz_centroid(${1:float aggregated_membership[]}, ${2:float min_value}, ${3:float max_value})
fuzzy_nand(int a, int b, ...)#fuzzy_nand(${1:int a}, ${2:int b}, ${3:...})
fuzzy_nand(float a, float b, ...)#fuzzy_nand(${1:float a}, ${2:float b}, ${3:...})
fuzzy_nor(int a, int b, ...)#fuzzy_nor(${1:int a}, ${2:int b}, ${3:...})
fuzzy_nor(float a, float b, ...)#fuzzy_nor(${1:float a}, ${2:float b}, ${3:...})
fuzzy_not(int n)#fuzzy_not(${1:int n})
fuzzy_not(float n)#fuzzy_not(${1:float n})
fuzzy_nxor(int a, int b, ...)#fuzzy_nxor(${1:int a}, ${2:int b}, ${3:...})
fuzzy_nxor(float a, float b, ...)#fuzzy_nxor(${1:float a}, ${2:float b}, ${3:...})
fuzzy_or(int a, int b, ...)#fuzzy_or(${1:int a}, ${2:int b}, ${3:...})
fuzzy_or(float a, float b, ...)#fuzzy_or(${1:float a}, ${2:float b}, ${3:...})
fuzzy_xor(int a, int b, ...)#fuzzy_xor(${1:int a}, ${2:int b}, ${3:...})
fuzzy_xor(float a, float b, ...)#fuzzy_xor(${1:float a}, ${2:float b}, ${3:...})
addpoint(int geohandle, int point_number)#addpoint(${1:int geohandle}, ${2:int point_number})
addpoint(int geohandle, vector pos)#addpoint(${1:int geohandle}, ${2:vector pos})
addprim(int geohandle, string type)#addprim(${1:int geohandle}, ${2:string type})
addprim(int geohandle, string type, int pt0)#addprim(${1:int geohandle}, ${2:string type}, ${3:int pt0})
addprim(int geohandle, string type, int pt0, int pt1)#addprim(${1:int geohandle}, ${2:string type}, ${3:int pt0}, ${4:int pt1})
addprim(int geohandle, string type, int pt0, int pt1, int pt2)#addprim(${1:int geohandle}, ${2:string type}, ${3:int pt0}, ${4:int pt1}, ${5:int pt2})
addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3)#addprim(${1:int geohandle}, ${2:string type}, ${3:int pt0}, ${4:int pt1}, ${5:int pt2}, ${6:int pt3})
addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int pt4, int pt5, int pt6, int pt7)#addprim(${1:int geohandle}, ${2:string type}, ${3:int pt0}, ${4:int pt1}, ${5:int pt2}, ${6:int pt3}, ${7:int pt4}, ${8:int pt5}, ${9:int pt6}, ${10:int pt7})
addprim(int geohandle, string type, int points[])#addprim(${1:int geohandle}, ${2:string type}, ${3:int points[]})
addprim(int &prim_num, int geohandle, string type, int pt0, int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int pt0}, ${5:int &vertices[]})
addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int pt0}, ${5:int pt1}, ${6:int &vertices[]})
addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int pt0}, ${5:int pt1}, ${6:int pt2}, ${7:int &vertices[]})
addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int pt0}, ${5:int pt1}, ${6:int pt2}, ${7:int pt3}, ${8:int &vertices[]})
addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int pt4, int pt5, int pt6, int pt7, int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int pt0}, ${5:int pt1}, ${6:int pt2}, ${7:int pt3}, ${8:int pt4}, ${9:int pt5}, ${10:int pt6}, ${11:int pt7}, ${12:int &vertices[]})
addprim(int &prim_num, int geohandle, string type, int points[], int &vertices[])#addprim(${1:int &prim_num}, ${2:int geohandle}, ${3:string type}, ${4:int points[]}, ${5:int &vertices[]})
addvertex(int geohandle, int prim_num, int point_num)#addvertex(${1:int geohandle}, ${2:int prim_num}, ${3:int point_num})
clip(int &result, vector &p0, vector &p1, vector4 plane)#clip(${1:int &result}, ${2:vector &p0}, ${3:vector &p1}, ${4:vector4 plane})
clip(int &result, vector &p0, vector &p1, vector min, vector max)#clip(${1:int &result}, ${2:vector &p0}, ${3:vector &p1}, ${4:vector min}, ${5:vector max})
expandedgegroup(<geometry> geometry, string groupname)#expandedgegroup(${1:<geometry> geometry}, ${2:string groupname})
expandedgegroup(<geometry> geometry, string groupname, string mode)#expandedgegroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:string mode})
geoself()#geoself(${1:})
geounwrap(<geometry> geometry, string unwrap_attribute)#geounwrap(${1:<geometry> geometry}, ${2:string unwrap_attribute})
inedgegroup(string filename, string groupname, int pointnum0, int pointnum1)#inedgegroup(${1:string filename}, ${2:string groupname}, ${3:int pointnum0}, ${4:int pointnum1})
inedgegroup(int input, string groupname, int pointnum0, int pointnum1)#inedgegroup(${1:int input}, ${2:string groupname}, ${3:int pointnum0}, ${4:int pointnum1})
intersect(<geometry> geometry, vector orig, vector dir, vector &p, float &u, float &v)#intersect(${1:<geometry> geometry}, ${2:vector orig}, ${3:vector dir}, ${4:vector &p}, ${5:float &u}, ${6:float &v})
intersect(<geometry> geometry, vector orig, vector dir, vector &p, float &u, float &v, ...)#intersect(${1:<geometry> geometry}, ${2:vector orig}, ${3:vector dir}, ${4:vector &p}, ${5:float &u}, ${6:float &v}, ${7:...})
intersect(<geometry> geometry, vector orig, vector dir, vector &p, vector &uvw)#intersect(${1:<geometry> geometry}, ${2:vector orig}, ${3:vector dir}, ${4:vector &p}, ${5:vector &uvw})
intersect(<geometry> geometry, string group, vector orig, vector dir, vector &p, vector &uvw)#intersect(${1:<geometry> geometry}, ${2:string group}, ${3:vector orig}, ${4:vector dir}, ${5:vector &p}, ${6:vector &uvw})
intersect_all(<geometry> geometry, string group, vector orig, vector dir, vector &pos[], int &prim[], vector &uvw[], float tol=0.01, float ttol=0.01 )#intersect_all(${1:<geometry> geometry}, ${2:string group}, ${3:vector orig}, ${4:vector dir}, ${5:vector &pos[]}, ${6:int &prim[]}, ${7:vector &uvw[]}, ${8:float tol=0.01}, ${9:float ttol=0.01 })
minpos(<geometry> geometry, vector point)#minpos(${1:<geometry> geometry}, ${2:vector point})
minpos(<geometry> geometry, vector point, float maxdist)#minpos(${1:<geometry> geometry}, ${2:vector point}, ${3:float maxdist})
minpos(<geometry> geometry, string primgroup, vector point)#minpos(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector point})
minpos(<geometry> geometry, string primgroup, vector point, float maxdist)#minpos(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector point}, ${4:float maxdist})
nearpoint(<geometry> geometry, vector pt)#nearpoint(${1:<geometry> geometry}, ${2:vector pt})
nearpoint(<geometry> geometry, vector pt, float maxdist)#nearpoint(${1:<geometry> geometry}, ${2:vector pt}, ${3:float maxdist})
nearpoint(<geometry> geometry, string ptgroup, vector pt)#nearpoint(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:vector pt})
nearpoint(<geometry> geometry, string ptgroup, vector pt, float maxdist)#nearpoint(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:vector pt}, ${4:float maxdist})
nearpoints(<geometry> geometry, vector pt, float maxdist)#nearpoints(${1:<geometry> geometry}, ${2:vector pt}, ${3:float maxdist})
nearpoints(<geometry> geometry, vector pt, float maxdist, int maxpts)#nearpoints(${1:<geometry> geometry}, ${2:vector pt}, ${3:float maxdist}, ${4:int maxpts})
nearpoints(<geometry> geometry, string ptgroup, vector pt, float maxdist)#nearpoints(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:vector pt}, ${4:float maxdist})
nearpoints(<geometry> geometry, string ptgroup, vector pt, float maxdist, int maxpts)#nearpoints(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:vector pt}, ${4:float maxdist}, ${5:int maxpts})
nedgesgroup(<geometry> geometry, string groupname)#nedgesgroup(${1:<geometry> geometry}, ${2:string groupname})
neighbour(<geometry> geometry, int point_num, int neighbour_num)#neighbour(${1:<geometry> geometry}, ${2:int point_num}, ${3:int neighbour_num})
neighbourcount(<geometry> geometry, int point_num)#neighbourcount(${1:<geometry> geometry}, ${2:int point_num})
neighbours(<geometry> geometry, int ptnum)#neighbours(${1:<geometry> geometry}, ${2:int ptnum})
npoints(<geometry> geometry)#npoints(${1:<geometry> geometry})
nprimitives(<geometry> geometry)#nprimitives(${1:<geometry> geometry})
nvertices(<geometry> geometry)#nvertices(${1:<geometry> geometry})
nverticesgroup(<geometry> geometry, string groupname)#nverticesgroup(${1:<geometry> geometry}, ${2:string groupname})
pointprims(<geometry> geometry, int ptnum)#pointprims(${1:<geometry> geometry}, ${2:int ptnum})
pointvertex(<geometry> geometry, int point_num)#pointvertex(${1:<geometry> geometry}, ${2:int point_num})
pointvertices(<geometry> geometry, int ptnum)#pointvertices(${1:<geometry> geometry}, ${2:int ptnum})
polyneighbours(<geometry> geometry, int primnum)#polyneighbours(${1:<geometry> geometry}, ${2:int primnum})
primfind(<geometry> geometry, vector min, vector max)#primfind(${1:<geometry> geometry}, ${2:vector min}, ${3:vector max})
primfind(<geometry> geometry, string group, vector min, vector max)#primfind(${1:<geometry> geometry}, ${2:string group}, ${3:vector min}, ${4:vector max})
primpoint(<geometry> geometry, int primnum, int vertex)#primpoint(${1:<geometry> geometry}, ${2:int primnum}, ${3:int vertex})
primpoints(<geometry> geometry, int primnum)#primpoints(${1:<geometry> geometry}, ${2:int primnum})
primvertex(<geometry> geometry, int primnum, int vertex)#primvertex(${1:<geometry> geometry}, ${2:int primnum}, ${3:int vertex})
primvertexcount(<geometry> geometry, int prim_num)#primvertexcount(${1:<geometry> geometry}, ${2:int prim_num})
primvertices(<geometry> geometry, int primnum)#primvertices(${1:<geometry> geometry}, ${2:int primnum})
removeattrib(int geohandle, string attribclass, string name)#removeattrib(${1:int geohandle}, ${2:string attribclass}, ${3:string name})
removepoint(int geohandle, int point_number)#removepoint(${1:int geohandle}, ${2:int point_number})
removepoint(int geohandle, int point_number, int and_prims)#removepoint(${1:int geohandle}, ${2:int point_number}, ${3:int and_prims})
removeprim(int geohandle, int prim_number, int andpoints)#removeprim(${1:int geohandle}, ${2:int prim_number}, ${3:int andpoints})
removevertex(int geohandle, int linear_vertex_index)#removevertex(${1:int geohandle}, ${2:int linear_vertex_index})
setedgegroup(int geohandle, string name, int pt0, int pt1, int value)#setedgegroup(${1:int geohandle}, ${2:string name}, ${3:int pt0}, ${4:int pt1}, ${5:int value})
setprimvertex(int geohandle, int prim, int vtxofprim, int pt)#setprimvertex(${1:int geohandle}, ${2:int prim}, ${3:int vtxofprim}, ${4:int pt})
setvertexpoint(int geohandle, int prim, int vtxofprim, int pt)#setvertexpoint(${1:int geohandle}, ${2:int prim}, ${3:int vtxofprim}, ${4:int pt})
uvintersect(<geometry> geometry, string uvname, vector orig, vector dir, vector &pos, vector &primuv)#uvintersect(${1:<geometry> geometry}, ${2:string uvname}, ${3:vector orig}, ${4:vector dir}, ${5:vector &pos}, ${6:vector &primuv})
uvintersect(<geometry> geometry, string primgroup, string uvname, vector orig, vector dir, vector &pos, vector &primuv)#uvintersect(${1:<geometry> geometry}, ${2:string primgroup}, ${3:string uvname}, ${4:vector orig}, ${5:vector dir}, ${6:vector &pos}, ${7:vector &primuv})
vertexcurveparam(<geometry> geometry, int linearindex)#vertexcurveparam(${1:<geometry> geometry}, ${2:int linearindex})
vertexindex(<geometry> geometry, int primnum, int vertex)#vertexindex(${1:<geometry> geometry}, ${2:int primnum}, ${3:int vertex})
vertexnext(<geometry> geometry, int linearvertex)#vertexnext(${1:<geometry> geometry}, ${2:int linearvertex})
vertexpoint(<geometry> geometry, int linearvertex)#vertexpoint(${1:<geometry> geometry}, ${2:int linearvertex})
vertexprev(<geometry> geometry, int linearvertex)#vertexprev(${1:<geometry> geometry}, ${2:int linearvertex})
vertexprim(<geometry> geometry, int linearvertex)#vertexprim(${1:<geometry> geometry}, ${2:int linearvertex})
vertexprimindex(<geometry> geometry, int linearindex)#vertexprimindex(${1:<geometry> geometry}, ${2:int linearindex})
expandpointgroup(<geometry> geometry, string groupname)#expandpointgroup(${1:<geometry> geometry}, ${2:string groupname})
expandpointgroup(<geometry> geometry, string groupname, string mode)#expandpointgroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:string mode})
expandprimgroup(<geometry> geometry, string groupname)#expandprimgroup(${1:<geometry> geometry}, ${2:string groupname})
expandprimgroup(<geometry> geometry, string groupname, string mode)#expandprimgroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:string mode})
expandvertexgroup(<geometry> geometry, string groupname)#expandvertexgroup(${1:<geometry> geometry}, ${2:string groupname})
expandvertexgroup(<geometry> geometry, string groupname, string mode)#expandvertexgroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:string mode})
inpointgroup(<geometry> geometry, string groupname, int pointnum)#inpointgroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:int pointnum})
inprimgroup(<geometry> geometry, string groupname, int primnum)#inprimgroup(${1:<geometry> geometry}, ${2:string groupname}, ${3:int primnum})
invertexgroup(string filename, string groupname, int vertexnum)#invertexgroup(${1:string filename}, ${2:string groupname}, ${3:int vertexnum})
invertexgroup(int opinput, string groupname, int vertexnum)#invertexgroup(${1:int opinput}, ${2:string groupname}, ${3:int vertexnum})
npointsgroup(<geometry> geometry, string groupname)#npointsgroup(${1:<geometry> geometry}, ${2:string groupname})
nprimitivesgroup(<geometry> geometry, string groupname)#nprimitivesgroup(${1:<geometry> geometry}, ${2:string groupname})
setpointgroup(int geohandle, string name, int point_num, int value, string mode="set")#setpointgroup(${1:int geohandle}, ${2:string name}, ${3:int point_num}, ${4:int value}, ${5:string mode="set"})
setprimgroup(int geohandle, string name, int prim_num, int value, string mode="set")#setprimgroup(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:int value}, ${5:string mode="set"})
setvertexgroup(int geohandle, string name, int prim_num, int vertex_num, int value, string mode="set")#setvertexgroup(${1:int geohandle}, ${2:string name}, ${3:int prim_num}, ${4:int vertex_num}, ${5:int value}, ${6:string mode="set"})
hedge_dstpoint(<geometry> geometry, int hedge)#hedge_dstpoint(${1:<geometry> geometry}, ${2:int hedge})
hedge_dstvertex(<geometry> geometry, int hedge)#hedge_dstvertex(${1:<geometry> geometry}, ${2:int hedge})
hedge_equivcount(<geometry> geometry, int hedge)#hedge_equivcount(${1:<geometry> geometry}, ${2:int hedge})
hedge_isequiv(<geometry> geometry, int hedge1, int hedge2)#hedge_isequiv(${1:<geometry> geometry}, ${2:int hedge1}, ${3:int hedge2})
hedge_isprimary(string geometry, int hedge)#hedge_isprimary(${1:string geometry}, ${2:int hedge})
hedge_isprimary(int opinput, int hendge)#hedge_isprimary(${1:int opinput}, ${2:int hendge})
hedge_isvalid(<geometry> geometry, int hedge)#hedge_isvalid(${1:<geometry> geometry}, ${2:int hedge})
hedge_next(<geometry> geometry, int hedge)#hedge_next(${1:<geometry> geometry}, ${2:int hedge})
hedge_nextequiv(<geometry> geometry, int hedge)#hedge_nextequiv(${1:<geometry> geometry}, ${2:int hedge})
hedge_postdstpoint(<geometry> geometry, int hedge)#hedge_postdstpoint(${1:<geometry> geometry}, ${2:int hedge})
hedge_postdstvertex(<geometry> geometry, int hedge)#hedge_postdstvertex(${1:<geometry> geometry}, ${2:int hedge})
hedge_presrcpoint(<geometry> geometry, int hedge)#hedge_presrcpoint(${1:<geometry> geometry}, ${2:int hedge})
hedge_presrcvertex(<geometry> geometry, int hedge)#hedge_presrcvertex(${1:<geometry> geometry}, ${2:int hedge})
hedge_prev(<geometry> geometry, int hedge)#hedge_prev(${1:<geometry> geometry}, ${2:int hedge})
hedge_prim(<geometry> geometry, int hedge)#hedge_prim(${1:<geometry> geometry}, ${2:int hedge})
hedge_primary(<geometry> geometry, int hedge)#hedge_primary(${1:<geometry> geometry}, ${2:int hedge})
hedge_srcpoint(<geometry> geometry, int hedge)#hedge_srcpoint(${1:<geometry> geometry}, ${2:int hedge})
hedge_srcvertex(<geometry> geometry, int hedge)#hedge_srcvertex(${1:<geometry> geometry}, ${2:int hedge})
pointedge(<geometry> geometry, int point1, int point2)#pointedge(${1:<geometry> geometry}, ${2:int point1}, ${3:int point2})
pointhedge(<geometry> geometry, int point)#pointhedge(${1:<geometry> geometry}, ${2:int point})
pointhedge(<geometry> geometry, int srcpoint, int dstpoint)#pointhedge(${1:<geometry> geometry}, ${2:int srcpoint}, ${3:int dstpoint})
pointhedgenext(<geometry> geometry, int hedge)#pointhedgenext(${1:<geometry> geometry}, ${2:int hedge})
primhedge(<geometry> geometry, int prim)#primhedge(${1:<geometry> geometry}, ${2:int prim})
vertexhedge(<geometry> geometry, int vertex)#vertexhedge(${1:<geometry> geometry}, ${2:int vertex})
hex_adjacent(<geometry> geometry, int primindex, int faceno)#hex_adjacent(${1:<geometry> geometry}, ${2:int primindex}, ${3:int faceno})
hex_faceindex(int faceno, int vtxno)#hex_faceindex(${1:int faceno}, ${2:int vtxno})
accessframe(int frame)#accessframe(${1:int frame})
alphaname()#alphaname(${1:})
binput(int u, int v, ...)#binput(${1:int u}, ${2:int v}, ${3:...})
binput(float u, float v, ...)#binput(${1:float u}, ${2:float v}, ${3:...})
binput(int comp, int u, int v, ...)#binput(${1:int comp}, ${2:int u}, ${3:int v}, ${4:...})
binput(int comp, float u, float v, ...)#binput(${1:int comp}, ${2:float u}, ${3:float v}, ${4:...})
binput(int opinput, int plane, int u, int v, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int u}, ${4:int v}, ${5:...})
binput(int opinput, int plane, float u, float v, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:float u}, ${4:float v}, ${5:...})
binput(int opinput, int plane, int comp, int u, int v, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int comp}, ${4:int u}, ${5:int v}, ${6:...})
binput(int opinput, int plane, int comp, float u, float v, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int comp}, ${4:float u}, ${5:float v}, ${6:...})
binput(int opinput, int plane, int array_index, int comp, int u, int v, int frame, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int array_index}, ${4:int comp}, ${5:int u}, ${6:int v}, ${7:int frame}, ${8:...})
binput(int opinput, int plane, int array_index, int comp, float u, float v, int frame, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int array_index}, ${4:int comp}, ${5:float u}, ${6:float v}, ${7:int frame}, ${8:...})
binput(int opinput, int plane, int array_index, int u, int v, int frame, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int array_index}, ${4:int u}, ${5:int v}, ${6:int frame}, ${7:...})
binput(int opinput, int plane, int array_index, float u, float v, int frame, ...)#binput(${1:int opinput}, ${2:int plane}, ${3:int array_index}, ${4:float u}, ${5:float v}, ${6:int frame}, ${7:...})
bumpname()#bumpname(${1:})
chname(int plane_index, int chindex)#chname(${1:int plane_index}, ${2:int chindex})
chname(int channel_index)#chname(${1:int channel_index})
chname(int opinput, int channel_index)#chname(${1:int opinput}, ${2:int channel_index})
cinput(int u, int v, ...)#cinput(${1:int u}, ${2:int v}, ${3:...})
cinput(float u, float v, ...)#cinput(${1:float u}, ${2:float v}, ${3:...})
cinput(int component, int u, int v, ...)#cinput(${1:int component}, ${2:int u}, ${3:int v}, ${4:...})
cinput(int component, float u, float v, ...)#cinput(${1:int component}, ${2:float u}, ${3:float v}, ${4:...})
cinput(int opinput, int planeindex, int u, int v, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int u}, ${4:int v}, ${5:...})
cinput(int opinput, int planeindex, float u, float v, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:float u}, ${4:float v}, ${5:...})
cinput(int opinput, int planeindex, int component, int u, int v, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int component}, ${4:int u}, ${5:int v}, ${6:...})
cinput(int opinput, int planeindex, int component, float u, float v, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int component}, ${4:float u}, ${5:float v}, ${6:...})
cinput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int u}, ${5:int v}, ${6:int frame}, ${7:...})
cinput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:float u}, ${5:float v}, ${6:int frame}, ${7:...})
cinput(int opinput, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int component}, ${5:int u}, ${6:int v}, ${7:int frame}, ${8:...})
cinput(int opinput, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)#cinput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int component}, ${5:float u}, ${6:float v}, ${7:int frame}, ${8:...})
colorname()#colorname(${1:})
depthname()#depthname(${1:})
dsmpixel(string map, string channel, int x, int y, <type> &values[])#dsmpixel(${1:string map}, ${2:string channel}, ${3:int x}, ${4:int y}, ${5:<type> &values[]})
finput(int u, int v, ...)#finput(${1:int u}, ${2:int v}, ${3:...})
finput(float u, float v, ...)#finput(${1:float u}, ${2:float v}, ${3:...})
finput(int component, int u, int v, ...)#finput(${1:int component}, ${2:int u}, ${3:int v}, ${4:...})
finput(int component, float u, float v, ...)#finput(${1:int component}, ${2:float u}, ${3:float v}, ${4:...})
finput(int opinput, int planeindex, int u, int v, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int u}, ${4:int v}, ${5:...})
finput(int opinput, int planeindex, float u, float v, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:float u}, ${4:float v}, ${5:...})
finput(int opinput, int planeindex, int component, int u, int v, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int component}, ${4:int u}, ${5:int v}, ${6:...})
finput(int opinput, int planeindex, int component, float u, float v, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int component}, ${4:float u}, ${5:float v}, ${6:...})
finput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int u}, ${5:int v}, ${6:int frame}, ${7:...})
finput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:float u}, ${5:float v}, ${6:int frame}, ${7:...})
finput(int opinput, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int component}, ${5:int u}, ${6:int v}, ${7:int frame}, ${8:...})
finput(int opinput, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)#finput(${1:int opinput}, ${2:int planeindex}, ${3:int arrayindex}, ${4:int component}, ${5:float u}, ${6:float v}, ${7:int frame}, ${8:...})
hasmetadata(int opinput, string name)#hasmetadata(${1:int opinput}, ${2:string name})
hasplane(string planename)#hasplane(${1:string planename})
iaspect(int opinput)#iaspect(${1:int opinput})
ichname(int inputnum, int plane_index, int component_index)#ichname(${1:int inputnum}, ${2:int plane_index}, ${3:int component_index})
iend(int opinput)#iend(${1:int opinput})
iendtime(int opinput)#iendtime(${1:int opinput})
ihasplane(int opinput, string planename)#ihasplane(${1:int opinput}, ${2:string planename})
inumplanes(int opinput)#inumplanes(${1:int opinput})
iplaneindex(int opinput, string planename)#iplaneindex(${1:int opinput}, ${2:string planename})
iplanename(int opinput, int planeindex)#iplanename(${1:int opinput}, ${2:int planeindex})
iplanesize(int opinput, int planeindex)#iplanesize(${1:int opinput}, ${2:int planeindex})
irate(int opinput)#irate(${1:int opinput})
istart(int opinput)#istart(${1:int opinput})
istarttime(int opinput)#istarttime(${1:int opinput})
ixres(int opinput)#ixres(${1:int opinput})
iyres(int opinput)#iyres(${1:int opinput})
lumname()#lumname(${1:})
maskname()#maskname(${1:})
metadata(int opinput, string name)#metadata(${1:int opinput}, ${2:string name})
metadata(int opinput, string name, int index)#metadata(${1:int opinput}, ${2:string name}, ${3:int index})
ninput(int opinput, int plane, int component, int array_index, int u, int v, int frame, ...)#ninput(${1:int opinput}, ${2:int plane}, ${3:int component}, ${4:int array_index}, ${5:int u}, ${6:int v}, ${7:int frame}, ${8:...})
ninput(int opinput, int plane, int component, int array_index, float u, float v, int frame, ...)#ninput(${1:int opinput}, ${2:int plane}, ${3:int component}, ${4:int array_index}, ${5:float u}, ${6:float v}, ${7:int frame}, ${8:...})
normalname()#normalname(${1:})
planeindex(string planename)#planeindex(${1:string planename})
planename(int planeindex)#planename(${1:int planeindex})
planesize(int planeindex)#planesize(${1:int planeindex})
pointname()#pointname(${1:})
velocityname()#velocityname(${1:})
ckspline(float t, float value, float pos, ...)#ckspline(${1:float t}, ${2:float value}, ${3:float pos}, ${4:...})
ckspline(float t, vector value, float pos, ...)#ckspline(${1:float t}, ${2:vector value}, ${3:float pos}, ${4:...})
ckspline(float t, vector4 value, float pos, ...)#ckspline(${1:float t}, ${2:vector4 value}, ${3:float pos}, ${4:...})
clamp(int value, int min, int max)#clamp(${1:int value}, ${2:int min}, ${3:int max})
clamp(float value, float min, float max)#clamp(${1:float value}, ${2:float min}, ${3:float max})
clamp(vector2 value, vector2 min, vector2 max)#clamp(${1:vector2 value}, ${2:vector2 min}, ${3:vector2 max})
clamp(vector value, vector min, vector max)#clamp(${1:vector value}, ${2:vector min}, ${3:vector max})
clamp(vector4 value, vector4 min, vector4 max)#clamp(${1:vector4 value}, ${2:vector4 min}, ${3:vector4 max})
cspline(float t, float val1, ...)#cspline(${1:float t}, ${2:float val1}, ${3:...})
cspline(float t, vector val1, ...)#cspline(${1:float t}, ${2:vector val1}, ${3:...})
cspline(float t, vector4 val1, ...)#cspline(${1:float t}, ${2:vector4 val1}, ${3:...})
efit(float value, float omin, float omax, float nmin, float nmax)#efit(${1:float value}, ${2:float omin}, ${3:float omax}, ${4:float nmin}, ${5:float nmax})
efit(<vector> value, <vector> omin, <vector> omax, <vector> nmin, <vector> nmax)#efit(${1:<vector> value}, ${2:<vector> omin}, ${3:<vector> omax}, ${4:<vector> nmin}, ${5:<vector> nmax})
efit(<vector> value, <vector> omin, <vector> omax, float nmin, float nmax)#efit(${1:<vector> value}, ${2:<vector> omin}, ${3:<vector> omax}, ${4:float nmin}, ${5:float nmax})
fit(float value, float omin, float omax, float nmin, float nmax)#fit(${1:float value}, ${2:float omin}, ${3:float omax}, ${4:float nmin}, ${5:float nmax})
fit(<vector> value, <vector> omin, <vector> omax, <vector> nmin, <vector> nmax)#fit(${1:<vector> value}, ${2:<vector> omin}, ${3:<vector> omax}, ${4:<vector> nmin}, ${5:<vector> nmax})
fit01(float value, float nmin, float nmax)#fit01(${1:float value}, ${2:float nmin}, ${3:float nmax})
fit01(<vector> value, <vector> nmin, <vector> nmax)#fit01(${1:<vector> value}, ${2:<vector> nmin}, ${3:<vector> nmax})
fit10(float value, float nmin, float nmax)#fit10(${1:float value}, ${2:float nmin}, ${3:float nmax})
fit10(<vector> value, <vector> nmin, <vector> nmax)#fit10(${1:<vector> value}, ${2:<vector> nmin}, ${3:<vector> nmax})
fit11(float value, float nmin, float nmax)#fit11(${1:float value}, ${2:float nmin}, ${3:float nmax})
fit11(<vector> value, <vector> nmin, <vector> nmax)#fit11(${1:<vector> value}, ${2:<vector> nmin}, ${3:<vector> nmax})
invlerp(float a, float min, float max)#invlerp(${1:float a}, ${2:float min}, ${3:float max})
invlerp(<vector> a, <vector> min, <vector> max)#invlerp(${1:<vector> a}, ${2:<vector> min}, ${3:<vector> max})
lerp(float value1, float value2, float amount)#lerp(${1:float value1}, ${2:float value2}, ${3:float amount})
lerp(<vector> value1, <vector> value2, float amount)#lerp(${1:<vector> value1}, ${2:<vector> value2}, ${3:float amount})
lerp(<vector> value1, <vector> value2, <vector> amount)#lerp(${1:<vector> value1}, ${2:<vector> value2}, ${3:<vector> amount})
lerp(bsdf bsdf1, bsdf bsdf2, float amount)#lerp(${1:bsdf bsdf1}, ${2:bsdf bsdf2}, ${3:float amount})
lkspline(float sample_pos, float value1, float key_pos1, ...)#lkspline(${1:float sample_pos}, ${2:float value1}, ${3:float key_pos1}, ${4:...})
lkspline(float sample_pos, vector value1, float key_pos1, ...)#lkspline(${1:float sample_pos}, ${2:vector value1}, ${3:float key_pos1}, ${4:...})
lkspline(float sample_pos, vector4 value1, float key_pos1, ...)#lkspline(${1:float sample_pos}, ${2:vector4 value1}, ${3:float key_pos1}, ${4:...})
lspline(float sample_pos, float value1, ...)#lspline(${1:float sample_pos}, ${2:float value1}, ${3:...})
lspline(float sample_pos, vector value1, ...)#lspline(${1:float sample_pos}, ${2:vector value1}, ${3:...})
lspline(float sample_pos, vector4 value1, ...)#lspline(${1:float sample_pos}, ${2:vector4 value1}, ${3:...})
slerp(vector4 q1, vector4 q2, float bias)#slerp(${1:vector4 q1}, ${2:vector4 q2}, ${3:float bias})
slerp(vector4 qs[], float weights[], int normalize=0)#slerp(${1:vector4 qs[]}, ${2:float weights[]}, ${3:int normalize=0})
slerp(matrix3 m1, matrix3 m2, float bias)#slerp(${1:matrix3 m1}, ${2:matrix3 m2}, ${3:float bias})
slerp(matrix m1, matrix m2, float bias)#slerp(${1:matrix m1}, ${2:matrix m2}, ${3:float bias})
slerp(matrix3 ms[], float weights[], int normalize=1)#slerp(${1:matrix3 ms[]}, ${2:float weights[]}, ${3:int normalize=1})
slerp(matrix ms[], float weights[], int normalize=1)#slerp(${1:matrix ms[]}, ${2:float weights[]}, ${3:int normalize=1})
slerpv(vector2 v1, vector2 v2, float bias)#slerpv(${1:vector2 v1}, ${2:vector2 v2}, ${3:float bias})
slerpv(vector v1, vector v2, float bias)#slerpv(${1:vector v1}, ${2:vector v2}, ${3:float bias})
smooth(float value1, float value2, float amount)#smooth(${1:float value1}, ${2:float value2}, ${3:float amount})
smooth(float value1, float value2, float amount, float rolloff)#smooth(${1:float value1}, ${2:float value2}, ${3:float amount}, ${4:float rolloff})
ambient(...)#ambient(${1:...})
atten(float attenuation, float distance)#atten(${1:float attenuation}, ${2:float distance})
fastshadow(vector P, vector D, float bias, ...)#fastshadow(${1:vector P}, ${2:vector D}, ${3:float bias}, ${4:...})
filtershadow(vector P, vector D, float bias, ...)#filtershadow(${1:vector P}, ${2:vector D}, ${3:float bias}, ${4:...})
abs(int n)#abs(${1:int n})
abs(float n)#abs(${1:float n})
abs(<vector> v)#abs(${1:<vector> v})
acos(float v)#acos(${1:float v})
acos(vector2 v)#acos(${1:vector2 v})
acos(vector4 v)#acos(${1:vector4 v})
acos(vector v)#acos(${1:vector v})
asin(float n)#asin(${1:float n})
asin(vector2 n)#asin(${1:vector2 n})
asin(vector n)#asin(${1:vector n})
asin(vector4 n)#asin(${1:vector4 n})
atan(float n)#atan(${1:float n})
atan(float y, float x)#atan(${1:float y}, ${2:float x})
atan(<vector> v)#atan(${1:<vector> v})
atan2(float y, float x)#atan2(${1:float y}, ${2:float x})
avg(int a)#avg(${1:int a})
avg(float a)#avg(${1:float a})
avg(float a, float b, ...)#avg(${1:float a}, ${2:float b}, ${3:...})
avg(vector2 v)#avg(${1:vector2 v})
avg(vector v)#avg(${1:vector v})
avg(vector4 v)#avg(${1:vector4 v})
avg(vector2 a, vector2 b, ...)#avg(${1:vector2 a}, ${2:vector2 b}, ${3:...})
avg(vector a, vector b, ...)#avg(${1:vector a}, ${2:vector b}, ${3:...})
avg(vector4 a, vector4 b, ...)#avg(${1:vector4 a}, ${2:vector4 b}, ${3:...})
avg(<type> arr[])#avg(${1:<type> arr[]})
cbrt(float n)#cbrt(${1:float n})
cbrt(vector2 v)#cbrt(${1:vector2 v})
cbrt(vector v)#cbrt(${1:vector v})
cbrt(vector4 v)#cbrt(${1:vector4 v})
ceil(float n)#ceil(${1:float n})
ceil(<vector> v)#ceil(${1:<vector> v})
combinelocaltransform(matrix local, matrix parent_world, matrix parent_local, int scale_inherit_mode)#combinelocaltransform(${1:matrix local}, ${2:matrix parent_world}, ${3:matrix parent_local}, ${4:int scale_inherit_mode})
combinelocaltransform(matrix local, matrix parent_world, matrix parent_local, int scale_inherit_mode, matrix &effective_local_transform)#combinelocaltransform(${1:matrix local}, ${2:matrix parent_world}, ${3:matrix parent_local}, ${4:int scale_inherit_mode}, ${5:matrix &effective_local_transform})
cos(float n)#cos(${1:float n})
cos(vector2 n)#cos(${1:vector2 n})
cos(vector n)#cos(${1:vector n})
cos(vector4 n)#cos(${1:vector4 n})
cosh(float n)#cosh(${1:float n})
cosh(vector2 v)#cosh(${1:vector2 v})
cosh(vector v)#cosh(${1:vector v})
cosh(vector4 v)#cosh(${1:vector4 v})
cross(vector a, vector b)#cross(${1:vector a}, ${2:vector b})
determinant(matrix2 m)#determinant(${1:matrix2 m})
determinant(matrix3 m)#determinant(${1:matrix3 m})
determinant(matrix m)#determinant(${1:matrix m})
diag(matrix2 m)#diag(${1:matrix2 m})
diag(matrix3 m)#diag(${1:matrix3 m})
diag(matrix m)#diag(${1:matrix m})
diag(vector2 v)#diag(${1:vector2 v})
diag(vector v)#diag(${1:vector v})
diag(vector4 v)#diag(${1:vector4 v})
diagonalizesymmetric(matrix2 symmat, vector2 &diag)#diagonalizesymmetric(${1:matrix2 symmat}, ${2:vector2 &diag})
diagonalizesymmetric(matrix3 symmat, vector &diag)#diagonalizesymmetric(${1:matrix3 symmat}, ${2:vector &diag})
diagonalizesymmetric(matrix symmat, vector4 &diag)#diagonalizesymmetric(${1:matrix symmat}, ${2:vector4 &diag})
distance_pointline(vector Q, vector O, vector D)#distance_pointline(${1:vector Q}, ${2:vector O}, ${3:vector D})
distance_pointray(vector Q, vector O, vector D)#distance_pointray(${1:vector Q}, ${2:vector O}, ${3:vector D})
distance_pointsegment(vector Q, vector P0, vector P1)#distance_pointsegment(${1:vector Q}, ${2:vector P0}, ${3:vector P1})
dot(vector2 a, vector2 b)#dot(${1:vector2 a}, ${2:vector2 b})
dot(vector a, vector b)#dot(${1:vector a}, ${2:vector b})
dot(vector4 a, vector4 b)#dot(${1:vector4 a}, ${2:vector4 b})
dot(vector a, vector4 b)#dot(${1:vector a}, ${2:vector4 b})
dot(vector4 a, vector b)#dot(${1:vector4 a}, ${2:vector b})
dot(matrix2 a, matrix2 b)#dot(${1:matrix2 a}, ${2:matrix2 b})
dot(matrix3 a, matrix3 b)#dot(${1:matrix3 a}, ${2:matrix3 b})
dot(matrix a, matrix b)#dot(${1:matrix a}, ${2:matrix b})
dot(<type> a[], <type> b[])#dot(${1:<type> a[]}, ${2:<type> b[]})
dot(int a[], int b[])#dot(${1:int a[]}, ${2:int b[]})
Du(float n, ...)#Du(${1:float n}, ${2:...})
Du(vector n, ...)#Du(${1:vector n}, ${2:...})
Du(vector4 n, ...)#Du(${1:vector4 n}, ${2:...})
Dv(float n, ...)#Dv(${1:float n}, ${2:...})
Dv(vector n, ...)#Dv(${1:vector n}, ${2:...})
Dv(vector4 n, ...)#Dv(${1:vector4 n}, ${2:...})
Dw(float p, ...)#Dw(${1:float p}, ${2:...})
Dw(vector p, ...)#Dw(${1:vector p}, ${2:...})
Dw(vector4 p, ...)#Dw(${1:vector4 p}, ${2:...})
eigenvalues(int &nroot, matrix3 mat, vector &real, vector &imaginary)#eigenvalues(${1:int &nroot}, ${2:matrix3 mat}, ${3:vector &real}, ${4:vector &imaginary})
erf(float v)#erf(${1:float v})
erf(vector2 v)#erf(${1:vector2 v})
erf_inv(float v)#erf_inv(${1:float v})
erfc(float v)#erfc(${1:float v})
exp(float n)#exp(${1:float n})
exp(<vector> n)#exp(${1:<vector> n})
extractlocaltransform(matrix world, matrix parent_world, matrix parent_local, int scale_inherit_mode)#extractlocaltransform(${1:matrix world}, ${2:matrix parent_world}, ${3:matrix parent_local}, ${4:int scale_inherit_mode})
extractlocaltransform(matrix world, matrix parent_world, matrix parent_local, int mode, matrix &effective_local_transform)#extractlocaltransform(${1:matrix world}, ${2:matrix parent_world}, ${3:matrix parent_local}, ${4:int mode}, ${5:matrix &effective_local_transform})
floor(float n)#floor(${1:float n})
floor(<vector> v)#floor(${1:<vector> v})
frac(float n)#frac(${1:float n})
frac(<vector> v)#frac(${1:<vector> v})
ident()#ident(${1:})
invert(<matrix> m)#invert(${1:<matrix> m})
isfinite(float x)#isfinite(${1:float x})
isinf(float x)#isinf(${1:float x})
isnan(float x)#isnan(${1:float x})
kspline(string basis, float sample_pos, float value1, float key_pos1, ...)#kspline(${1:string basis}, ${2:float sample_pos}, ${3:float value1}, ${4:float key_pos1}, ${5:...})
kspline(string basis, float sample_pos, vector value1, float key_pos1, ...)#kspline(${1:string basis}, ${2:float sample_pos}, ${3:vector value1}, ${4:float key_pos1}, ${5:...})
kspline(string basis, float sample_pos, vector4 value1, float key_pos1, ...)#kspline(${1:string basis}, ${2:float sample_pos}, ${3:vector4 value1}, ${4:float key_pos1}, ${5:...})
length(float f)#length(${1:float f})
length(vector2 v)#length(${1:vector2 v})
length(vector v)#length(${1:vector v})
length(vector4 v)#length(${1:vector4 v})
length2(vector2 v)#length2(${1:vector2 v})
length2(vector v)#length2(${1:vector v})
length2(vector4 v)#length2(${1:vector4 v})
log(float n)#log(${1:float n})
log(<vector> v)#log(${1:<vector> v})
log10(float n)#log10(${1:float n})
log10(<vector> n)#log10(${1:<vector> n})
makebasis(vector &xaxis, vector &yaxis, vector zaxis)#makebasis(${1:vector &xaxis}, ${2:vector &yaxis}, ${3:vector zaxis})
makebasis(vector &xaxis, vector &yaxis, vector zaxis, vector u)#makebasis(${1:vector &xaxis}, ${2:vector &yaxis}, ${3:vector zaxis}, ${4:vector u})
max(int value1, int value2, ...)#max(${1:int value1}, ${2:int value2}, ${3:...})
max(float value1, float value2, ...)#max(${1:float value1}, ${2:float value2}, ${3:...})
max(<vector> value1, <vector> value2, ...)#max(${1:<vector> value1}, ${2:<vector> value2}, ${3:...})
max(<type> values[])#max(${1:<type> values[]})
max(<vector> values)#max(${1:<vector> values})
max(<type> value)#max(${1:<type> value})
min(int value1, int value2, ...)#min(${1:int value1}, ${2:int value2}, ${3:...})
min(float value1, float value2, ...)#min(${1:float value1}, ${2:float value2}, ${3:...})
min(<vector> value1, <vector> value2, ...)#min(${1:<vector> value1}, ${2:<vector> value2}, ${3:...})
min(<type> values[])#min(${1:<type> values[]})
min(<vector> v)#min(${1:<vector> v})
min(<type> value)#min(${1:<type> value})
norm_1(<matrix> m)#norm_1(${1:<matrix> m})
norm_fro(<matrix> m)#norm_fro(${1:<matrix> m})
norm_inf(<matrix> m)#norm_inf(${1:<matrix> m})
norm_max(<matrix> m)#norm_max(${1:<matrix> m})
norm_spectral(<matrix> m)#norm_spectral(${1:<matrix> m})
normalize(<vector> v)#normalize(${1:<vector> v})
outerproduct(vector2 v, vector2 v)#outerproduct(${1:vector2 v}, ${2:vector2 v})
outerproduct(vector v, vector v)#outerproduct(${1:vector v}, ${2:vector v})
outerproduct(vector4 v, vector4 v)#outerproduct(${1:vector4 v}, ${2:vector4 v})
pinvert(matrix3 m)#pinvert(${1:matrix3 m})
planesphereintersect(vector plane_pos, vector plane_normal, vector sphere_pos, float sphere_radius, vector &intersect_pos, float &intersect_radius, float &intersect_distance)#planesphereintersect(${1:vector plane_pos}, ${2:vector plane_normal}, ${3:vector sphere_pos}, ${4:float sphere_radius}, ${5:vector &intersect_pos}, ${6:float &intersect_radius}, ${7:float &intersect_distance})
pow(float n, float exponent)#pow(${1:float n}, ${2:float exponent})
pow(<vector> v, float exponent)#pow(${1:<vector> v}, ${2:float exponent})
predicate_incircle(vector2 a, vector2 b, vector2 c, vector2 d)#predicate_incircle(${1:vector2 a}, ${2:vector2 b}, ${3:vector2 c}, ${4:vector2 d})
predicate_insphere(vector a, vector b, vector c, vector d, vector e)#predicate_insphere(${1:vector a}, ${2:vector b}, ${3:vector c}, ${4:vector d}, ${5:vector e})
predicate_orient2d(vector2 a, vector2 b, vector2 c)#predicate_orient2d(${1:vector2 a}, ${2:vector2 b}, ${3:vector2 c})
predicate_orient3d(vector a, vector b, vector c, vector d)#predicate_orient3d(${1:vector a}, ${2:vector b}, ${3:vector c}, ${4:vector d})
premul(matrix2 &a, matrix2 b)#premul(${1:matrix2 &a}, ${2:matrix2 b})
premul(matrix &a, matrix b)#premul(${1:matrix &a}, ${2:matrix b})
premul(matrix3 &a, matrix3 b)#premul(${1:matrix3 &a}, ${2:matrix3 b})
premul(matrix2 &m, matrix2 a, matrix2 b)#premul(${1:matrix2 &m}, ${2:matrix2 a}, ${3:matrix2 b})
premul(matrix &m, matrix a, matrix b)#premul(${1:matrix &m}, ${2:matrix a}, ${3:matrix b})
premul(matrix3 &m, matrix3 a, matrix3 b)#premul(${1:matrix3 &m}, ${2:matrix3 a}, ${3:matrix3 b})
product(float n)#product(${1:float n})
product(int n)#product(${1:int n})
product(vector2 v)#product(${1:vector2 v})
product(vector v)#product(${1:vector v})
product(vector4 v)#product(${1:vector4 v})
product(int arr[])#product(${1:int arr[]})
product(float arr[])#product(${1:float arr[]})
product(<vector> arr[])#product(${1:<vector> arr[]})
ptlined(vector P0, vector P1, vector Q)#ptlined(${1:vector P0}, ${2:vector P1}, ${3:vector Q})
qdistance(vector4 q1, vector4 q2)#qdistance(${1:vector4 q1}, ${2:vector4 q2})
qinvert(vector4 quaternion)#qinvert(${1:vector4 quaternion})
qmultiply(vector4 q1, vector4 q2)#qmultiply(${1:vector4 q1}, ${2:vector4 q2})
qrotate(vector4 quaternion, vector v)#qrotate(${1:vector4 quaternion}, ${2:vector v})
quaternion(matrix3 rotations)#quaternion(${1:matrix3 rotations})
quaternion(float angle, vector axis)#quaternion(${1:float angle}, ${2:vector axis})
quaternion(vector angleaxis)#quaternion(${1:vector angleaxis})
resample_linear(float input[], int new_length)#resample_linear(${1:float input[]}, ${2:int new_length})
resample_linear(vector input[], int new_length)#resample_linear(${1:vector input[]}, ${2:int new_length})
resample_linear(vector2 input[], int new_length)#resample_linear(${1:vector2 input[]}, ${2:int new_length})
resample_linear(vector4 input[], int new_length)#resample_linear(${1:vector4 input[]}, ${2:int new_length})
rint(float n)#rint(${1:float n})
rint(<vector> v)#rint(${1:<vector> v})
shl(int a, int bits)#shl(${1:int a}, ${2:int bits})
shr(int a, int bits)#shr(${1:int a}, ${2:int bits})
shrz(int a, int bits)#shrz(${1:int a}, ${2:int bits})
sign(int n)#sign(${1:int n})
sign(float n)#sign(${1:float n})
sign(vector2 v)#sign(${1:vector2 v})
sign(vector v)#sign(${1:vector v})
sign(vector4 v)#sign(${1:vector4 v})
sin(float n)#sin(${1:float n})
sin(<vector> n)#sin(${1:<vector> n})
sinh(float n)#sinh(${1:float n})
sinh(vector2 v)#sinh(${1:vector2 v})
sinh(vector v)#sinh(${1:vector v})
sinh(vector4 v)#sinh(${1:vector4 v})
slideframe(vector t0, vector t1, vector v0)#slideframe(${1:vector t0}, ${2:vector t1}, ${3:vector v0})
slideframe(vector x0, vector t0, vector v0, vector x1, vector t1)#slideframe(${1:vector x0}, ${2:vector t0}, ${3:vector v0}, ${4:vector x1}, ${5:vector t1})
solvecubic(float a, float b, float c, float d, float &t1, float &t2, float &t3)#solvecubic(${1:float a}, ${2:float b}, ${3:float c}, ${4:float d}, ${5:float &t1}, ${6:float &t2}, ${7:float &t3})
solvecubic(float a, float b, float c, float d, vector2 &t1, vector2 &t2, vector2 &t3)#solvecubic(${1:float a}, ${2:float b}, ${3:float c}, ${4:float d}, ${5:vector2 &t1}, ${6:vector2 &t2}, ${7:vector2 &t3})
solvepoly(float coef[], float &roots[], int maxiter=0)#solvepoly(${1:float coef[]}, ${2:float &roots[]}, ${3:int maxiter=0})
solvequadratic(float a, float b, float c, float &t1, float &t2)#solvequadratic(${1:float a}, ${2:float b}, ${3:float c}, ${4:float &t1}, ${5:float &t2})
solvequadratic(float a, float b, float c, vector2 &t1, vector2 &t2)#solvequadratic(${1:float a}, ${2:float b}, ${3:float c}, ${4:vector2 &t1}, ${5:vector2 &t2})
solvetriangleSSS(vector sides)#solvetriangleSSS(${1:vector sides})
solvetriangleSSS(float a, float b, float c)#solvetriangleSSS(${1:float a}, ${2:float b}, ${3:float c})
spline(string basis, float sample_pos, float value1, ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:float value1}, ${4:...})
spline(string basis, float sample_pos, vector value1, ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:vector value1}, ${4:...})
spline(string basis, float sample_pos, vector4 value1, ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:vector4 value1}, ${4:...})
spline(string basis, float sample_pos, float values[], ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:float values[]}, ${4:...})
spline(string basis, float sample_pos, vector values[], ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:vector values[]}, ${4:...})
spline(string basis, float sample_pos, vector4 values[], ...)#spline(${1:string basis}, ${2:float sample_pos}, ${3:vector4 values[]}, ${4:...})
spline(string bases[], float sample_pos, float values[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:float values[]}, ${4:...})
spline(string bases[], float sample_pos, vector values[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:vector values[]}, ${4:...})
spline(string bases[], float sample_pos, vector4 values[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:vector4 values[]}, ${4:...})
spline(string bases[], float sample_pos, float values[], float positions[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:float values[]}, ${4:float positions[]}, ${5:...})
spline(string bases[], float sample_pos, vector values[], float positions[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:vector values[]}, ${4:float positions[]}, ${5:...})
spline(string bases[], float sample_pos, vector4 values[], float positions[], ...)#spline(${1:string bases[]}, ${2:float sample_pos}, ${3:vector4 values[]}, ${4:float positions[]}, ${5:...})
spline_cdf(string bases[], float values[], float positions[], ...)#spline_cdf(${1:string bases[]}, ${2:float values[]}, ${3:float positions[]}, ${4:...})
sqrt(float value)#sqrt(${1:float value})
sqrt(<vector> value)#sqrt(${1:<vector> value})
sum(float n)#sum(${1:float n})
sum(int n)#sum(${1:int n})
sum(<vector> v)#sum(${1:<vector> v})
sum(matrix2 m)#sum(${1:matrix2 m})
sum(matrix3 m)#sum(${1:matrix3 m})
sum(matrix m)#sum(${1:matrix m})
sum(int nums[])#sum(${1:int nums[]})
sum(float nums[])#sum(${1:float nums[]})
sum(<vector> arr[])#sum(${1:<vector> arr[]})
sum(matrix2 arr[])#sum(${1:matrix2 arr[]})
sum(matrix3 arr[])#sum(${1:matrix3 arr[]})
sum(matrix arr[])#sum(${1:matrix arr[]})
svddecomp(matrix2 input_M, matrix2 &output_U, vector2 &output_S, matrix2 &output_V)#svddecomp(${1:matrix2 input_M}, ${2:matrix2 &output_U}, ${3:vector2 &output_S}, ${4:matrix2 &output_V})
svddecomp(matrix3 input_M, matrix3 &output_U, vector &output_S, matrix3 &output_V)#svddecomp(${1:matrix3 input_M}, ${2:matrix3 &output_U}, ${3:vector &output_S}, ${4:matrix3 &output_V})
svddecomp(matrix input_M, matrix &output_U, vector4 &output_S, matrix &output_V)#svddecomp(${1:matrix input_M}, ${2:matrix &output_U}, ${3:vector4 &output_S}, ${4:matrix &output_V})
svddecomp(matrix2 input_M)#svddecomp(${1:matrix2 input_M})
svddecomp(matrix3 input_M)#svddecomp(${1:matrix3 input_M})
svddecomp(matrix input_M)#svddecomp(${1:matrix input_M})
tan(float n)#tan(${1:float n})
tan(vector2 v)#tan(${1:vector2 v})
tan(vector v)#tan(${1:vector v})
tan(vector4 v)#tan(${1:vector4 v})
tanh(float n)#tanh(${1:float n})
tanh(vector2 n)#tanh(${1:vector2 n})
tanh(vector n)#tanh(${1:vector n})
tanh(vector4 n)#tanh(${1:vector4 n})
tr(<matrix> m)#tr(${1:<matrix> m})
transpose(<matrix> &m)#transpose(${1:<matrix> &m})
transpose(<matrix> m)#transpose(${1:<matrix> m})
trunc(float x)#trunc(${1:float x})
trunc(vector2 x)#trunc(${1:vector2 x})
trunc(vector x)#trunc(${1:vector x})
trunc(vector4 x)#trunc(${1:vector4 x})
distance(vector2 a, vector2 b)#distance(${1:vector2 a}, ${2:vector2 b})
distance(vector a, vector b)#distance(${1:vector a}, ${2:vector b})
distance(vector4 a, vector4 b)#distance(${1:vector4 a}, ${2:vector4 b})
distance2(vector2 a, vector2 b)#distance2(${1:vector2 a}, ${2:vector2 b})
distance2(vector a, vector b)#distance2(${1:vector a}, ${2:vector b})
distance2(vector4 a, vector4 b)#distance2(${1:vector4 a}, ${2:vector4 b})
getbbox(<geometry> geometry, vector &min, vector &max)#getbbox(${1:<geometry> geometry}, ${2:vector &min}, ${3:vector &max})
getbbox(<geometry> geometry, string primgroup, vector &min, vector &max)#getbbox(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector &min}, ${4:vector &max})
getbbox(vector &min, vector &max)#getbbox(${1:vector &min}, ${2:vector &max})
getbbox_center(<geometry> geometry)#getbbox_center(${1:<geometry> geometry})
getbbox_center(<geometry> geometry, string primgroup)#getbbox_center(${1:<geometry> geometry}, ${2:string primgroup})
getbbox_max(<geometry> geometry)#getbbox_max(${1:<geometry> geometry})
getbbox_max(<geometry> geometry, string primgroup)#getbbox_max(${1:<geometry> geometry}, ${2:string primgroup})
getbbox_min(<geometry> geometry)#getbbox_min(${1:<geometry> geometry})
getbbox_min(<geometry> geometry, string primgroup)#getbbox_min(${1:<geometry> geometry}, ${2:string primgroup})
getbbox_size(<geometry> geometry)#getbbox_size(${1:<geometry> geometry})
getbbox_size(<geometry> geometry, string primgroup)#getbbox_size(${1:<geometry> geometry}, ${2:string primgroup})
getbounds(string filename, vector &min, vector &max)#getbounds(${1:string filename}, ${2:vector &min}, ${3:vector &max})
getbounds(string filename, string group, vector &min, vector &max)#getbounds(${1:string filename}, ${2:string group}, ${3:vector &min}, ${4:vector &max})
getpointbbox(<geometry> geometry, vector &min, vector &max)#getpointbbox(${1:<geometry> geometry}, ${2:vector &min}, ${3:vector &max})
getpointbbox(<geometry> geometry, string pointgroup, vector &min, vector &max)#getpointbbox(${1:<geometry> geometry}, ${2:string pointgroup}, ${3:vector &min}, ${4:vector &max})
getpointbbox_center(<geometry> geometry)#getpointbbox_center(${1:<geometry> geometry})
getpointbbox_center(<geometry> geometry, string pointgroup)#getpointbbox_center(${1:<geometry> geometry}, ${2:string pointgroup})
getpointbbox_max(<geometry> geometry)#getpointbbox_max(${1:<geometry> geometry})
getpointbbox_max(<geometry> geometry, string pointgroup)#getpointbbox_max(${1:<geometry> geometry}, ${2:string pointgroup})
getpointbbox_min(<geometry> geometry)#getpointbbox_min(${1:<geometry> geometry})
getpointbbox_min(<geometry> geometry, string pointgroup)#getpointbbox_min(${1:<geometry> geometry}, ${2:string pointgroup})
getpointbbox_size(<geometry> geometry)#getpointbbox_size(${1:<geometry> geometry})
getpointbbox_size(<geometry> geometry, string pointgroup)#getpointbbox_size(${1:<geometry> geometry}, ${2:string pointgroup})
planepointdistance(vector plane_pos, vector plane_normal, vector point_pos, vector &intersect_pos)#planepointdistance(${1:vector plane_pos}, ${2:vector plane_normal}, ${3:vector point_pos}, ${4:vector &intersect_pos})
relbbox(<geometry> geometry, vector position)#relbbox(${1:<geometry> geometry}, ${2:vector position})
relbbox(<geometry> geometry, string primgroup, vector position)#relbbox(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector position})
relbbox(vector position)#relbbox(${1:vector position})
relpointbbox(<geometry> geometry, vector position)#relpointbbox(${1:<geometry> geometry}, ${2:vector position})
relpointbbox(<geometry> geometry, string pointgroup, vector position)#relpointbbox(${1:<geometry> geometry}, ${2:string pointgroup}, ${3:vector position})
surfacedist(<geometry> geometry, string ptgroup, string P_attribute, int search_pt, int &closest_pt, string distance_metric)#surfacedist(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string P_attribute}, ${4:int search_pt}, ${5:int &closest_pt}, ${6:string distance_metric})
surfacedist(<geometry> geometry, string ptgroup, string P_attribute, int search_pt, float max_radius, int &closest_pt, string distance_metric)#surfacedist(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string P_attribute}, ${4:int search_pt}, ${5:float max_radius}, ${6:int &closest_pt}, ${7:string distance_metric})
uvdist(<geometry> geometry, string uvname, vector uv, int &prim, vector &primuv)#uvdist(${1:<geometry> geometry}, ${2:string uvname}, ${3:vector uv}, ${4:int &prim}, ${5:vector &primuv})
uvdist(<geometry> geometry, string uvname, vector uv, int &prim, vector &primuv, float maxdist)#uvdist(${1:<geometry> geometry}, ${2:string uvname}, ${3:vector uv}, ${4:int &prim}, ${5:vector &primuv}, ${6:float maxdist})
uvdist(<geometry> geometry, string primgroup, string uvname, vector uv, int &prim, vector &primuv)#uvdist(${1:<geometry> geometry}, ${2:string primgroup}, ${3:string uvname}, ${4:vector uv}, ${5:int &prim}, ${6:vector &primuv})
uvdist(<geometry> geometry, string primgroup, string uvname, vector uv, int &prim, vector &primuv, float maxdist)#uvdist(${1:<geometry> geometry}, ${2:string primgroup}, ${3:string uvname}, ${4:vector uv}, ${5:int &prim}, ${6:vector &primuv}, ${7:float maxdist})
windingnumber(<geometry> geometry, vector origin)#windingnumber(${1:<geometry> geometry}, ${2:vector origin})
windingnumber(<geometry> geometry, vector origin, float accuracy)#windingnumber(${1:<geometry> geometry}, ${2:vector origin}, ${3:float accuracy})
windingnumber(<geometry> geometry, string primgroup, vector origin)#windingnumber(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin})
windingnumber(<geometry> geometry, string primgroup, vector origin, float accuracy)#windingnumber(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin}, ${4:float accuracy})
windingnumber2d(<geometry> geometry, vector origin)#windingnumber2d(${1:<geometry> geometry}, ${2:vector origin})
windingnumber2d(<geometry> geometry, vector origin, float accuracy)#windingnumber2d(${1:<geometry> geometry}, ${2:vector origin}, ${3:float accuracy})
windingnumber2d(<geometry> geometry, string primgroup, vector origin)#windingnumber2d(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin})
windingnumber2d(<geometry> geometry, string primgroup, vector origin, float accuracy)#windingnumber2d(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin}, ${4:float accuracy})
xyzdist(<geometry> geometry, vector origin)#xyzdist(${1:<geometry> geometry}, ${2:vector origin})
xyzdist(<geometry> geometry, vector origin, int &prim, vector &uv)#xyzdist(${1:<geometry> geometry}, ${2:vector origin}, ${3:int &prim}, ${4:vector &uv})
xyzdist(<geometry> geometry, vector origin, int &prim, vector &uv, float maxdist)#xyzdist(${1:<geometry> geometry}, ${2:vector origin}, ${3:int &prim}, ${4:vector &uv}, ${5:float maxdist})
xyzdist(<geometry> geometry, string primgroup, vector origin)#xyzdist(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin})
xyzdist(<geometry> geometry, string primgroup, vector origin, int &prim, vector &uv)#xyzdist(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin}, ${4:int &prim}, ${5:vector &uv})
xyzdist(<geometry> geometry, string primgroup, vector origin, int &prim, vector &uv, float maxdist)#xyzdist(${1:<geometry> geometry}, ${2:string primgroup}, ${3:vector origin}, ${4:int &prim}, ${5:vector &uv}, ${6:float maxdist})
metaimport(int handle, string attrib, vector P, <type> &value)#metaimport(${1:int handle}, ${2:string attrib}, ${3:vector P}, ${4:<type> &value})
metaimport(string file, string attribute, vector P)#metaimport(${1:string file}, ${2:string attribute}, ${3:vector P})
metamarch(int &index, string filename, vector &p0, vector &p1, float displace_bound)#metamarch(${1:int &index}, ${2:string filename}, ${3:vector &p0}, ${4:vector &p1}, ${5:float displace_bound})
metanext(int handle)#metanext(${1:int handle})
metastart(string filename, vector p)#metastart(${1:string filename}, ${2:vector p})
metaweight(<geometry> geometry, vector p)#metaweight(${1:<geometry> geometry}, ${2:vector p})
addvariablename(string aname, string vname)#addvariablename(${1:string aname}, ${2:string vname})
addvariablename(int geohandle, string aname, string vname)#addvariablename(${1:int geohandle}, ${2:string aname}, ${3:string vname})
ch(string channel)#ch(${1:string channel})
ch(string channel, float time_in_sec)#ch(${1:string channel}, ${2:float time_in_sec})
ch(int op_id, int parm_index, int vector_index)#ch(${1:int op_id}, ${2:int parm_index}, ${3:int vector_index})
ch(int op_id, int parm_index, int vector_index, float time_in_sec)#ch(${1:int op_id}, ${2:int parm_index}, ${3:int vector_index}, ${4:float time_in_sec})
ch2(string channel)#ch2(${1:string channel})
ch2(string channel, float time)#ch2(${1:string channel}, ${2:float time})
ch3(string channel)#ch3(${1:string channel})
ch3(string channel, float time)#ch3(${1:string channel}, ${2:float time})
ch4(string channel)#ch4(${1:string channel})
ch4(string channel, float time)#ch4(${1:string channel}, ${2:float time})
chdict(string channel)#chdict(${1:string channel})
chexpr(string channel, string new_expr_function)#chexpr(${1:string channel}, ${2:string new_expr_function})
chexprf(string channel, string new_expr_function, float frame)#chexprf(${1:string channel}, ${2:string new_expr_function}, ${3:float frame})
chexprt(string channel, string new_expr_function, float time_in_seconds)#chexprt(${1:string channel}, ${2:string new_expr_function}, ${3:float time_in_seconds})
chf(string channel)#chf(${1:string channel})
chf(string channel, float time_in_sec)#chf(${1:string channel}, ${2:float time_in_sec})
chf(int op_id, int parm_index, int vector_index)#chf(${1:int op_id}, ${2:int parm_index}, ${3:int vector_index})
chf(int op_id, int parm_index, int vector_index, float time_in_sec)#chf(${1:int op_id}, ${2:int parm_index}, ${3:int vector_index}, ${4:float time_in_sec})
chi(string channel)#chi(${1:string channel})
chi(string channel, float time)#chi(${1:string channel}, ${2:float time})
chid(string channel_path, int &op_id, int &parm_index, int &vector_index)#chid(${1:string channel_path}, ${2:int &op_id}, ${3:int &parm_index}, ${4:int &vector_index})
chid(string op_path, string channel_name, int &op_id, int &parm_index, int &vector_index)#chid(${1:string op_path}, ${2:string channel_name}, ${3:int &op_id}, ${4:int &parm_index}, ${5:int &vector_index})
chid(int op_id, int parm_index, int vector_index)#chid(${1:int op_id}, ${2:int parm_index}, ${3:int vector_index})
chp(string channel)#chp(${1:string channel})
chp(string channel, float time)#chp(${1:string channel}, ${2:float time})
chramp(string channel, float ramppos)#chramp(${1:string channel}, ${2:float ramppos})
chramp(string channel, float ramppos, float time)#chramp(${1:string channel}, ${2:float ramppos}, ${3:float time})
chrampderiv(string channel, float ramppos)#chrampderiv(${1:string channel}, ${2:float ramppos})
chrampderiv(string channel, float ramppos, float time)#chrampderiv(${1:string channel}, ${2:float ramppos}, ${3:float time})
chs(string channel)#chs(${1:string channel})
chs(string channel, float time)#chs(${1:string channel}, ${2:float time})
chsop(string channel)#chsop(${1:string channel})
chsop(string channel, float time)#chsop(${1:string channel}, ${2:float time})
chsraw(string channel)#chsraw(${1:string channel})
chu(string channel)#chu(${1:string channel})
chu(string channel, float time)#chu(${1:string channel}, ${2:float time})
chv(string channel)#chv(${1:string channel})
chv(string channel, float time)#chv(${1:string channel}, ${2:float time})
chv(int opid, int pid)#chv(${1:int opid}, ${2:int pid})
chv(int opid, int pid, float time)#chv(${1:int opid}, ${2:int pid}, ${3:float time})
cregioncapturetransform(string path)#cregioncapturetransform(${1:string path})
cregioncapturetransform(string path, float time)#cregioncapturetransform(${1:string path}, ${2:float time})
cregioncapturetransform(int op_id)#cregioncapturetransform(${1:int op_id})
cregioncapturetransform(int op_id, float time)#cregioncapturetransform(${1:int op_id}, ${2:float time})
cregiondeformtransform(string path)#cregiondeformtransform(${1:string path})
cregiondeformtransform(string path, float time)#cregiondeformtransform(${1:string path}, ${2:float time})
cregiondeformtransform(int op_id)#cregiondeformtransform(${1:int op_id})
cregiondeformtransform(int op_id, float time)#cregiondeformtransform(${1:int op_id}, ${2:float time})
cregionoverridetransform(string path)#cregionoverridetransform(${1:string path})
cregionoverridetransform(string path, float time)#cregionoverridetransform(${1:string path}, ${2:float time})
cregionoverridetransform(int op_id)#cregionoverridetransform(${1:int op_id})
cregionoverridetransform(int op_id, float time)#cregionoverridetransform(${1:int op_id}, ${2:float time})
isconnected(int opinput)#isconnected(${1:int opinput})
opfullpath(string relative_path)#opfullpath(${1:string relative_path})
opid(string op_path)#opid(${1:string op_path})
opid(int op_id)#opid(${1:int op_id})
opparentbonetransform(string path)#opparentbonetransform(${1:string path})
opparentbonetransform(string path, float time)#opparentbonetransform(${1:string path}, ${2:float time})
opparentbonetransform(int opid)#opparentbonetransform(${1:int opid})
opparentbonetransform(int opid, float time)#opparentbonetransform(${1:int opid}, ${2:float time})
opparenttransform(string path)#opparenttransform(${1:string path})
opparenttransform(string path, float time)#opparenttransform(${1:string path}, ${2:float time})
opparenttransform(int opid)#opparenttransform(${1:int opid})
opparenttransform(int opid, float time)#opparenttransform(${1:int opid}, ${2:float time})
opparmtransform(string path)#opparmtransform(${1:string path})
opparmtransform(string path, float time)#opparmtransform(${1:string path}, ${2:float time})
opparmtransform(int opid)#opparmtransform(${1:int opid})
opparmtransform(int opid, float time)#opparmtransform(${1:int opid}, ${2:float time})
oppreconstrainttransform(string path)#oppreconstrainttransform(${1:string path})
oppreconstrainttransform(string path, float time)#oppreconstrainttransform(${1:string path}, ${2:float time})
oppreconstrainttransform(int opid)#oppreconstrainttransform(${1:int opid})
oppreconstrainttransform(int opid, float time)#oppreconstrainttransform(${1:int opid}, ${2:float time})
oppreparmtransform(string path)#oppreparmtransform(${1:string path})
oppreparmtransform(string path, float time)#oppreparmtransform(${1:string path}, ${2:float time})
oppreparmtransform(int opid)#oppreparmtransform(${1:int opid})
oppreparmtransform(int opid, float time)#oppreparmtransform(${1:int opid}, ${2:float time})
opprerawparmtransform(string path)#opprerawparmtransform(${1:string path})
opprerawparmtransform(string path, float time)#opprerawparmtransform(${1:string path}, ${2:float time})
opprerawparmtransform(int opid)#opprerawparmtransform(${1:int opid})
opprerawparmtransform(int opid, float time)#opprerawparmtransform(${1:int opid}, ${2:float time})
opprerawparmtransform(int opid, int trsorder, int xyzorder, int mask)#opprerawparmtransform(${1:int opid}, ${2:int trsorder}, ${3:int xyzorder}, ${4:int mask})
oppretransform(string path)#oppretransform(${1:string path})
oppretransform(string path, float time)#oppretransform(${1:string path}, ${2:float time})
oppretransform(int opid)#oppretransform(${1:int opid})
oppretransform(int opid, float time)#oppretransform(${1:int opid}, ${2:float time})
oprawparmtransform(string path)#oprawparmtransform(${1:string path})
oprawparmtransform(string path, float time)#oprawparmtransform(${1:string path}, ${2:float time})
oprawparmtransform(int opid)#oprawparmtransform(${1:int opid})
oprawparmtransform(int opid, float time)#oprawparmtransform(${1:int opid}, ${2:float time})
oprawparmtransform(int opid, int trsorder, int xyzorder, int mask)#oprawparmtransform(${1:int opid}, ${2:int trsorder}, ${3:int xyzorder}, ${4:int mask})
optransform(string path)#optransform(${1:string path})
optransform(string path, float time)#optransform(${1:string path}, ${2:float time})
optransform(int op_id)#optransform(${1:int op_id})
optransform(int op_id, float time)#optransform(${1:int op_id}, ${2:float time})
anoise(vector pos)#anoise(${1:vector pos})
anoise(vector pos, int turbulence, float rough, float atten)#anoise(${1:vector pos}, ${2:int turbulence}, ${3:float rough}, ${4:float atten})
anoise(vector pos, int periodX, int periodY, int periodZ)#anoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ})
anoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)#anoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ}, ${5:int turbulence}, ${6:float rough}, ${7:float atten})
curlgxnoise(vector xyz)#curlgxnoise(${1:vector xyz})
curlgxnoise(vector4 xyzt)#curlgxnoise(${1:vector4 xyzt})
curlgxnoise2d(vector2 xy)#curlgxnoise2d(${1:vector2 xy})
curlgxnoise2d(float x, float y)#curlgxnoise2d(${1:float x}, ${2:float y})
curlgxnoise2d(vector xyz)#curlgxnoise2d(${1:vector xyz})
curlgxnoise2d(vector4 xyzt)#curlgxnoise2d(${1:vector4 xyzt})
curlnoise(vector xyz)#curlnoise(${1:vector xyz})
curlnoise(vector4 xyzt)#curlnoise(${1:vector4 xyzt})
curlnoise2d(float x, float y)#curlnoise2d(${1:float x}, ${2:float y})
curlnoise2d(vector xyt)#curlnoise2d(${1:vector xyt})
curlxnoise(vector xyz)#curlxnoise(${1:vector xyz})
curlxnoise(vector4 xyzt)#curlxnoise(${1:vector4 xyzt})
curlxnoise2d(float x, float y)#curlxnoise2d(${1:float x}, ${2:float y})
curlxnoise2d(vector xyt)#curlxnoise2d(${1:vector xyt})
cwnoise(float position, int &seed, float &f1, float &f2)#cwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
cwnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)#cwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
cwnoise(float position, int &seed, float &f1, float &f2, int peiod)#cwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int peiod})
cwnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)#cwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f4}, ${6:float &f4}, ${7:int period})
cwnoise(float posx, float posy, int &seed, float &f1, float &f2)#cwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2})
cwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)#cwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4})
cwnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)#cwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:int periodx}, ${7:int periody})
cwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#cwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4}, ${8:int periodx}, ${9:int periody})
cwnoise(vector2 position, int &seed, float &f1, float &f2)#cwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
cwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)#cwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
cwnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)#cwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody})
cwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#cwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody})
cwnoise(vector position, int &seed, float &f1, float &f2)#cwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
cwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)#cwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
cwnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)#cwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodx})
cwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)#cwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz})
cwnoise(vector4 position, int &seed, float &f1, float &f2)#cwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
cwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)#cwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
cwnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)#cwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodz}, ${8:int periodw})
cwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)#cwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz}, ${10:int periodw})
flownoise(vector xyz, float flow)#flownoise(${1:vector xyz}, ${2:float flow})
flownoise(vector4 xyzt, float flow)#flownoise(${1:vector4 xyzt}, ${2:float flow})
flownoise(float x, float y, float flow)#flownoise(${1:float x}, ${2:float y}, ${3:float flow})
flowpnoise(vector xyz, vector p, float flow)#flowpnoise(${1:vector xyz}, ${2:vector p}, ${3:float flow})
flowpnoise(vector4 xyzt, vector4 p, float flow)#flowpnoise(${1:vector4 xyzt}, ${2:vector4 p}, ${3:float flow})
flowpnoise(float x, float y, int px, int py, float flow)#flowpnoise(${1:float x}, ${2:float y}, ${3:int px}, ${4:int py}, ${5:float flow})
flowpnoise(vector xyz, int px, int py, int pz, float flow)#flowpnoise(${1:vector xyz}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:float flow})
flowpnoise(vector4 xyzt, int px, int py, int pz, int pt, float flow)#flowpnoise(${1:vector4 xyzt}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:int pt}, ${6:float flow})
gxnoise(vector2 xy)#gxnoise(${1:vector2 xy})
gxnoise(float x, float y)#gxnoise(${1:float x}, ${2:float y})
gxnoise(vector xyz)#gxnoise(${1:vector xyz})
gxnoise(vector4 xyzt)#gxnoise(${1:vector4 xyzt})
gxnoised(vector2 xy, vector2 &deriv)#gxnoised(${1:vector2 xy}, ${2:vector2 &deriv})
gxnoised(float x, float y, float &dx, float &dy)#gxnoised(${1:float x}, ${2:float y}, ${3:float &dx}, ${4:float &dy})
gxnoised(vector xyz, vector &deriv)#gxnoised(${1:vector xyz}, ${2:vector &deriv})
gxnoised(vector4 xyzt, vector4 &deriv)#gxnoised(${1:vector4 xyzt}, ${2:vector4 &deriv})
hscript_noise(vector pos)#hscript_noise(${1:vector pos})
hscript_rand(float seed)#hscript_rand(${1:float seed})
hscript_snoise(vector pos)#hscript_snoise(${1:vector pos})
hscript_sturb(vector pos, int turbulence)#hscript_sturb(${1:vector pos}, ${2:int turbulence})
hscript_turb(vector pos, int depth)#hscript_turb(${1:vector pos}, ${2:int depth})
mwnoise(float position, int &seed, float &f1, float &f2)#mwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
mwnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)#mwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
mwnoise(float position, int &seed, float &f1, float &f2, int peiod)#mwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int peiod})
mwnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)#mwnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f4}, ${6:float &f4}, ${7:int period})
mwnoise(float posx, float posy, int &seed, float &f1, float &f2)#mwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2})
mwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)#mwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4})
mwnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)#mwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:int periodx}, ${7:int periody})
mwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#mwnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4}, ${8:int periodx}, ${9:int periody})
mwnoise(vector2 position, int &seed, float &f1, float &f2)#mwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
mwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)#mwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
mwnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)#mwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody})
mwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#mwnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody})
mwnoise(vector position, int &seed, float &f1, float &f2)#mwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
mwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)#mwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
mwnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)#mwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodx})
mwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)#mwnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz})
mwnoise(vector4 position, int &seed, float &f1, float &f2)#mwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
mwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)#mwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
mwnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)#mwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodz}, ${8:int periodw})
mwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)#mwnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz}, ${10:int periodw})
mx_cellnoise(float pos)#mx_cellnoise(${1:float pos})
mx_cellnoise(vector2 pos)#mx_cellnoise(${1:vector2 pos})
mx_cellnoise(vector pos)#mx_cellnoise(${1:vector pos})
mx_cellnoise(vector4 pos)#mx_cellnoise(${1:vector4 pos})
mx_cellnoise(float pos, int periodx)#mx_cellnoise(${1:float pos}, ${2:int periodx})
mx_cellnoise(vector2 pos, int periodx, int periody)#mx_cellnoise(${1:vector2 pos}, ${2:int periodx}, ${3:int periody})
mx_cellnoise(vector pos, int periodx, int periody, int periodz)#mx_cellnoise(${1:vector pos}, ${2:int periodx}, ${3:int periody}, ${4:int periodz})
mx_cellnoise(vector4 pos, int periodx, int periody, int periodz, int periodw)#mx_cellnoise(${1:vector4 pos}, ${2:int periodx}, ${3:int periody}, ${4:int periodz}, ${5:int periodw})
mx_perlin(vector2 pos)#mx_perlin(${1:vector2 pos})
mx_perlin(vector pos)#mx_perlin(${1:vector pos})
mx_perlin(vector pos, int periodx, int periody, int periodz)#mx_perlin(${1:vector pos}, ${2:int periodx}, ${3:int periody}, ${4:int periodz})
mx_perlin(vector2 pos, int periodx, int periody)#mx_perlin(${1:vector2 pos}, ${2:int periodx}, ${3:int periody})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, float &d3, vector2 &p1, vector2 &p2, vector2 &p3)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:float &d3}, ${7:vector2 &p1}, ${8:vector2 &p2}, ${9:vector2 &p3})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, vector2 &p1, vector2 &p2)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:vector2 &p1}, ${7:vector2 &p2})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, vector2 &p1)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:vector2 &p1})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, float &d3, vector2 &p1, vector2 &p2, vector2 &p3, int periodx, int periody)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:float &d3}, ${7:vector2 &p1}, ${8:vector2 &p2}, ${9:vector2 &p3}, ${10:int periodx}, ${11:int periody})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, vector2 &p1, vector2 &p2, int periodx, int periody)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:vector2 &p1}, ${7:vector2 &p2}, ${8:int periodx}, ${9:int periody})
mx_voronoi(vector2 position, float jitter, int metric, float &d1, vector2 &p1, int periodx, int periody)#mx_voronoi(${1:vector2 position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:vector2 &p1}, ${6:int periodx}, ${7:int periody})
mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, float &d3, vector &p1, vector &p2, vector &p3)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:float &d3}, ${7:vector &p1}, ${8:vector &p2}, ${9:vector &p3})
mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, vector &p1, vector &p2)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:vector &p1}, ${7:vector &p2})
mx_voronoi(vector position, float jitter, int metric, float &d1, vector &p1)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:vector &p1})
mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, float &d3, vector &p1, vector &p2, vector &p3, int periodx, int periody, int periodz)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:float &d3}, ${7:vector &p1}, ${8:vector &p2}, ${9:vector &p3}, ${10:int periodx}, ${11:int periody}, ${12:int periodz})
mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, vector &p1, vector &p2, int periodx, int periody, int periodz)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:float &d2}, ${6:vector &p1}, ${7:vector &p2}, ${8:int periodx}, ${9:int periody}, ${10:int periodz})
mx_voronoi(vector position, float jitter, int metric, float &d1, vector &p1, int periodx, int periody, int periodz)#mx_voronoi(${1:vector position}, ${2:float jitter}, ${3:int metric}, ${4:float &d1}, ${5:vector &p1}, ${6:int periodx}, ${7:int periody}, ${8:int periodz})
mx_worley(vector2 pos, float jitter, int metric)#mx_worley(${1:vector2 pos}, ${2:float jitter}, ${3:int metric})
mx_worley(vector pos, float jitter, int metric)#mx_worley(${1:vector pos}, ${2:float jitter}, ${3:int metric})
mx_worley(vector2 pos, float jitter, int periodx, int periody, int periodz)#mx_worley(${1:vector2 pos}, ${2:float jitter}, ${3:int periodx}, ${4:int periody}, ${5:int periodz})
mx_worley(vector pos, float jitter, int periodx, int periody, int periodz, int periodw)#mx_worley(${1:vector pos}, ${2:float jitter}, ${3:int periodx}, ${4:int periody}, ${5:int periodz}, ${6:int periodw})
noise(float pos)#noise(${1:float pos})
noise(float posx, float posy)#noise(${1:float posx}, ${2:float posy})
noise(vector pos)#noise(${1:vector pos})
noise(vector4 pos)#noise(${1:vector4 pos})
noised(float x, float &v, float &dvdx)#noised(${1:float x}, ${2:float &v}, ${3:float &dvdx})
noised(float x, vector &v, vector &dvdx)#noised(${1:float x}, ${2:vector &v}, ${3:vector &dvdx})
noised(float x, float y, float &v, float &dvdx, float &dvdy)#noised(${1:float x}, ${2:float y}, ${3:float &v}, ${4:float &dvdx}, ${5:float &dvdy})
noised(float x, float y, vector &v, vector &dvdx, vector &dvdy)#noised(${1:float x}, ${2:float y}, ${3:vector &v}, ${4:vector &dvdx}, ${5:vector &dvdy})
noised(vector xyz, float &v, float &dvdx, float &dvdy, float &dvdz)#noised(${1:vector xyz}, ${2:float &v}, ${3:float &dvdx}, ${4:float &dvdy}, ${5:float &dvdz})
noised(vector xyz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)#noised(${1:vector xyz}, ${2:vector &v}, ${3:vector &dvdx}, ${4:vector &dvdy}, ${5:vector &dvdz})
noised(vector4 xyzw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)#noised(${1:vector4 xyzw}, ${2:float &v}, ${3:float &dvdx}, ${4:float &dvdy}, ${5:float &dvdz}, ${6:float &dvdw})
noised(vector4 xyzw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)#noised(${1:vector4 xyzw}, ${2:vector &v}, ${3:vector &dvdx}, ${4:vector &dvdy}, ${5:vector &dvdz}, ${6:vector &dvdw})
nrandom(...)#nrandom(${1:...})
nrandom(float &x, float &y, ...)#nrandom(${1:float &x}, ${2:float &y}, ${3:...})
onoise(vector pos)#onoise(${1:vector pos})
onoise(vector pos, int turbulence, float rough, float atten)#onoise(${1:vector pos}, ${2:int turbulence}, ${3:float rough}, ${4:float atten})
onoise(vector pos, int periodX, int periodY, int periodZ)#onoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ})
onoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)#onoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ}, ${5:int turbulence}, ${6:float rough}, ${7:float atten})
pnoise(float x, int px)#pnoise(${1:float x}, ${2:int px})
pnoise(vector x, vector p)#pnoise(${1:vector x}, ${2:vector p})
pnoise(vector4 xyzt, vector4 p)#pnoise(${1:vector4 xyzt}, ${2:vector4 p})
pnoise(float x, float y, int px, int py)#pnoise(${1:float x}, ${2:float y}, ${3:int px}, ${4:int py})
pnoise(vector xyz, int px, int py, int pz)#pnoise(${1:vector xyz}, ${2:int px}, ${3:int py}, ${4:int pz})
pnoise(vector4 xyzt, int px, int py, int pz, int pt)#pnoise(${1:vector4 xyzt}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:int pt})
pxnoised(float x, int px, float &v, float &dvdx)#pxnoised(${1:float x}, ${2:int px}, ${3:float &v}, ${4:float &dvdx})
pxnoised(float x, int px, vector &v, vector &dvdx)#pxnoised(${1:float x}, ${2:int px}, ${3:vector &v}, ${4:vector &dvdx})
pxnoised(float x, float y, int px, int py, float &v, float &dvdx, float &dvdy)#pxnoised(${1:float x}, ${2:float y}, ${3:int px}, ${4:int py}, ${5:float &v}, ${6:float &dvdx}, ${7:float &dvdy})
pxnoised(float x, float y, int px, int py, vector &v, vector &dvdx, vector &dvdy)#pxnoised(${1:float x}, ${2:float y}, ${3:int px}, ${4:int py}, ${5:vector &v}, ${6:vector &dvdx}, ${7:vector &dvdy})
pxnoised(vector xyz, int px, int py, int pz, float &v, float &dvdx, float &dvdy, float &dvdz)#pxnoised(${1:vector xyz}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:float &v}, ${6:float &dvdx}, ${7:float &dvdy}, ${8:float &dvdz})
pxnoised(vector xyz, int px, int py, int pz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)#pxnoised(${1:vector xyz}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:vector &v}, ${6:vector &dvdx}, ${7:vector &dvdy}, ${8:vector &dvdz})
pxnoised(vector4 xyzw, int px, int py, int pz, int pw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)#pxnoised(${1:vector4 xyzw}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:int pw}, ${6:float &v}, ${7:float &dvdx}, ${8:float &dvdy}, ${9:float &dvdz}, ${10:float &dvdw})
pxnoised(vector4 xyzw, int px, int py, int pz, int pw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)#pxnoised(${1:vector4 xyzw}, ${2:int px}, ${3:int py}, ${4:int pz}, ${5:int pw}, ${6:vector &v}, ${7:vector &dvdx}, ${8:vector &dvdy}, ${9:vector &dvdz}, ${10:vector &dvdw})
rand(float seed)#rand(${1:float seed})
rand(float seed, float seed2)#rand(${1:float seed}, ${2:float seed2})
rand(vector2 seed)#rand(${1:vector2 seed})
rand(vector seed)#rand(${1:vector seed})
rand(vector4 seed)#rand(${1:vector4 seed})
random(float|intposition)#random(${1:float|intposition})
random(int position)#random(${1:int position})
random(float|intxpos, float|intypos)#random(${1:float|intxpos}, ${2:float|intypos})
random(vector position)#random(${1:vector position})
random(vector4 position)#random(${1:vector4 position})
random_brj(float seed, int offset)#random_brj(${1:float seed}, ${2:int offset})
random_brj(int seed, int offset)#random_brj(${1:int seed}, ${2:int offset})
random_brj(vector4 seed, int offset)#random_brj(${1:vector4 seed}, ${2:int offset})
random_brj(vector seed, int offset)#random_brj(${1:vector seed}, ${2:int offset})
random_fhash(float seed)#random_fhash(${1:float seed})
random_fhash(float seed, float seed2)#random_fhash(${1:float seed}, ${2:float seed2})
random_fhash(vector seed)#random_fhash(${1:vector seed})
random_fhash(vector4 seed)#random_fhash(${1:vector4 seed})
random_fhash(vector2 seed)#random_fhash(${1:vector2 seed})
random_ihash(int seed)#random_ihash(${1:int seed})
random_poisson(int seed, float mean)#random_poisson(${1:int seed}, ${2:float mean})
random_poisson(int seed, float mean, int minvalue, int maxvalue)#random_poisson(${1:int seed}, ${2:float mean}, ${3:int minvalue}, ${4:int maxvalue})
random_shash(string seed)#random_shash(${1:string seed})
random_sobol(float seed, int offset)#random_sobol(${1:float seed}, ${2:int offset})
random_sobol(int seed, int offset)#random_sobol(${1:int seed}, ${2:int offset})
random_sobol(vector4 seed, int offset)#random_sobol(${1:vector4 seed}, ${2:int offset})
random_sobol(vector seed, int offset)#random_sobol(${1:vector seed}, ${2:int offset})
snoise(vector pos)#snoise(${1:vector pos})
snoise(vector pos, int turbulence, float rough, float atten)#snoise(${1:vector pos}, ${2:int turbulence}, ${3:float rough}, ${4:float atten})
snoise(vector pos, int periodX, int periodY, int periodZ)#snoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ})
snoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)#snoise(${1:vector pos}, ${2:int periodX}, ${3:int periodY}, ${4:int periodZ}, ${5:int turbulence}, ${6:float rough}, ${7:float atten})
vnoise(float position, float jitter, int &seed, float &f1, float &f2, float &pos1, float &pos2)#vnoise(${1:float position}, ${2:float jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &pos1}, ${7:float &pos2})
vnoise(float position, float jitter, int &seed, float &f1, float &f2, float &pos1, float &pos2, int period)#vnoise(${1:float position}, ${2:float jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &pos1}, ${7:float &pos2}, ${8:int period})
vnoise(float posx, float posy, float jittx, float jitty, int &seed, float &f1, float &f2, float &pos1x, float &pos1y, float &pos2x, float &pos2y)#vnoise(${1:float posx}, ${2:float posy}, ${3:float jittx}, ${4:float jitty}, ${5:int &seed}, ${6:float &f1}, ${7:float &f2}, ${8:float &pos1x}, ${9:float &pos1y}, ${10:float &pos2x}, ${11:float &pos2y})
vnoise(float posx, float posy, float jittx, float jitty, int &seed, float &f1, float &f2, float &pos1x, float &pos1y, float &pos2x, float &pos2, int periodx, int periody)#vnoise(${1:float posx}, ${2:float posy}, ${3:float jittx}, ${4:float jitty}, ${5:int &seed}, ${6:float &f1}, ${7:float &f2}, ${8:float &pos1x}, ${9:float &pos1y}, ${10:float &pos2x}, ${11:float &pos2}, ${12:int periodx}, ${13:int periody})
vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2)#vnoise(${1:vector position}, ${2:vector jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector &pos1}, ${7:vector &pos2})
vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2, int periodx, int periody, int periodz)#vnoise(${1:vector position}, ${2:vector jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector &pos1}, ${7:vector &pos2}, ${8:int periodx}, ${9:int periody}, ${10:int periodz})
vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2, vector period)#vnoise(${1:vector position}, ${2:vector jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector &pos1}, ${7:vector &pos2}, ${8:vector period})
vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2)#vnoise(${1:vector4 position}, ${2:vector4 jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector4 &pos1}, ${7:vector4 &pos2})
vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2, int periodx, int periody, int periodz, int periodw)#vnoise(${1:vector4 position}, ${2:vector4 jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector4 &pos1}, ${7:vector4 &pos2}, ${8:int periodx}, ${9:int periody}, ${10:int periodz}, ${11:int periodw})
vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2, vector4 period)#vnoise(${1:vector4 position}, ${2:vector4 jitter}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:vector4 &pos1}, ${7:vector4 &pos2}, ${8:vector4 period})
wnoise(float position, int &seed, float &f1, float &f2)#wnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
wnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)#wnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
wnoise(float position, int &seed, float &f1, float &f2, int peiod)#wnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int peiod})
wnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)#wnoise(${1:float position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f4}, ${6:float &f4}, ${7:int period})
wnoise(float posx, float posy, int &seed, float &f1, float &f2)#wnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2})
wnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)#wnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4})
wnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)#wnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:int periodx}, ${7:int periody})
wnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#wnoise(${1:float posx}, ${2:float posy}, ${3:int &seed}, ${4:float &f1}, ${5:float &f2}, ${6:float &f3}, ${7:float &f4}, ${8:int periodx}, ${9:int periody})
wnoise(vector2 position, int &seed, float &f1, float &f2)#wnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
wnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)#wnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
wnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)#wnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody})
wnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)#wnoise(${1:vector2 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody})
wnoise(vector position, int &seed, float &f1, float &f2)#wnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
wnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)#wnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
wnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)#wnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodx})
wnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)#wnoise(${1:vector position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz})
wnoise(vector4 position, int &seed, float &f1, float &f2)#wnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2})
wnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)#wnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4})
wnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)#wnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:int periodx}, ${6:int periody}, ${7:int periodz}, ${8:int periodw})
wnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)#wnoise(${1:vector4 position}, ${2:int &seed}, ${3:float &f1}, ${4:float &f2}, ${5:float &f3}, ${6:float &f4}, ${7:int periodx}, ${8:int periody}, ${9:int periodz}, ${10:int periodw})
pxnoise(float x, int xp)#pxnoise(${1:float x}, ${2:int xp})
pxnoise(float x, float y, int xp, int yp)#pxnoise(${1:float x}, ${2:float y}, ${3:int xp}, ${4:int yp})
pxnoise(vector xyz, int xp, int yp, int zp)#pxnoise(${1:vector xyz}, ${2:int xp}, ${3:int yp}, ${4:int zp})
pxnoise(vector4 xyzt, int xp, int yp, int zp, int wp)#pxnoise(${1:vector4 xyzt}, ${2:int xp}, ${3:int yp}, ${4:int zp}, ${5:int wp})
xnoise(float x)#xnoise(${1:float x})
xnoise(float x, float y)#xnoise(${1:float x}, ${2:float y})
xnoise(vector xyz)#xnoise(${1:vector xyz})
xnoise(vector4 xyzt)#xnoise(${1:vector4 xyzt})
xnoised(float x, float &v, float &dvdx)#xnoised(${1:float x}, ${2:float &v}, ${3:float &dvdx})
xnoised(float x, vector &v, vector &dvdx)#xnoised(${1:float x}, ${2:vector &v}, ${3:vector &dvdx})
xnoised(float x, float y, float &v, float &dvdx, float &dvdy)#xnoised(${1:float x}, ${2:float y}, ${3:float &v}, ${4:float &dvdx}, ${5:float &dvdy})
xnoised(float x, float y, vector &v, vector &dvdx, vector &dvdy)#xnoised(${1:float x}, ${2:float y}, ${3:vector &v}, ${4:vector &dvdx}, ${5:vector &dvdy})
xnoised(vector xyz, float &v, float &dvdx, float &dvdy, float &dvdz)#xnoised(${1:vector xyz}, ${2:float &v}, ${3:float &dvdx}, ${4:float &dvdy}, ${5:float &dvdz})
xnoised(vector xyz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)#xnoised(${1:vector xyz}, ${2:vector &v}, ${3:vector &dvdx}, ${4:vector &dvdy}, ${5:vector &dvdz})
xnoised(vector4 xyzw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)#xnoised(${1:vector4 xyzw}, ${2:float &v}, ${3:float &dvdx}, ${4:float &dvdy}, ${5:float &dvdz}, ${6:float &dvdw})
xnoised(vector4 xyzw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)#xnoised(${1:vector4 xyzw}, ${2:vector &v}, ${3:vector &dvdx}, ${4:vector &dvdy}, ${5:vector &dvdz}, ${6:vector &dvdw})
computenormal(vector P, ...)#computenormal(${1:vector P}, ${2:...})
computenormal(vector P, vector N, vector Ng, ...)#computenormal(${1:vector P}, ${2:vector N}, ${3:vector Ng}, ${4:...})
computenormal(int i)#computenormal(${1:int i})
prim_normal(<geometry> geometry, int prim_number, vector uvw)#prim_normal(${1:<geometry> geometry}, ${2:int prim_number}, ${3:vector uvw})
prim_normal(<geometry> geometry, int prim_number, float u, float v)#prim_normal(${1:<geometry> geometry}, ${2:int prim_number}, ${3:float u}, ${4:float v})
prim_normal(<geometry> geometry, int prim_number, float u, float v, float w)#prim_normal(${1:<geometry> geometry}, ${2:int prim_number}, ${3:float u}, ${4:float v}, ${5:float w})
ocio_activedisplays()#ocio_activedisplays(${1:})
ocio_activeviews()#ocio_activeviews(${1:})
ocio_import(string space, string property, int &value)#ocio_import(${1:string space}, ${2:string property}, ${3:int &value})
ocio_import(string space, string property, vector &value)#ocio_import(${1:string space}, ${2:string property}, ${3:vector &value})
ocio_import(string space, string property, string &value)#ocio_import(${1:string space}, ${2:string property}, ${3:string &value})
ocio_parsecolorspace(string input)#ocio_parsecolorspace(${1:string input})
ocio_roles()#ocio_roles(${1:})
ocio_spaces()#ocio_spaces(${1:})
ocio_transform(string dest, vector clr)#ocio_transform(${1:string dest}, ${2:vector clr})
ocio_transform(string src, string dest, vector clr)#ocio_transform(${1:string src}, ${2:string dest}, ${3:vector clr})
ocio_transform(string src, string dest, string looks, vector clr)#ocio_transform(${1:string src}, ${2:string dest}, ${3:string looks}, ${4:vector clr})
ocio_transform(string dest, vector4 clr)#ocio_transform(${1:string dest}, ${2:vector4 clr})
ocio_transform(string src, string dest, vector4 clr)#ocio_transform(${1:string src}, ${2:string dest}, ${3:vector4 clr})
ocio_transform(string src, string dest, string looks, vector4 clr)#ocio_transform(${1:string src}, ${2:string dest}, ${3:string looks}, ${4:vector4 clr})
ocio_transformview(string src, string display, string view, vector clr)#ocio_transformview(${1:string src}, ${2:string display}, ${3:string view}, ${4:vector clr})
ocio_transformview(string src, string display, string view, vector4 clr)#ocio_transformview(${1:string src}, ${2:string display}, ${3:string view}, ${4:vector4 clr})
filamentsample(<geometry> geometry, vector position)#filamentsample(${1:<geometry> geometry}, ${2:vector position})
mattrib(string name, vector P)#mattrib(${1:string name}, ${2:vector P})
mdensity(vector P)#mdensity(${1:vector P})
mspace(vector P)#mspace(${1:vector P})
pcclose(int &handle)#pcclose(${1:int &handle})
pccone(<geometry> geometry, string PChannel, vector P, vector dir, float angle, float max_distance, int maxpoints)#pccone(${1:<geometry> geometry}, ${2:string PChannel}, ${3:vector P}, ${4:vector dir}, ${5:float angle}, ${6:float max_distance}, ${7:int maxpoints})
pccone(<geometry> geometry, string ptgroup, string PChannel, vector P, vector dir, float angle, float max_distance, int maxpoints)#pccone(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:vector P}, ${5:vector dir}, ${6:float angle}, ${7:float max_distance}, ${8:int maxpoints})
pccone_radius(<geometry> geometry, string PChannel, string RadChannel, float radscale, vector P, vector dir, float angle, float max_distance, int maxpoints)#pccone_radius(${1:<geometry> geometry}, ${2:string PChannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P}, ${6:vector dir}, ${7:float angle}, ${8:float max_distance}, ${9:int maxpoints})
pccone_radius(<geometry> geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P, vector dir, float angle, float max_distance, int maxpoints)#pccone_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P}, ${7:vector dir}, ${8:float angle}, ${9:float max_distance}, ${10:int maxpoints})
pcconvex(int handle, string channel, vector N)#pcconvex(${1:int handle}, ${2:string channel}, ${3:vector N})
pcexport(int handle, string channel_name, <type> value, ...)#pcexport(${1:int handle}, ${2:string channel_name}, ${3:<type> value}, ${4:...})
pcexport(int handle, string channel_name, vector value, float radius, ...)#pcexport(${1:int handle}, ${2:string channel_name}, ${3:vector value}, ${4:float radius}, ${5:...})
pcfarthest(int handle)#pcfarthest(${1:int handle})
pcfilter(int handle, string channel_name, ...)#pcfilter(${1:int handle}, ${2:string channel_name}, ${3:...})
pcfind(<geometry> geometry, string Pchannel, vector P, float radius, int maxpoints)#pcfind(${1:<geometry> geometry}, ${2:string Pchannel}, ${3:vector P}, ${4:float radius}, ${5:int maxpoints})
pcfind(<geometry> geometry, string ptgroup, string Pchannel, vector P, float radius, int maxpoints)#pcfind(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string Pchannel}, ${4:vector P}, ${5:float radius}, ${6:int maxpoints})
pcfind(<geometry> geometry, string Pchannel, vector P, float radius, int maxpoints, float &distances[])#pcfind(${1:<geometry> geometry}, ${2:string Pchannel}, ${3:vector P}, ${4:float radius}, ${5:int maxpoints}, ${6:float &distances[]})
pcfind(<geometry> geometry, string ptgroup, string Pchannel, vector P, float radius, int maxpoints, float &distances[])#pcfind(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string Pchannel}, ${4:vector P}, ${5:float radius}, ${6:int maxpoints}, ${7:float &distances[]})
pcfind_radius(<geometry> geometry, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)#pcfind_radius(${1:<geometry> geometry}, ${2:string Pchannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P}, ${6:float radius}, ${7:int maxpoints})
pcfind_radius(<geometry> geometry, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)#pcfind_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string Pchannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P}, ${7:float radius}, ${8:int maxpoints})
pcfind_radius(<geometry> geometry, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])#pcfind_radius(${1:<geometry> geometry}, ${2:string Pchannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P}, ${6:float radius}, ${7:int maxpoints}, ${8:float &distances[]})
pcfind_radius(<geometry> geometry, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])#pcfind_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string Pchannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P}, ${7:float radius}, ${8:int maxpoints}, ${9:float &distances[]})
pcgenerate(string filename, int npoints)#pcgenerate(${1:string filename}, ${2:int npoints})
pcimport(int handle, string channel_name, <type> &value)#pcimport(${1:int handle}, ${2:string channel_name}, ${3:<type> &value})
pcimportbyidx3(int handle, string channel_name, int idx)#pcimportbyidx3(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidx4(int handle, string channel_name, int idx)#pcimportbyidx4(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidxf(int handle, string channel_name, int idx)#pcimportbyidxf(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidxi(int handle, string channel_name, int idx)#pcimportbyidxi(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidxp(int handle, string channel_name, int idx)#pcimportbyidxp(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidxs(int handle, string channel_name, int idx)#pcimportbyidxs(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pcimportbyidxv(int handle, string channel_name, int idx)#pcimportbyidxv(${1:int handle}, ${2:string channel_name}, ${3:int idx})
pciterate(int handle)#pciterate(${1:int handle})
pcline(<geometry> geometry, string PChannel, vector P, vector dir, float max_distance, int maxpoints)#pcline(${1:<geometry> geometry}, ${2:string PChannel}, ${3:vector P}, ${4:vector dir}, ${5:float max_distance}, ${6:int maxpoints})
pcline(<geometry> geometry, string ptgroup, string PChannel, vector P, vector dir, float max_distance, int maxpoints)#pcline(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:vector P}, ${5:vector dir}, ${6:float max_distance}, ${7:int maxpoints})
pcline_radius(<geometry> geometry, string PChannel, string RadChannel, float radscale, vector P, vector dir, float max_distance, int maxpoints)#pcline_radius(${1:<geometry> geometry}, ${2:string PChannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P}, ${6:vector dir}, ${7:float max_distance}, ${8:int maxpoints})
pcline_radius(<geometry> geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P, vector dir, float max_distance, int maxpoints)#pcline_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P}, ${7:vector dir}, ${8:float max_distance}, ${9:int maxpoints})
pcnumfound(int handle)#pcnumfound(${1:int handle})
pcopen(string filename, string channel, int shaded, ...)#pcopen(${1:string filename}, ${2:string channel}, ${3:int shaded}, ${4:...})
pcopen(string filename, string Pchannel, vector P, float radius, int maxpoints, ...)#pcopen(${1:string filename}, ${2:string Pchannel}, ${3:vector P}, ${4:float radius}, ${5:int maxpoints}, ${6:...})
pcopen(string filename, string Pchannel, vector P, string Nchannel, vector N, float radius, int maxpoints, ...)#pcopen(${1:string filename}, ${2:string Pchannel}, ${3:vector P}, ${4:string Nchannel}, ${5:vector N}, ${6:float radius}, ${7:int maxpoints}, ${8:...})
pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints)#pcopen(${1:int opinput}, ${2:string Pchannel}, ${3:vector P}, ${4:float radius}, ${5:int maxpoints})
pcopenlod(string filename, string Pchannel, vector P, int min_pts, ...)#pcopenlod(${1:string filename}, ${2:string Pchannel}, ${3:vector P}, ${4:int min_pts}, ${5:...})
pcsampleleaf(int handle, float sample)#pcsampleleaf(${1:int handle}, ${2:float sample})
pcsegment(<geometry> geometry, string PChannel, vector P0, vector P1, float max_distance, int maxpoints)#pcsegment(${1:<geometry> geometry}, ${2:string PChannel}, ${3:vector P0}, ${4:vector P1}, ${5:float max_distance}, ${6:int maxpoints})
pcsegment(<geometry> geometry, string ptgroup, string PChannel, vector P0, vector P1, float max_distance, int maxpoints)#pcsegment(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:vector P0}, ${5:vector P1}, ${6:float max_distance}, ${7:int maxpoints})
pcsegment(<geometry> geometry, string PChannel, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])#pcsegment(${1:<geometry> geometry}, ${2:string PChannel}, ${3:vector P0}, ${4:vector P1}, ${5:float max_distance}, ${6:int maxpoints}, ${7:float &distances[]})
pcsegment(<geometry> geometry, string ptgroup, string PChannel, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])#pcsegment(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:vector P0}, ${5:vector P1}, ${6:float max_distance}, ${7:int maxpoints}, ${8:float &distances[]})
pcsegment_radius(<geometry> geometry, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints)#pcsegment_radius(${1:<geometry> geometry}, ${2:string PChannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P0}, ${6:vector P1}, ${7:float max_distance}, ${8:int maxpoints})
pcsegment_radius(<geometry> geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints)#pcsegment_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P0}, ${7:vector P1}, ${8:float max_distance}, ${9:int maxpoints})
pcsegment_radius(<geometry> geometry, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])#pcsegment_radius(${1:<geometry> geometry}, ${2:string PChannel}, ${3:string RadChannel}, ${4:float radscale}, ${5:vector P0}, ${6:vector P1}, ${7:float max_distance}, ${8:int maxpoints}, ${9:float &distances[]})
pcsegment_radius(<geometry> geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])#pcsegment_radius(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:string PChannel}, ${4:string RadChannel}, ${5:float radscale}, ${6:vector P0}, ${7:vector P1}, ${8:float max_distance}, ${9:int maxpoints}, ${10:float &distances[]})
pcsize(int handle)#pcsize(${1:int handle})
pcunshaded(int handle, string channel_name)#pcunshaded(${1:int handle}, ${2:string channel_name})
pcwrite(string filename, ...)#pcwrite(${1:string filename}, ${2:...})
pgfind(<geometry> geometry, vector P, float radius, int maxpoints, float divsize)#pgfind(${1:<geometry> geometry}, ${2:vector P}, ${3:float radius}, ${4:int maxpoints}, ${5:float divsize})
pgfind(<geometry> geometry, string ptgroup, vector P, float radius, int maxpoints, float divsize)#pgfind(${1:<geometry> geometry}, ${2:string ptgroup}, ${3:vector P}, ${4:float radius}, ${5:int maxpoints}, ${6:float divsize})
photonmap(string mapname, vector position, vector normal, ...)#photonmap(${1:string mapname}, ${2:vector position}, ${3:vector normal}, ${4:...})
photonmap(string mapname, vector position, vector normal, vector &color, float &area, ...)#photonmap(${1:string mapname}, ${2:vector position}, ${3:vector normal}, ${4:vector &color}, ${5:float &area}, ${6:...})
texture3d(string filename, string channel, vector P, ...)#texture3d(${1:string filename}, ${2:string channel}, ${3:vector P}, ${4:...})
texture3dBox(string filename, string channel, vector &min, vector &max, ...)#texture3dBox(${1:string filename}, ${2:string channel}, ${3:vector &min}, ${4:vector &max}, ${5:...})
create_cdf(float pdf[])#create_cdf(${1:float pdf[]})
create_pdf(float values[])#create_pdf(${1:float values[]})
limit_sample_space(float minu, float maxu, float u)#limit_sample_space(${1:float minu}, ${2:float maxu}, ${3:float u})
limit_sample_space(float maxu, float u)#limit_sample_space(${1:float maxu}, ${2:float u})
newsampler(...)#newsampler(${1:...})
newsampler(int seed, ...)#newsampler(${1:int seed}, ${2:...})
nextsample(int &sid, float &sx, float &sy, ...)#nextsample(${1:int &sid}, ${2:float &sx}, ${3:float &sy}, ${4:...})
nextsample(int &sid, vector &svec, ...)#nextsample(${1:int &sid}, ${2:vector &svec}, ${3:...})
sample_cauchy(float u)#sample_cauchy(${1:float u})
sample_cauchy(float scale, float u)#sample_cauchy(${1:float scale}, ${2:float u})
sample_cauchy(float scale, vector2 u)#sample_cauchy(${1:float scale}, ${2:vector2 u})
sample_cauchy(float origscale, float minvalue, float maxvalue, float u)#sample_cauchy(${1:float origscale}, ${2:float minvalue}, ${3:float maxvalue}, ${4:float u})
sample_cauchy(<vector> u)#sample_cauchy(${1:<vector> u})
sample_cdf(float cdf[], float uniform_rand)#sample_cdf(${1:float cdf[]}, ${2:float uniform_rand})
sample_cdf(float cdf[], float uniform_rand, int &index, float &x)#sample_cdf(${1:float cdf[]}, ${2:float uniform_rand}, ${3:int &index}, ${4:float &x})
sample_cdf(float cdf[], float uniform_rand, int &index, float &x, float &pdf)#sample_cdf(${1:float cdf[]}, ${2:float uniform_rand}, ${3:int &index}, ${4:float &x}, ${5:float &pdf})
sample_circle_arc(vector2 center, float maxangle, float u)#sample_circle_arc(${1:vector2 center}, ${2:float maxangle}, ${3:float u})
sample_circle_edge_uniform(float u)#sample_circle_edge_uniform(${1:float u})
sample_circle_ring_uniform(vector2 u, float alpha)#sample_circle_ring_uniform(${1:vector2 u}, ${2:float alpha})
sample_circle_slice(vector2 center, float maxangle, vector2 u)#sample_circle_slice(${1:vector2 center}, ${2:float maxangle}, ${3:vector2 u})
sample_circle_uniform(vector2 u)#sample_circle_uniform(${1:vector2 u})
sample_direction_cone(vector center, float maxangle, vector2 u)#sample_direction_cone(${1:vector center}, ${2:float maxangle}, ${3:vector2 u})
sample_direction_uniform(vector2 u)#sample_direction_uniform(${1:vector2 u})
sample_discrete(int nvalues, float u)#sample_discrete(${1:int nvalues}, ${2:float u})
sample_discrete(float weights[], float u)#sample_discrete(${1:float weights[]}, ${2:float u})
sample_exponential(float u)#sample_exponential(${1:float u})
sample_exponential(float mean, float u)#sample_exponential(${1:float mean}, ${2:float u})
sample_exponential(float origmean, float maxvalue, float u)#sample_exponential(${1:float origmean}, ${2:float maxvalue}, ${3:float u})
sample_geometry(vector origin, vector sample, float time, ...)#sample_geometry(${1:vector origin}, ${2:vector sample}, ${3:float time}, ${4:...})
sample_hemisphere(vector2 u)#sample_hemisphere(${1:vector2 u})
sample_hemisphere(vector center, vector2 u)#sample_hemisphere(${1:vector center}, ${2:vector2 u})
sample_hemisphere(float bias, vector2 u)#sample_hemisphere(${1:float bias}, ${2:vector2 u})
sample_hemisphere(vector center, float bias, vector2 u)#sample_hemisphere(${1:vector center}, ${2:float bias}, ${3:vector2 u})
sample_hypersphere_cone(vector4 center, float maxangle, vector4 u)#sample_hypersphere_cone(${1:vector4 center}, ${2:float maxangle}, ${3:vector4 u})
sample_hypersphere_uniform(vector4 u)#sample_hypersphere_uniform(${1:vector4 u})
sample_light(int lightid, vector pos, vector sam, float time, vector &pos, vector &clr, float &scale, ...)#sample_light(${1:int lightid}, ${2:vector pos}, ${3:vector sam}, ${4:float time}, ${5:vector &pos}, ${6:vector &clr}, ${7:float &scale}, ${8:...})
sample_lognormal(float mu, float sigma, float u)#sample_lognormal(${1:float mu}, ${2:float sigma}, ${3:float u})
sample_lognormal(float mu, float sigma, float minvalue, float maxvalue, float u)#sample_lognormal(${1:float mu}, ${2:float sigma}, ${3:float minvalue}, ${4:float maxvalue}, ${5:float u})
sample_lognormal_by_median(float median, float stddev, float u)#sample_lognormal_by_median(${1:float median}, ${2:float stddev}, ${3:float u})
sample_lognormal_by_median(float origmedian, float origstddev, float minvalue, float maxvalue, float u)#sample_lognormal_by_median(${1:float origmedian}, ${2:float origstddev}, ${3:float minvalue}, ${4:float maxvalue}, ${5:float u})
sample_normal(float u)#sample_normal(${1:float u})
sample_normal(float mean, float stddev, float u)#sample_normal(${1:float mean}, ${2:float stddev}, ${3:float u})
sample_normal(float origmean, float origstddev, float minvalue, float maxvalue, float u)#sample_normal(${1:float origmean}, ${2:float origstddev}, ${3:float minvalue}, ${4:float maxvalue}, ${5:float u})
sample_normal(vector2 u)#sample_normal(${1:vector2 u})
sample_normal(vector u)#sample_normal(${1:vector u})
sample_normal(vector4 u)#sample_normal(${1:vector4 u})
sample_orientation_cone(vector4 center, float maxangle, vector u)#sample_orientation_cone(${1:vector4 center}, ${2:float maxangle}, ${3:vector u})
sample_orientation_uniform(vector u)#sample_orientation_uniform(${1:vector u})
sample_photon(light lp, vector &pos, vector &dir, float &scale, float time)#sample_photon(${1:light lp}, ${2:vector &pos}, ${3:vector &dir}, ${4:float &scale}, ${5:float time})
sample_sphere_cone(vector center, float maxangle, vector u)#sample_sphere_cone(${1:vector center}, ${2:float maxangle}, ${3:vector u})
sample_sphere_shell_uniform(vector u, float alpha)#sample_sphere_shell_uniform(${1:vector u}, ${2:float alpha})
sample_sphere_uniform(vector u)#sample_sphere_uniform(${1:vector u})
sampledisk(float &x, float &y, float sx, float sy)#sampledisk(${1:float &x}, ${2:float &y}, ${3:float sx}, ${4:float sy})
variance(float variable, float &mean, int &sample_size)#variance(${1:float variable}, ${2:float &mean}, ${3:int &sample_size})
sensor_panorama_create(float time, vector pos, int size, float near, float far, string candidateobj, string includeobj, string excludeobj, int uselit)#sensor_panorama_create(${1:float time}, ${2:vector pos}, ${3:int size}, ${4:float near}, ${5:float far}, ${6:string candidateobj}, ${7:string includeobj}, ${8:string excludeobj}, ${9:int uselit})
sensor_panorama_getcolor(int handle, vector dir)#sensor_panorama_getcolor(${1:int handle}, ${2:vector dir})
sensor_panorama_getcone(int handle, vector lookodir, float angle, vector colormin, vector colormax, float depthmin, float depthmax, float &strength, vector &dir, vector &color, float &depth)#sensor_panorama_getcone(${1:int handle}, ${2:vector lookodir}, ${3:float angle}, ${4:vector colormin}, ${5:vector colormax}, ${6:float depthmin}, ${7:float depthmax}, ${8:float &strength}, ${9:vector &dir}, ${10:vector &color}, ${11:float &depth})
sensor_panorama_getdepth(int handle, vector dir)#sensor_panorama_getdepth(${1:int handle}, ${2:vector dir})
sensor_save(int handle, string colorfile, string depthfile)#sensor_save(${1:int handle}, ${2:string colorfile}, ${3:string depthfile})
area(vector p, ...)#area(${1:vector p}, ${2:...})
blinnBRDF(vector L, vector N, vector V, float rough)#blinnBRDF(${1:vector L}, ${2:vector N}, ${3:vector V}, ${4:float rough})
bouncelabel(int mask)#bouncelabel(${1:int mask})
bouncemask(string labels)#bouncemask(${1:string labels})
diffuseBRDF(vector L, vector N)#diffuseBRDF(${1:vector L}, ${2:vector N})
diffuseBRDF(vector L, vector N, vector V, float rough)#diffuseBRDF(${1:vector L}, ${2:vector N}, ${3:vector V}, ${4:float rough})
filterstep(float edge, float x, ...)#filterstep(${1:float edge}, ${2:float x}, ${3:...})
filterstep(float edge, float x0, float x1, ...)#filterstep(${1:float edge}, ${2:float x0}, ${3:float x1}, ${4:...})
fresnel(vector i, vector n, float eta, float &kr, float &kt)#fresnel(${1:vector i}, ${2:vector n}, ${3:float eta}, ${4:float &kr}, ${5:float &kt})
fresnel(vector i, vector n, float eta, float &kr, float &kt, vector &R, vector &T)#fresnel(${1:vector i}, ${2:vector n}, ${3:float eta}, ${4:float &kr}, ${5:float &kt}, ${6:vector &R}, ${7:vector &T})
frontface(vector N, vector I)#frontface(${1:vector N}, ${2:vector I})
frontface(vector N, vector I, vector Nref)#frontface(${1:vector N}, ${2:vector I}, ${3:vector Nref})
getblurP(float delta)#getblurP(${1:float delta})
getcomponents()#getcomponents(${1:})
getderiv(float attr, string attrName, int isVertexAttr, float s, float t, float &du, float &dv, ...)#getderiv(${1:float attr}, ${2:string attrName}, ${3:int isVertexAttr}, ${4:float s}, ${5:float t}, ${6:float &du}, ${7:float &dv}, ${8:...})
getderiv(<vector> attr, string attrName, int isVertexAttr, float s, float t, <vector> &du, <vector> &dv, ...)#getderiv(${1:<vector> attr}, ${2:string attrName}, ${3:int isVertexAttr}, ${4:float s}, ${5:float t}, ${6:<vector> &du}, ${7:<vector> &dv}, ${8:...})
getfogname()#getfogname(${1:})
getglobalraylevel()#getglobalraylevel(${1:})
getgroupid()#getgroupid(${1:})
getlight(int lid)#getlight(${1:int lid})
getlightid(string lightname)#getlightid(${1:string lightname})
getlightname()#getlightname(${1:})
getlightname(int lightid)#getlightname(${1:int lightid})
getlights(...)#getlights(${1:...})
getlights(vector P, ...)#getlights(${1:vector P}, ${2:...})
getlights(material mat, vector P, ...)#getlights(${1:material mat}, ${2:vector P}, ${3:...})
getlightscope(material mat, string &scope, string &categories)#getlightscope(${1:material mat}, ${2:string &scope}, ${3:string &categories})
getlocalcurvature(float s, float t)#getlocalcurvature(${1:float s}, ${2:float t})
getmaterial()#getmaterial(${1:})
getmaterialid()#getmaterialid(${1:})
getobjectid()#getobjectid(${1:})
getobjectname()#getobjectname(${1:})
getphotonlight()#getphotonlight(${1:})
getprimid()#getprimid(${1:})
getptextureid()#getptextureid(${1:})
getraylevel()#getraylevel(${1:})
getrayweight()#getrayweight(${1:})
getsamplestore(string channel, vector P, int &value)#getsamplestore(${1:string channel}, ${2:vector P}, ${3:int &value})
getsamplestore(string channel, vector P, float &value)#getsamplestore(${1:string channel}, ${2:vector P}, ${3:float &value})
getsamplestore(string channel, vector P, vector &value)#getsamplestore(${1:string channel}, ${2:vector P}, ${3:vector &value})
getsamplestore(string channel, vector P, vector4 &value)#getsamplestore(${1:string channel}, ${2:vector P}, ${3:vector4 &value})
getscope(material mat, string raystyle, string &scope, string &categories)#getscope(${1:material mat}, ${2:string raystyle}, ${3:string &scope}, ${4:string &categories})
getsmoothP(vector &smoothP, vector ray_origin, ...)#getsmoothP(${1:vector &smoothP}, ${2:vector ray_origin}, ${3:...})
getsmoothP(...)#getsmoothP(${1:...})
getuvtangents(string objName, vector P, vector dir, vector &Tu, vector &Tv)#getuvtangents(${1:string objName}, ${2:vector P}, ${3:vector dir}, ${4:vector &Tu}, ${5:vector &Tv})
getuvtangents(string objName, vector P, vector dir, vector &Tu, vector &Tv, vector &Tn)#getuvtangents(${1:string objName}, ${2:vector P}, ${3:vector dir}, ${4:vector &Tu}, ${5:vector &Tv}, ${6:vector &Tn})
gradient(float val, ...)#gradient(${1:float val}, ${2:...})
gradient(vector P, float val, ...)#gradient(${1:vector P}, ${2:float val}, ${3:...})
haslight(material mat, vector P, int light, ...)#haslight(${1:material mat}, ${2:vector P}, ${3:int light}, ${4:...})
integratehoseksky(float solar_altitude, float solar_azimuth, float turbidity, vector ground_albedo, int number_of_samples)#integratehoseksky(${1:float solar_altitude}, ${2:float solar_azimuth}, ${3:float turbidity}, ${4:vector ground_albedo}, ${5:int number_of_samples})
interpolate(float val, float sx, float sy)#interpolate(${1:float val}, ${2:float sx}, ${3:float sy})
interpolate(vector val, float sx, float sy)#interpolate(${1:vector val}, ${2:float sx}, ${3:float sy})
interpolate(vector4 val, float sx, float sy)#interpolate(${1:vector4 val}, ${2:float sx}, ${3:float sy})
interpolate(bsdf val, float sx, float sy)#interpolate(${1:bsdf val}, ${2:float sx}, ${3:float sy})
intersect_lights(int lightids[], vector pos, vector dir, float time, int &idx, float &dist, vector &clr, float &scale, ...)#intersect_lights(${1:int lightids[]}, ${2:vector pos}, ${3:vector dir}, ${4:float time}, ${5:int &idx}, ${6:float &dist}, ${7:vector &clr}, ${8:float &scale}, ${9:...})
irradiance(vector P, vector N, ...)#irradiance(${1:vector P}, ${2:vector N}, ${3:...})
isfogray()#isfogray(${1:})
islpeactive()#islpeactive(${1:})
israytracing()#israytracing(${1:})
isshadingRHS()#isshadingRHS(${1:})
isshadowray()#isshadowray(${1:})
isuvrendering()#isuvrendering(${1:})
lightbounces(light lp)#lightbounces(${1:light lp})
lightid(light lp)#lightid(${1:light lp})
lightstate(string query, <type> &value)#lightstate(${1:string query}, ${2:<type> &value})
lightstate(string query, <type> &value[])#lightstate(${1:string query}, ${2:<type> &value[]})
limport(string name, <type> &value)#limport(${1:string name}, ${2:<type> &value})
matchvex_blinn(float exponent, ...)#matchvex_blinn(${1:float exponent}, ${2:...})
matchvex_blinn(vector nml, float exponent, ...)#matchvex_blinn(${1:vector nml}, ${2:float exponent}, ${3:...})
matchvex_specular(float exponent, ...)#matchvex_specular(${1:float exponent}, ${2:...})
matchvex_specular(vector nml, float exponent, ...)#matchvex_specular(${1:vector nml}, ${2:float exponent}, ${3:...})
nbouncetypes()#nbouncetypes(${1:})
objectstate(string query, <type> &value)#objectstate(${1:string query}, ${2:<type> &value})
objectstate(string query, <type> &value[])#objectstate(${1:string query}, ${2:<type> &value[]})
occlusion(vector P, vector N, ...)#occlusion(${1:vector P}, ${2:vector N}, ${3:...})
occlusion(float &coverage, vector &missed_direction, vector P, vector N, ...)#occlusion(${1:float &coverage}, ${2:vector &missed_direction}, ${3:vector P}, ${4:vector N}, ${5:...})
pathtrace(vector P, vector N, ...)#pathtrace(${1:vector P}, ${2:vector N}, ${3:...})
phongBRDF(vector L, vector N, vector V, float rough)#phongBRDF(${1:vector L}, ${2:vector N}, ${3:vector V}, ${4:float rough})
rayhittest(vector P, vector D, float bias, ...)#rayhittest(${1:vector P}, ${2:vector D}, ${3:float bias}, ${4:...})
rayhittest(vector P, vector D, vector &pHit, vector &nHit, float bias, ...)#rayhittest(${1:vector P}, ${2:vector D}, ${3:vector &pHit}, ${4:vector &nHit}, ${5:float bias}, ${6:...})
rayimport(string name, <type> &value)#rayimport(${1:string name}, ${2:<type> &value})
rayimport(string name, <type> &value[])#rayimport(${1:string name}, ${2:<type> &value[]})
reflect(vector direction, vector normal)#reflect(${1:vector direction}, ${2:vector normal})
reflectlight(float bias, float max_contrib, ...)#reflectlight(${1:float bias}, ${2:float max_contrib}, ${3:...})
reflectlight(vector P, vector D, float bias, float max_contrib, ...)#reflectlight(${1:vector P}, ${2:vector D}, ${3:float bias}, ${4:float max_contrib}, ${5:...})
reflectlight(vector P, vector N, vector I, float bias, float max_contrib, ...)#reflectlight(${1:vector P}, ${2:vector N}, ${3:vector I}, ${4:float bias}, ${5:float max_contrib}, ${6:...})
refract(vector direction, vector normal, float index)#refract(${1:vector direction}, ${2:vector normal}, ${3:float index})
refractlight(vector &cf, vector &of, float &af, vector P, vector D, float bias, float max_contrib, ...)#refractlight(${1:vector &cf}, ${2:vector &of}, ${3:float &af}, ${4:vector P}, ${5:vector D}, ${6:float bias}, ${7:float max_contrib}, ${8:...})
refractlight(vector &cf, vector &of, float &af, vector P, vector N, vector I, float eta, float bias, float max_contrib, ...)#refractlight(${1:vector &cf}, ${2:vector &of}, ${3:float &af}, ${4:vector P}, ${5:vector N}, ${6:vector I}, ${7:float eta}, ${8:float bias}, ${9:float max_contrib}, ${10:...})
renderstate(string query, <type> &value)#renderstate(${1:string query}, ${2:<type> &value})
renderstate(string query, <type> &value[])#renderstate(${1:string query}, ${2:<type> &value[]})
renderstate(material mat, string query, <type> &value)#renderstate(${1:material mat}, ${2:string query}, ${3:<type> &value})
resolvemissedray(vector dir, float time, int mask, ...)#resolvemissedray(${1:vector dir}, ${2:float time}, ${3:int mask}, ${4:...})
scatter(vector ipoint, vector inormal, vector idirection, vector idistribution, float time, float maxdist, vector &opoint, vector &onormal, vector &odirection)#scatter(${1:vector ipoint}, ${2:vector inormal}, ${3:vector idirection}, ${4:vector idistribution}, ${5:float time}, ${6:float maxdist}, ${7:vector &opoint}, ${8:vector &onormal}, ${9:vector &odirection})
setcurrentlight(int lightid)#setcurrentlight(${1:int lightid})
setsamplestore(string channel, vector P, int value)#setsamplestore(${1:string channel}, ${2:vector P}, ${3:int value})
setsamplestore(string channel, vector P, float value)#setsamplestore(${1:string channel}, ${2:vector P}, ${3:float value})
setsamplestore(string channel, vector P, vector value)#setsamplestore(${1:string channel}, ${2:vector P}, ${3:vector value})
setsamplestore(string channel, vector P, vector4 value)#setsamplestore(${1:string channel}, ${2:vector P}, ${3:vector4 value})
shadow(vector &Cl)#shadow(${1:vector &Cl})
shadow(vector Cl)#shadow(${1:vector Cl})
shadow(vector &Cl, vector P, vector L)#shadow(${1:vector &Cl}, ${2:vector P}, ${3:vector L})
shadow(vector Cl, vector P, vector L)#shadow(${1:vector Cl}, ${2:vector P}, ${3:vector L})
shadow_light(int lightid, vector pos, vector dir, float time, ...)#shadow_light(${1:int lightid}, ${2:vector pos}, ${3:vector dir}, ${4:float time}, ${5:...})
shimport(string variable_name, <type> &value)#shimport(${1:string variable_name}, ${2:<type> &value})
simport(string name, <type> &value)#simport(${1:string name}, ${2:<type> &value})
specularBRDF(vector L, vector N, vector V, float rough)#specularBRDF(${1:vector L}, ${2:vector N}, ${3:vector V}, ${4:float rough})
storelightexport(string lightname, string exportname, <type> value)#storelightexport(${1:string lightname}, ${2:string exportname}, ${3:<type> value})
storelightexport(string lightname, string exportname, <type> value[])#storelightexport(${1:string lightname}, ${2:string exportname}, ${3:<type> value[]})
switch(bsdf direct, bsdf indirect)#switch(${1:bsdf direct}, ${2:bsdf indirect})
trace(vector &cv, vector &of, float &af, vector P, vector D, float shadow_bias, float max_contrib, ...)#trace(${1:vector &cv}, ${2:vector &of}, ${3:float &af}, ${4:vector P}, ${5:vector D}, ${6:float shadow_bias}, ${7:float max_contrib}, ${8:...})
trace(vector pos, vector dir, float time, ...)#trace(${1:vector pos}, ${2:vector dir}, ${3:float time}, ${4:...})
translucent(vector nml, vector ng, ...)#translucent(${1:vector nml}, ${2:vector ng}, ${3:...})
uvunwrap(string object_path, float u, float v, float time, vector &P, vector &I)#uvunwrap(${1:string object_path}, ${2:float u}, ${3:float v}, ${4:float time}, ${5:vector &P}, ${6:vector &I})
uvunwrap(string object_path, float u, float v, float time, vector &P, vector &I, vector &mikkelsenUtan, vector &mikkelsenVtan)#uvunwrap(${1:string object_path}, ${2:float u}, ${3:float v}, ${4:float time}, ${5:vector &P}, ${6:vector &I}, ${7:vector &mikkelsenUtan}, ${8:vector &mikkelsenVtan})
wireblinn(vector tangent, float exponent, ...)#wireblinn(${1:vector tangent}, ${2:float exponent}, ${3:...})
wirediffuse(vector tangent, ...)#wirediffuse(${1:vector tangent}, ${2:...})
writepixel(string channel, float ndc_x, float ndc_y, vector clr)#writepixel(${1:string channel}, ${2:float ndc_x}, ${3:float ndc_y}, ${4:vector clr})
abspath(string relpath)#abspath(${1:string relpath})
chr(int value)#chr(${1:int value})
concat(string s1, string s2, ...)#concat(${1:string s1}, ${2:string s2}, ${3:...})
decode(string str)#decode(${1:string str})
decodeattrib(string str)#decodeattrib(${1:string str})
decodeparm(string str)#decodeparm(${1:string str})
decodeutf8(string str)#decodeutf8(${1:string str})
encode(string str)#encode(${1:string str})
encodeattrib(string str)#encodeattrib(${1:string str})
encodeparm(string str)#encodeparm(${1:string str})
encodeutf8(int codepoints[])#encodeutf8(${1:int codepoints[]})
endswith(string haystack, string needle)#endswith(${1:string haystack}, ${2:string needle})
find(string haystack, string needle)#find(${1:string haystack}, ${2:string needle})
find(string haystack, string needle, int start)#find(${1:string haystack}, ${2:string needle}, ${3:int start})
find(string haystack, string needle, int start, int end)#find(${1:string haystack}, ${2:string needle}, ${3:int start}, ${4:int end})
find(<type> array[], <type> target)#find(${1:<type> array[]}, ${2:<type> target})
find(<type> array[], <type> target, int start)#find(${1:<type> array[]}, ${2:<type> target}, ${3:int start})
find(<type> array[], <type> target, int start, int end)#find(${1:<type> array[]}, ${2:<type> target}, ${3:int start}, ${4:int end})
isalpha(string str)#isalpha(${1:string str})
isdigit(string str)#isdigit(${1:string str})
itoa(int number)#itoa(${1:int number})
join(string s[], string spacer)#join(${1:string s[]}, ${2:string spacer})
lstrip(string value)#lstrip(${1:string value})
lstrip(string value, string whitespace)#lstrip(${1:string value}, ${2:string whitespace})
makevalidvarname(string name)#makevalidvarname(${1:string name})
makevalidvarname(string name, string safe_chars)#makevalidvarname(${1:string name}, ${2:string safe_chars})
match(string pattern, string subject)#match(${1:string pattern}, ${2:string subject})
opdigits(string str)#opdigits(${1:string str})
opdigits()#opdigits(${1:})
ord(string value)#ord(${1:string value})
pluralize(string noun)#pluralize(${1:string noun})
re_find(string regex, string input)#re_find(${1:string regex}, ${2:string input})
re_find(string regex, string input, int start)#re_find(${1:string regex}, ${2:string input}, ${3:int start})
re_find(string regex, string input, int start, int end)#re_find(${1:string regex}, ${2:string input}, ${3:int start}, ${4:int end})
re_find(int &start_pos[], int &end_pos[], string regex, string input)#re_find(${1:int &start_pos[]}, ${2:int &end_pos[]}, ${3:string regex}, ${4:string input})
re_find(int &start_pos[], int &end_pos[], string regex, string input, int start)#re_find(${1:int &start_pos[]}, ${2:int &end_pos[]}, ${3:string regex}, ${4:string input}, ${5:int start})
re_find(int &start_pos[], int &end_pos[], string regex, string input, int start, int end)#re_find(${1:int &start_pos[]}, ${2:int &end_pos[]}, ${3:string regex}, ${4:string input}, ${5:int start}, ${6:int end})
re_findall(string regex, string input)#re_findall(${1:string regex}, ${2:string input})
re_findall(string regex, string input, int start)#re_findall(${1:string regex}, ${2:string input}, ${3:int start})
re_findall(string regex, string input, int start, int end)#re_findall(${1:string regex}, ${2:string input}, ${3:int start}, ${4:int end})
re_match(string regex, string input)#re_match(${1:string regex}, ${2:string input})
re_replace(string regex, string replacement, string input, int maxreplace=0)#re_replace(${1:string regex}, ${2:string replacement}, ${3:string input}, ${4:int maxreplace=0})
re_split(string regex, string input, int maxsplits=0)#re_split(${1:string regex}, ${2:string input}, ${3:int maxsplits=0})
relativepath(string src, string dest)#relativepath(${1:string src}, ${2:string dest})
relpath(string abspath)#relpath(${1:string abspath})
replace(string str, string old, string new)#replace(${1:string str}, ${2:string old}, ${3:string new})
replace(string str, string old, string new, int count)#replace(${1:string str}, ${2:string old}, ${3:string new}, ${4:int count})
replace_match(string str, string pattern_from, string pattern_to)#replace_match(${1:string str}, ${2:string pattern_from}, ${3:string pattern_to})
rstrip(string value)#rstrip(${1:string value})
rstrip(string value, string whitespace)#rstrip(${1:string value}, ${2:string whitespace})
split(string s)#split(${1:string s})
split(string s, string separators)#split(${1:string s}, ${2:string separators})
split(string s, string separators, int maxsplits)#split(${1:string s}, ${2:string separators}, ${3:int maxsplits})
splitpath(string fullpath, string &dir, string &name)#splitpath(${1:string fullpath}, ${2:string &dir}, ${3:string &name})
sprintf(string format, ...)#sprintf(${1:string format}, ${2:...})
startswith(string str, string startswith)#startswith(${1:string str}, ${2:string startswith})
strip(string value)#strip(${1:string value})
strip(string value, string whitespace)#strip(${1:string value}, ${2:string whitespace})
strlen(string string)#strlen(${1:string string})
titlecase(string str)#titlecase(${1:string str})
tolower(string str)#tolower(${1:string str})
toupper(string str)#toupper(${1:string str})
osd_facecount(<geometry> geometry)#osd_facecount(${1:<geometry> geometry})
osd_firstpatch(<geometry> geometry, int face_id)#osd_firstpatch(${1:<geometry> geometry}, ${2:int face_id})
osd_limitsurface(<geometry> geometry, string attrib_name, int patch_id, float u, float v, <type> &result)#osd_limitsurface(${1:<geometry> geometry}, ${2:string attrib_name}, ${3:int patch_id}, ${4:float u}, ${5:float v}, ${6:<type> &result})
osd_limitsurface(<geometry> geometry, string attrib_name, int patch_id, float u, float v, float &result[])#osd_limitsurface(${1:<geometry> geometry}, ${2:string attrib_name}, ${3:int patch_id}, ${4:float u}, ${5:float v}, ${6:float &result[]})
osd_limitsurfacevertex(<geometry> geometry, string attrib_name, int face_id, float u, float v, <type> &result)#osd_limitsurfacevertex(${1:<geometry> geometry}, ${2:string attrib_name}, ${3:int face_id}, ${4:float u}, ${5:float v}, ${6:<type> &result})
osd_limitsurfacevertex(<geometry> geometry, string attrib_name, int face_id, float u, float v, float &result[])#osd_limitsurfacevertex(${1:<geometry> geometry}, ${2:string attrib_name}, ${3:int face_id}, ${4:float u}, ${5:float v}, ${6:float &result[]})
osd_lookupface(<geometry> geometry, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v)#osd_lookupface(${1:<geometry> geometry}, ${2:int patch_id}, ${3:float patch_u}, ${4:float patch_v}, ${5:int &face_id}, ${6:float &face_u}, ${7:float &face_v})
osd_lookupface(<geometry> geometry, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v, string attribute)#osd_lookupface(${1:<geometry> geometry}, ${2:int patch_id}, ${3:float patch_u}, ${4:float patch_v}, ${5:int &face_id}, ${6:float &face_u}, ${7:float &face_v}, ${8:string attribute})
osd_lookuppatch(<geometry> geometry, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v)#osd_lookuppatch(${1:<geometry> geometry}, ${2:int face_id}, ${3:float face_u}, ${4:float face_v}, ${5:int &patch_id}, ${6:float &patch_u}, ${7:float &patch_v})
osd_lookuppatch(<geometry> geometry, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v, string attribute)#osd_lookuppatch(${1:<geometry> geometry}, ${2:int face_id}, ${3:float face_u}, ${4:float face_v}, ${5:int &patch_id}, ${6:float &patch_u}, ${7:float &patch_v}, ${8:string attribute})
osd_patchcount(<geometry> geometry)#osd_patchcount(${1:<geometry> geometry})
osd_patchcount(<geometry> geometry, int face_id)#osd_patchcount(${1:<geometry> geometry}, ${2:int face_id})
osd_patches(<geometry> geometry, int face_id)#osd_patches(${1:<geometry> geometry}, ${2:int face_id})
tet_adjacent(<geometry> geometry, int primindex, int faceno)#tet_adjacent(${1:<geometry> geometry}, ${2:int primindex}, ${3:int faceno})
tet_faceindex(int faceno, int vtxno)#tet_faceindex(${1:int faceno}, ${2:int vtxno})
colormap(string filename, vector uvw, ...)#colormap(${1:string filename}, ${2:vector uvw}, ${3:...})
colormap(string filename, float u, float v, ...)#colormap(${1:string filename}, ${2:float u}, ${3:float v}, ${4:...})
colormap(string filename, vector uv, vector du, vector dv, int samples, ...)#colormap(${1:string filename}, ${2:vector uv}, ${3:vector du}, ${4:vector dv}, ${5:int samples}, ${6:...})
colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)#colormap(${1:string filename}, ${2:vector uv0}, ${3:vector uv1}, ${4:vector uv2}, ${5:vector uv3}, ${6:...})
colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)#colormap(${1:string filename}, ${2:vector uv0}, ${3:vector uv1}, ${4:vector uv2}, ${5:vector uv3}, ${6:int samples}, ${7:...})
colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)#colormap(${1:string filename}, ${2:float u0}, ${3:float v0}, ${4:float u1}, ${5:float v1}, ${6:float u2}, ${7:float v2}, ${8:float u3}, ${9:float v3}, ${10:int samples}, ${11:...})
depthmap(string filename, vector uvw)#depthmap(${1:string filename}, ${2:vector uvw})
depthmap(string filename, float u, float v)#depthmap(${1:string filename}, ${2:float u}, ${3:float v})
environment(string texture_filename, vector reflect_dir, ...)#environment(${1:string texture_filename}, ${2:vector reflect_dir}, ${3:...})
environment(string texture_filename, vector reflect_dir0, vector reflect_dir1, vector reflect_dir2, vector reflect_dir3, ...)#environment(${1:string texture_filename}, ${2:vector reflect_dir0}, ${3:vector reflect_dir1}, ${4:vector reflect_dir2}, ${5:vector reflect_dir3}, ${6:...})
environment(string texture_filename, vector reflect_dir, float filter_angle, ...)#environment(${1:string texture_filename}, ${2:vector reflect_dir}, ${3:float filter_angle}, ${4:...})
expand_udim(float u, float v, string path, ...)#expand_udim(${1:float u}, ${2:float v}, ${3:string path}, ${4:...})
has_udim(string path)#has_udim(${1:string path})
importance_remap(string map, vector2 uv, ...)#importance_remap(${1:string map}, ${2:vector2 uv}, ${3:...})
ocean_sample(string geometry, int phase, int frequency, int amplitude, float hscale, float time, int mode, int downsample, vector pos)#ocean_sample(${1:string geometry}, ${2:int phase}, ${3:int frequency}, ${4:int amplitude}, ${5:float hscale}, ${6:float time}, ${7:int mode}, ${8:int downsample}, ${9:vector pos})
ptexture(string map, int face_id, ...)#ptexture(${1:string map}, ${2:int face_id}, ${3:...})
ptexture(string map, int face_id, float s, float t, ...)#ptexture(${1:string map}, ${2:int face_id}, ${3:float s}, ${4:float t}, ${5:...})
rawcolormap(string filename, vector uvw, ...)#rawcolormap(${1:string filename}, ${2:vector uvw}, ${3:...})
rawcolormap(string filename, float u, float v, ...)#rawcolormap(${1:string filename}, ${2:float u}, ${3:float v}, ${4:...})
rawcolormap(string filename, vector uv, vector du, vector dv, int samples, ...)#rawcolormap(${1:string filename}, ${2:vector uv}, ${3:vector du}, ${4:vector dv}, ${5:int samples}, ${6:...})
rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)#rawcolormap(${1:string filename}, ${2:vector uv0}, ${3:vector uv1}, ${4:vector uv2}, ${5:vector uv3}, ${6:...})
rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)#rawcolormap(${1:string filename}, ${2:vector uv0}, ${3:vector uv1}, ${4:vector uv2}, ${5:vector uv3}, ${6:int samples}, ${7:...})
rawcolormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)#rawcolormap(${1:string filename}, ${2:float u0}, ${3:float v0}, ${4:float u1}, ${5:float v1}, ${6:float u2}, ${7:float v2}, ${8:float u3}, ${9:float v3}, ${10:int samples}, ${11:...})
shadowmap(string filename, vector Pndc, float spread, float bias, float quality, ...)#shadowmap(${1:string filename}, ${2:vector Pndc}, ${3:float spread}, ${4:float bias}, ${5:float quality}, ${6:...})
shadowmap(string filename, vector Pndc1, vector Pndc2, vector Pndc3, vector Pndc4, float spread, float bias, float quality, ...)#shadowmap(${1:string filename}, ${2:vector Pndc1}, ${3:vector Pndc2}, ${4:vector Pndc3}, ${5:vector Pndc4}, ${6:float spread}, ${7:float bias}, ${8:float quality}, ${9:...})
teximport(string map, string attribute, <type> &value)#teximport(${1:string map}, ${2:string attribute}, ${3:<type> &value})
teximport(string map, string token, int|string&values[])#teximport(${1:string map}, ${2:string token}, ${3:int|string&values[]})
texprintf(float u, float v, string format, ...)#texprintf(${1:float u}, ${2:float v}, ${3:string format}, ${4:...})
texture(string map, ...)#texture(${1:string map}, ${2:...})
texture(string map, float ss, float tt, ...)#texture(${1:string map}, ${2:float ss}, ${3:float tt}, ${4:...})
texture(string map, float s0, float t0, float s1, float t1, float s2, float t2, float s3, float t3, ...)#texture(${1:string map}, ${2:float s0}, ${3:float t0}, ${4:float s1}, ${5:float t1}, ${6:float s2}, ${7:float t2}, ${8:float s3}, ${9:float t3}, ${10:...})
dihedral(vector a, vector b)#dihedral(${1:vector a}, ${2:vector b})
fromNDC(vector v)#fromNDC(${1:vector v})
fromNDC(string space, vector v)#fromNDC(${1:string space}, ${2:vector v})
getpackedtransform(int input, int primnum)#getpackedtransform(${1:int input}, ${2:int primnum})
getspace(string fromspace, string tospace)#getspace(${1:string fromspace}, ${2:string tospace})
instance(vector P, vector N)#instance(${1:vector P}, ${2:vector N})
instance(vector P, vector N, vector scale)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale})
instance(vector P, vector N, vector scale, vector pivot)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale}, ${4:vector pivot})
instance(vector P, vector N, vector scale, vector4 rotate, vector up)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale}, ${4:vector4 rotate}, ${5:vector up})
instance(vector P, vector N, vector scale, vector4 rotate, vector up, vector pivot)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale}, ${4:vector4 rotate}, ${5:vector up}, ${6:vector pivot})
instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale}, ${4:vector4 rotate}, ${5:vector4 orient})
instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient, vector pivot)#instance(${1:vector P}, ${2:vector N}, ${3:vector scale}, ${4:vector4 rotate}, ${5:vector4 orient}, ${6:vector pivot})
lookat(vector from, vector to)#lookat(${1:vector from}, ${2:vector to})
lookat(vector from, vector to, float roll)#lookat(${1:vector from}, ${2:vector to}, ${3:float roll})
lookat(vector from, vector to, vector up)#lookat(${1:vector from}, ${2:vector to}, ${3:vector up})
lookat(vector from, vector to, float roll, int xyz)#lookat(${1:vector from}, ${2:vector to}, ${3:float roll}, ${4:int xyz})
lookat(vector from, vector to, vector up, int xyz)#lookat(${1:vector from}, ${2:vector to}, ${3:vector up}, ${4:int xyz})
maketransform(vector zaxis, vector yaxis)#maketransform(${1:vector zaxis}, ${2:vector yaxis})
maketransform(int xyz, vector angles)#maketransform(${1:int xyz}, ${2:vector angles})
maketransform(vector zaxis, vector yaxis, vector translate)#maketransform(${1:vector zaxis}, ${2:vector yaxis}, ${3:vector translate})
maketransform(int trs, int xyz, vector t, vector r)#maketransform(${1:int trs}, ${2:int xyz}, ${3:vector t}, ${4:vector r})
maketransform(int trs, int xyz, vector t, vector r, vector s)#maketransform(${1:int trs}, ${2:int xyz}, ${3:vector t}, ${4:vector r}, ${5:vector s})
maketransform(int trs, int xyz, vector t, vector r, vector s, vector p)#maketransform(${1:int trs}, ${2:int xyz}, ${3:vector t}, ${4:vector r}, ${5:vector s}, ${6:vector p})
maketransform(int trs, int xyz, vector t, vector r, vector s, vector p, vector pr)#maketransform(${1:int trs}, ${2:int xyz}, ${3:vector t}, ${4:vector r}, ${5:vector s}, ${6:vector p}, ${7:vector pr})
maketransform(int trs, int xyz, vector t, vector r, vector s, vector p, vector pr, vector shears)#maketransform(${1:int trs}, ${2:int xyz}, ${3:vector t}, ${4:vector r}, ${5:vector s}, ${6:vector p}, ${7:vector pr}, ${8:vector shears})
ndcdepth(float z)#ndcdepth(${1:float z})
ntransform(vector v, matrix transform)#ntransform(${1:vector v}, ${2:matrix transform})
ntransform(string tospace, vector v)#ntransform(${1:string tospace}, ${2:vector v})
ntransform(string fromspace, string tospace, vector v)#ntransform(${1:string fromspace}, ${2:string tospace}, ${3:vector v})
orthographic(float zoom, float orthowidth, float image_aspect, float pixel_aspect, float clip_near, float clip_far)#orthographic(${1:float zoom}, ${2:float orthowidth}, ${3:float image_aspect}, ${4:float pixel_aspect}, ${5:float clip_near}, ${6:float clip_far})
orthographic(float zoom, float orthowidth, float image_aspect, float pixel_aspect, float clip_near, float clip_far, vector4 window)#orthographic(${1:float zoom}, ${2:float orthowidth}, ${3:float image_aspect}, ${4:float pixel_aspect}, ${5:float clip_near}, ${6:float clip_far}, ${7:vector4 window})
ow_nspace(vector v)#ow_nspace(${1:vector v})
ow_space()#ow_space(${1:})
ow_space(vector v)#ow_space(${1:vector v})
ow_space(vector4 v)#ow_space(${1:vector4 v})
ow_vspace(vector v)#ow_vspace(${1:vector v})
packedtransform(int input, int primnum, matrix transform)#packedtransform(${1:int input}, ${2:int primnum}, ${3:matrix transform})
perspective(float zoom, float image_aspect, float pixel_aspect, float clip_near, float clip_far)#perspective(${1:float zoom}, ${2:float image_aspect}, ${3:float pixel_aspect}, ${4:float clip_near}, ${5:float clip_far})
perspective(float zoom, float image_aspect, float pixel_aspect, float clip_near, float clip_far, vector4 window)#perspective(${1:float zoom}, ${2:float image_aspect}, ${3:float pixel_aspect}, ${4:float clip_near}, ${5:float clip_far}, ${6:vector4 window})
polardecomp(matrix3 transform)#polardecomp(${1:matrix3 transform})
polardecomp(matrix3 transform, matrix3 &rot, matrix3 &stretch, int check_determinant=1)#polardecomp(${1:matrix3 transform}, ${2:matrix3 &rot}, ${3:matrix3 &stretch}, ${4:int check_determinant=1})
prerotate(matrix3 &m, float amount, vector axis)#prerotate(${1:matrix3 &m}, ${2:float amount}, ${3:vector axis})
prerotate(matrix &m, float amount, vector axis)#prerotate(${1:matrix &m}, ${2:float amount}, ${3:vector axis})
prerotate(matrix3 &m, vector angles, int xyz)#prerotate(${1:matrix3 &m}, ${2:vector angles}, ${3:int xyz})
prerotate(matrix &m, vector angles, int xyz)#prerotate(${1:matrix &m}, ${2:vector angles}, ${3:int xyz})
prerotate(matrix3 &m, float angle, int axis)#prerotate(${1:matrix3 &m}, ${2:float angle}, ${3:int axis})
prerotate(matrix &m, float angle, int axis)#prerotate(${1:matrix &m}, ${2:float angle}, ${3:int axis})
prescale(matrix &m, vector scale_vector)#prescale(${1:matrix &m}, ${2:vector scale_vector})
prescale(matrix3 &m, vector scale_vector)#prescale(${1:matrix3 &m}, ${2:vector scale_vector})
pretranslate(matrix &m, vector amount)#pretranslate(${1:matrix &m}, ${2:vector amount})
ptransform(vector vec, matrix transform)#ptransform(${1:vector vec}, ${2:matrix transform})
ptransform(vector4 vec, matrix transform)#ptransform(${1:vector4 vec}, ${2:matrix transform})
ptransform(string tospace, vector vec)#ptransform(${1:string tospace}, ${2:vector vec})
ptransform(string tospace, vector4 vec)#ptransform(${1:string tospace}, ${2:vector4 vec})
ptransform(string fromspace, string tospace, vector vec)#ptransform(${1:string fromspace}, ${2:string tospace}, ${3:vector vec})
ptransform(string fromspace, string tospace, vector4 vec)#ptransform(${1:string fromspace}, ${2:string tospace}, ${3:vector4 vec})
rotate(matrix2 &m, float amount)#rotate(${1:matrix2 &m}, ${2:float amount})
rotate(matrix3 &m, float amount, vector axis)#rotate(${1:matrix3 &m}, ${2:float amount}, ${3:vector axis})
rotate(matrix &m, float amount, vector axis)#rotate(${1:matrix &m}, ${2:float amount}, ${3:vector axis})
rotate(matrix3 &m, vector angles, int xyz)#rotate(${1:matrix3 &m}, ${2:vector angles}, ${3:int xyz})
rotate(matrix &m, vector angles, int xyz)#rotate(${1:matrix &m}, ${2:vector angles}, ${3:int xyz})
rotate(matrix3 &m, float angle, int axis)#rotate(${1:matrix3 &m}, ${2:float angle}, ${3:int axis})
rotate(matrix &m, float angle, int axis)#rotate(${1:matrix &m}, ${2:float angle}, ${3:int axis})
rotate_x_to(vector2 direction, vector2 v)#rotate_x_to(${1:vector2 direction}, ${2:vector2 v})
rotate_x_to(vector direction, vector v)#rotate_x_to(${1:vector direction}, ${2:vector v})
rotate_x_to(vector4 direction, vector4 v)#rotate_x_to(${1:vector4 direction}, ${2:vector4 v})
scale(matrix2 &m, vector2 scale_vector)#scale(${1:matrix2 &m}, ${2:vector2 scale_vector})
scale(matrix &m, vector scale_vector)#scale(${1:matrix &m}, ${2:vector scale_vector})
scale(matrix3 &m, vector scale_vector)#scale(${1:matrix3 &m}, ${2:vector scale_vector})
setpackedtransform(int input, int primnum, matrix transform)#setpackedtransform(${1:int input}, ${2:int primnum}, ${3:matrix transform})
smoothrotation(int order, vector r, vector r_reference)#smoothrotation(${1:int order}, ${2:vector r}, ${3:vector r_reference})
solveconstraint(float lengths[], vector targetpos, float tolerance, matrix relmat, vector constraints[])#solveconstraint(${1:float lengths[]}, ${2:vector targetpos}, ${3:float tolerance}, ${4:matrix relmat}, ${5:vector constraints[]})
solvecurve(float lengths[], int closed, int orienttonormal, vector tangent, vector points[], vector normals[])#solvecurve(${1:float lengths[]}, ${2:int closed}, ${3:int orienttonormal}, ${4:vector tangent}, ${5:vector points[]}, ${6:vector normals[]})
solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[])#solvecurve(${1:float &outlength}, ${2:vector &outpos}, ${3:float lengths[]}, ${4:int closed}, ${5:int orienttonormal}, ${6:int normalmode}, ${7:vector tangent}, ${8:vector points[]}, ${9:vector normals[]})
solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[], float twists[], float initialtwists[], int fmt, int order, float lod)#solvecurve(${1:float &outlength}, ${2:vector &outpos}, ${3:float lengths[]}, ${4:int closed}, ${5:int orienttonormal}, ${6:int normalmode}, ${7:vector tangent}, ${8:vector points[]}, ${9:vector normals[]}, ${10:float twists[]}, ${11:float initialtwists[]}, ${12:int fmt}, ${13:int order}, ${14:float lod})
solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat)#solvecurve(${1:string op}, ${2:float lengths[]}, ${3:int closed}, ${4:int orienttonormal}, ${5:vector tangent}, ${6:int normalcalcmethod}, ${7:matrix relmat})
solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat, int primnum, float lod)#solvecurve(${1:string op}, ${2:float lengths[]}, ${3:int closed}, ${4:int orienttonormal}, ${5:vector tangent}, ${6:int normalcalcmethod}, ${7:matrix relmat}, ${8:int primnum}, ${9:float lod})
solvefbik(matrix xforms[], int parents[], dict jointoptions[], matrix targetxforms[], int targets[], dict targetoptions[], int iters, float tolerance, int pinroot)#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:dict jointoptions[]}, ${4:matrix targetxforms[]}, ${5:int targets[]}, ${6:dict targetoptions[]}, ${7:int iters}, ${8:float tolerance}, ${9:int pinroot})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters)#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot)#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters}, ${6:float tolerance}, ${7:int pinroot})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[])#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters}, ${6:float tolerance}, ${7:int pinroot}, ${8:float targetweights[]}, ${9:int targetpriorities[]}, ${10:int targetdepths[]})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[])#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters}, ${6:float tolerance}, ${7:int pinroot}, ${8:float targetweights[]}, ${9:int targetpriorities[]}, ${10:int targetdepths[]}, ${11:int targettypes[]}, ${12:matrix targetoffsets[]})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], matrix goalxforms[], vector4 constrainedxforms[], vector jointlimits[])#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters}, ${6:float tolerance}, ${7:int pinroot}, ${8:float targetweights[]}, ${9:int targetpriorities[]}, ${10:int targetdepths[]}, ${11:matrix goalxforms[]}, ${12:vector4 constrainedxforms[]}, ${13:vector jointlimits[]})
solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[], matrix goalxforms[], vector4 constrainedxforms[], vector jointlimits[])#solvefbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:int targets[]}, ${4:matrix targetxforms[]}, ${5:int iters}, ${6:float tolerance}, ${7:int pinroot}, ${8:float targetweights[]}, ${9:int targetpriorities[]}, ${10:int targetdepths[]}, ${11:int targettypes[]}, ${12:matrix targetoffsets[]}, ${13:matrix goalxforms[]}, ${14:vector4 constrainedxforms[]}, ${15:vector jointlimits[]})
solveik(float lengths[], vector targetpos, vector twistpos, float twist, int twistflag, float dampen, int resiststraight, float trackingthres, matrix relmat, vector constraints[])#solveik(${1:float lengths[]}, ${2:vector targetpos}, ${3:vector twistpos}, ${4:float twist}, ${5:int twistflag}, ${6:float dampen}, ${7:int resiststraight}, ${8:float trackingthres}, ${9:matrix relmat}, ${10:vector constraints[]})
solvephysfbik(matrix xforms[], int parents[], dict jointoptions[], matrix targetxforms[], int targets[], dict targetoptions[], int iters, float damping, float tolerance)#solvephysfbik(${1:matrix xforms[]}, ${2:int parents[]}, ${3:dict jointoptions[]}, ${4:matrix targetxforms[]}, ${5:int targets[]}, ${6:dict targetoptions[]}, ${7:int iters}, ${8:float damping}, ${9:float tolerance})
toNDC(vector point)#toNDC(${1:vector point})
toNDC(string camera_name, vector point)#toNDC(${1:string camera_name}, ${2:vector point})
translate(matrix &m, vector amount)#translate(${1:matrix &m}, ${2:vector amount})
translate(matrix &m, vector4 amount)#translate(${1:matrix &m}, ${2:vector4 amount})
tw_nspace(vector v)#tw_nspace(${1:vector v})
tw_space()#tw_space(${1:})
tw_space(vector v)#tw_space(${1:vector v})
tw_space(vector4 v)#tw_space(${1:vector4 v})
tw_vspace(vector v)#tw_vspace(${1:vector v})
vtransform(vector v, matrix transform)#vtransform(${1:vector v}, ${2:matrix transform})
vtransform(string tospace, vector v)#vtransform(${1:string tospace}, ${2:vector v})
vtransform(string fromspace, string tospace, vector v)#vtransform(${1:string fromspace}, ${2:string tospace}, ${3:vector v})
wo_nspace(vector v)#wo_nspace(${1:vector v})
wo_space()#wo_space(${1:})
wo_space(vector pos)#wo_space(${1:vector pos})
wo_space(vector4 pos)#wo_space(${1:vector4 pos})
wo_vspace(vector v)#wo_vspace(${1:vector v})
wt_nspace(vector v)#wt_nspace(${1:vector v})
wt_space()#wt_space(${1:})
wt_space(vector v)#wt_space(${1:vector v})
wt_space(vector4 v)#wt_space(${1:vector4 v})
wt_vspace(vector v)#wt_vspace(${1:vector v})
usd_addattrib(int stagehandle, string primpath, string name, string typename)#usd_addattrib(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string typename})
usd_addcollectionexclude(int stagehandle, string collectionpath, string path)#usd_addcollectionexclude(${1:int stagehandle}, ${2:string collectionpath}, ${3:string path})
usd_addcollectioninclude(int stagehandle, string collectionpath, string path)#usd_addcollectioninclude(${1:int stagehandle}, ${2:string collectionpath}, ${3:string path})
usd_addinversetotransformorder(int stagehandle, string primpath, string name)#usd_addinversetotransformorder(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_addorient(int stagehandle, string primpath, string suffix, vector4 orient)#usd_addorient(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:vector4 orient})
usd_addprim(int stagehandle, string primpath, string typename)#usd_addprim(${1:int stagehandle}, ${2:string primpath}, ${3:string typename})
usd_addprimvar(int stagehandle, string primpath, string name, string typename)#usd_addprimvar(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string typename})
usd_addprimvar(int stagehandle, string primpath, string name, string typename, string interpolation)#usd_addprimvar(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string typename}, ${5:string interpolation})
usd_addrelationshiptarget(int stagehandle, string primpath, string name, string target)#usd_addrelationshiptarget(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string target})
usd_addrotate(int stagehandle, string primpath, string suffix, int axis, float angle)#usd_addrotate(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:int axis}, ${5:float angle})
usd_addrotate(int stagehandle, string primpath, string suffix, int xyz, vector angles)#usd_addrotate(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:int xyz}, ${5:vector angles})
usd_addscale(int stagehandle, string primpath, string suffix, vector scale)#usd_addscale(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:vector scale})
usd_addschemaattrib(int stagehandle, string primpath, string name, string typename)#usd_addschemaattrib(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string typename})
usd_addtotransformorder(int stagehandle, string primpath, string name)#usd_addtotransformorder(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_addtransform(int stagehandle, string primpath, string suffix, matrix xform)#usd_addtransform(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:matrix xform})
usd_addtranslate(int stagehandle, string primpath, string suffix, vector amount)#usd_addtranslate(${1:int stagehandle}, ${2:string primpath}, ${3:string suffix}, ${4:vector amount})
usd_applyapi(int stagehandle, string primpath, string apischemaname)#usd_applyapi(${1:int stagehandle}, ${2:string primpath}, ${3:string apischemaname})
usd_attrib(<stage> stage, string primpath, string name)#usd_attrib(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_attrib(<stage> stage, string primpath, string name, float timecode)#usd_attrib(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_attribelement(<stage> stage, string primpath, string name, int index)#usd_attribelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index})
usd_attribelement(<stage> stage, string primpath, string name, int index, float timecode)#usd_attribelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:float timecode})
usd_attriblen(<stage> stage, string primpath, string name)#usd_attriblen(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_attriblen(<stage> stage, string primpath, string name, float timecode)#usd_attriblen(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_attribnames(<stage> stage, string primpath)#usd_attribnames(${1:<stage> stage}, ${2:string primpath})
usd_attribsize(<stage> stage, string primpath, string name)#usd_attribsize(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_attribtimesamples(<stage> stage, string primpath, string name)#usd_attribtimesamples(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_attribtypename(<stage> stage, string primpath, string name)#usd_attribtypename(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_blockattrib(int stagehandle, string primpath, string name)#usd_blockattrib(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_blockprimvar(int stagehandle, string primpath, string name)#usd_blockprimvar(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_blockprimvarindices(int stagehandle, string primpath, string name)#usd_blockprimvarindices(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_blockrelationship(int stagehandle, string primpath, string name)#usd_blockrelationship(${1:int stagehandle}, ${2:string primpath}, ${3:string name})
usd_boundmaterialpath(<stage> stage, string primpath)#usd_boundmaterialpath(${1:<stage> stage}, ${2:string primpath})
usd_childnames(<stage> stage, string primpath)#usd_childnames(${1:<stage> stage}, ${2:string primpath})
usd_clearmetadata(int stagehandle, string path, string name)#usd_clearmetadata(${1:int stagehandle}, ${2:string path}, ${3:string name})
usd_cleartransformorder(int stagehandle, string primpath)#usd_cleartransformorder(${1:int stagehandle}, ${2:string primpath})
usd_collectioncomputedpaths(<stage> stage, string collectionpath)#usd_collectioncomputedpaths(${1:<stage> stage}, ${2:string collectionpath})
usd_collectioncontains(<stage> stage, string collectionpath, string path)#usd_collectioncontains(${1:<stage> stage}, ${2:string collectionpath}, ${3:string path})
usd_collectionexcludes(<stage> stage, string collectionpath)#usd_collectionexcludes(${1:<stage> stage}, ${2:string collectionpath})
usd_collectionexpansionrule(<stage> stage, string collectionpath)#usd_collectionexpansionrule(${1:<stage> stage}, ${2:string collectionpath})
usd_collectionincludes(<stage> stage, string collectionpath)#usd_collectionincludes(${1:<stage> stage}, ${2:string collectionpath})
usd_drawmode(<stage> stage, string primpath)#usd_drawmode(${1:<stage> stage}, ${2:string primpath})
usd_findtransformname(<stage> stage, string primpath, string suffix)#usd_findtransformname(${1:<stage> stage}, ${2:string primpath}, ${3:string suffix})
usd_flattenediprimvar(<stage> stage, string primpath, string name)#usd_flattenediprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_flattenediprimvar(<stage> stage, string primpath, string name, float timecode)#usd_flattenediprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_flattenediprimvarelement(<stage> stage, string primpath, string name, int index)#usd_flattenediprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index})
usd_flattenediprimvarelement(<stage> stage, string primpath, string name, int index, float timecode)#usd_flattenediprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:float timecode})
usd_flattenedprimvar(<stage> stage, string primpath, string name)#usd_flattenedprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_flattenedprimvar(<stage> stage, string primpath, string name, float timecode)#usd_flattenedprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_flattenedprimvarelement(<stage> stage, string primpath, string name, int index)#usd_flattenedprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index})
usd_flattenedprimvarelement(<stage> stage, string primpath, string name, int index, float timecode)#usd_flattenedprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:float timecode})
usd_getbbox(<stage> stage, string primpath, string purpose, vector &min, vector &max)#usd_getbbox(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose}, ${4:vector &min}, ${5:vector &max})
usd_getbbox_center(<stage> stage, string primpath, string purpose)#usd_getbbox_center(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose})
usd_getbbox_max(<stage> stage, string primpath, string purpose)#usd_getbbox_max(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose})
usd_getbbox_min(<stage> stage, string primpath, string purpose)#usd_getbbox_min(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose})
usd_getbbox_size(<stage> stage, string primpath, string purpose)#usd_getbbox_size(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose})
usd_getbounds(<stage> stage, string primpath, string purpose, vector &min, vector &max)#usd_getbounds(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose}, ${4:vector &min}, ${5:vector &max})
usd_getbounds(<stage> stage, string primpath, string purpose, float timecode, vector &min, vector &max)#usd_getbounds(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose}, ${4:float timecode}, ${5:vector &min}, ${6:vector &max})
usd_getbounds(<stage> stage, string primpath, string purpose[], vector &min, vector &max)#usd_getbounds(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose[]}, ${4:vector &min}, ${5:vector &max})
usd_getbounds(<stage> stage, string primpath, string purpose[], float timecode, vector &min, vector &max)#usd_getbounds(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose[]}, ${4:float timecode}, ${5:vector &min}, ${6:vector &max})
usd_getpointinstancebounds(<stage> stage, string primpath, int instance_index, string purpose, vector &min, vector &max)#usd_getpointinstancebounds(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose}, ${5:vector &min}, ${6:vector &max})
usd_getpointinstancebounds(<stage> stage, string primpath, int instance_index, string purpose[], vector &min, vector &max)#usd_getpointinstancebounds(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose[]}, ${5:vector &min}, ${6:vector &max})
usd_getpointinstancebounds(<stage> stage, string primpath, int instance_index, string purpose, float timecode, vector &min, vector &max)#usd_getpointinstancebounds(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose}, ${5:float timecode}, ${6:vector &min}, ${7:vector &max})
usd_getpointinstancebounds(<stage> stage, string primpath, int instance_index, string purpose[], float timecode, vector &min, vector &max)#usd_getpointinstancebounds(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose[]}, ${5:float timecode}, ${6:vector &min}, ${7:vector &max})
usd_hasapi(<stage> stage, string primpath, string api)#usd_hasapi(${1:<stage> stage}, ${2:string primpath}, ${3:string api})
usd_haspayload(<stage> stage, string primpath)#usd_haspayload(${1:<stage> stage}, ${2:string primpath})
usd_iprimvar(<stage> stage, string primpath, string name)#usd_iprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvar(<stage> stage, string primpath, string name, float timecode)#usd_iprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_iprimvarelement(<stage> stage, string primpath, string name, int index)#usd_iprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index})
usd_iprimvarelement(<stage> stage, string primpath, string name, int index, float timecode)#usd_iprimvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:float timecode})
usd_iprimvarelementsize(<stage> stage, string primpath, string name)#usd_iprimvarelementsize(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvarindices(<stage> stage, string primpath, string name)#usd_iprimvarindices(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvarindices(<stage> stage, string primpath, string name, float timecode)#usd_iprimvarindices(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_iprimvarinterpolation(<stage> stage, string primpath, string name)#usd_iprimvarinterpolation(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvarlen(<stage> stage, string primpath, string name)#usd_iprimvarlen(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvarlen(<stage> stage, string primpath, string name, float timecode)#usd_iprimvarlen(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_iprimvarnames(<stage> stage, string primpath)#usd_iprimvarnames(${1:<stage> stage}, ${2:string primpath})
usd_iprimvarsize(<stage> stage, string primpath, string name)#usd_iprimvarsize(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvartimesamples(<stage> stage, string primpath, string name)#usd_iprimvartimesamples(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iprimvartypename(<stage> stage, string primpath, string name)#usd_iprimvartypename(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isabstract(<stage> stage, string primpath)#usd_isabstract(${1:<stage> stage}, ${2:string primpath})
usd_isactive(<stage> stage, string primpath)#usd_isactive(${1:<stage> stage}, ${2:string primpath})
usd_isarray(<stage> stage, string primpath, string name)#usd_isarray(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isarrayiprimvar(<stage> stage, string primpath, string name)#usd_isarrayiprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isarraymetadata(<stage> stage, string path, string name)#usd_isarraymetadata(${1:<stage> stage}, ${2:string path}, ${3:string name})
usd_isarrayprimvar(<stage> stage, string primpath, string name)#usd_isarrayprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isattrib(<stage> stage, string primpath, string name)#usd_isattrib(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iscollection(<stage> stage, string collectionpath)#usd_iscollection(${1:<stage> stage}, ${2:string collectionpath})
usd_iscollectionpath(<stage> stage, string collectionpath)#usd_iscollectionpath(${1:<stage> stage}, ${2:string collectionpath})
usd_isindexediprimvar(<stage> stage, string primpath, string name)#usd_isindexediprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isindexedprimvar(<stage> stage, string primpath, string name)#usd_isindexedprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isinstance(<stage> stage, string primpath)#usd_isinstance(${1:<stage> stage}, ${2:string primpath})
usd_isiprimvar(<stage> stage, string primpath, string name)#usd_isiprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_iskind(<stage> stage, string primpath, string kind)#usd_iskind(${1:<stage> stage}, ${2:string primpath}, ${3:string kind})
usd_ismetadata(<stage> stage, string path, string name)#usd_ismetadata(${1:<stage> stage}, ${2:string path}, ${3:string name})
usd_ismodel(<stage> stage, string primpath)#usd_ismodel(${1:<stage> stage}, ${2:string primpath})
usd_isprim(<stage> stage, string primpath)#usd_isprim(${1:<stage> stage}, ${2:string primpath})
usd_isprimvar(<stage> stage, string primpath, string name)#usd_isprimvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isrelationship(<stage> stage, string primpath, string name)#usd_isrelationship(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_isstage(<stage> stage)#usd_isstage(${1:<stage> stage})
usd_istransformreset(<stage> stage, string primpath)#usd_istransformreset(${1:<stage> stage}, ${2:string primpath})
usd_istype(<stage> stage, string primpath, string type)#usd_istype(${1:<stage> stage}, ${2:string primpath}, ${3:string type})
usd_isvisible(<stage> stage, string primpath)#usd_isvisible(${1:<stage> stage}, ${2:string primpath})
usd_isvisible(<stage> stage, string primpath, float timecode)#usd_isvisible(${1:<stage> stage}, ${2:string primpath}, ${3:float timecode})
usd_kind(<stage> stage, string primpath)#usd_kind(${1:<stage> stage}, ${2:string primpath})
usd_localtransform(<stage> stage, string primpath)#usd_localtransform(${1:<stage> stage}, ${2:string primpath})
usd_localtransform(<stage> stage, string primpath, float timecode)#usd_localtransform(${1:<stage> stage}, ${2:string primpath}, ${3:float timecode})
usd_makeattribpath(<stage> stage, string primpath, string name)#usd_makeattribpath(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_makecollectionpath(<stage> stage, string primpath, string name)#usd_makecollectionpath(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_makepropertypath(<stage> stage, string primpath, string name)#usd_makepropertypath(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_makerelationshippath(<stage> stage, string primpath, string name)#usd_makerelationshippath(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_makevalidprimname(string name)#usd_makevalidprimname(${1:string name})
usd_makevalidprimpath(string path, int allow_relative)#usd_makevalidprimpath(${1:string path}, ${2:int allow_relative})
usd_metadata(<stage> stage, string path, string name)#usd_metadata(${1:<stage> stage}, ${2:string path}, ${3:string name})
usd_metadataelement(<stage> stage, string path, string name, int index)#usd_metadataelement(${1:<stage> stage}, ${2:string path}, ${3:string name}, ${4:int index})
usd_metadatalen(<stage> stage, string path, string name)#usd_metadatalen(${1:<stage> stage}, ${2:string path}, ${3:string name})
usd_metadatanames(<stage> stage, string path)#usd_metadatanames(${1:<stage> stage}, ${2:string path})
usd_name(<stage> stage, string primpath)#usd_name(${1:<stage> stage}, ${2:string primpath})
usd_parentpath(<stage> stage, string primpath)#usd_parentpath(${1:<stage> stage}, ${2:string primpath})
usd_pointinstance_getbbox(<stage> stage, string primpath, int instance_index, string purpose, vector &min, vector &max)#usd_pointinstance_getbbox(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose}, ${5:vector &min}, ${6:vector &max})
usd_pointinstance_getbbox_center(<stage> stage, string primpath, int instance_index, string purpose)#usd_pointinstance_getbbox_center(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose})
usd_pointinstance_getbbox_max(<stage> stage, string primpath, int instance_index, string purpose)#usd_pointinstance_getbbox_max(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose})
usd_pointinstance_getbbox_min(<stage> stage, string primpath, int instance_index, string purpose)#usd_pointinstance_getbbox_min(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose})
usd_pointinstance_getbbox_size(<stage> stage, string primpath, int instance_index, string purpose)#usd_pointinstance_getbbox_size(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose})
usd_pointinstance_relbbox(<stage> stage, string primpath, int instance_index, string purpose, vector position)#usd_pointinstance_relbbox(${1:<stage> stage}, ${2:string primpath}, ${3:int instance_index}, ${4:string purpose}, ${5:vector position})
usd_pointinstancetransform(<stage> stage, string primpath, int index)#usd_pointinstancetransform(${1:<stage> stage}, ${2:string primpath}, ${3:int index})
usd_pointinstancetransform(<stage> stage, string primpath, int index, float timecode)#usd_pointinstancetransform(${1:<stage> stage}, ${2:string primpath}, ${3:int index}, ${4:float timecode})
usd_primvar(<stage> stage, string primpath, string name)#usd_primvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvar(<stage> stage, string primpath, string name, float timecode)#usd_primvar(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_primvarattribname(<stage> stage, string name)#usd_primvarattribname(${1:<stage> stage}, ${2:string name})
usd_primvarelement(<stage> stage, string primpath, string name, int index)#usd_primvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index})
usd_primvarelement(<stage> stage, string primpath, string name, int index, float timecode)#usd_primvarelement(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:float timecode})
usd_primvarelementsize(<stage> stage, string primpath, string name)#usd_primvarelementsize(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvarindices(<stage> stage, string primpath, string name)#usd_primvarindices(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvarindices(<stage> stage, string primpath, string name, float timecode)#usd_primvarindices(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_primvarinterpolation(<stage> stage, string primpath, string name)#usd_primvarinterpolation(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvarlen(<stage> stage, string primpath, string name)#usd_primvarlen(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvarlen(<stage> stage, string primpath, string name, float timecode)#usd_primvarlen(${1:<stage> stage}, ${2:string primpath}, ${3:string name}, ${4:float timecode})
usd_primvarnames(<stage> stage, string primpath)#usd_primvarnames(${1:<stage> stage}, ${2:string primpath})
usd_primvarsize(<stage> stage, string primpath, string name)#usd_primvarsize(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvartimesamples(<stage> stage, string primpath, string name)#usd_primvartimesamples(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_primvartypename(<stage> stage, string primpath, string name)#usd_primvartypename(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_purpose(<stage> stage, string primpath)#usd_purpose(${1:<stage> stage}, ${2:string primpath})
usd_relationshipforwardedtargets(<stage> stage, string primpath, string name)#usd_relationshipforwardedtargets(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_relationshipnames(<stage> stage, string primpath)#usd_relationshipnames(${1:<stage> stage}, ${2:string primpath})
usd_relationshiptargets(<stage> stage, string primpath, string name)#usd_relationshiptargets(${1:<stage> stage}, ${2:string primpath}, ${3:string name})
usd_relbbox(<stage> stage, string primpath, string purpose, vector position)#usd_relbbox(${1:<stage> stage}, ${2:string primpath}, ${3:string purpose}, ${4:vector position})
usd_removerelationshiptarget(int stagehandle, string primpath, string name, string target)#usd_removerelationshiptarget(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string target})
usd_setactive(int stagehandle, string primpath, int flag)#usd_setactive(${1:int stagehandle}, ${2:string primpath}, ${3:int flag})
usd_setattrib(int stagehandle, string primpath, string name, <type> value)#usd_setattrib(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:<type> value})
usd_setattrib(int stagehandle, string primpath, string name, <type> value[])#usd_setattrib(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:<type> value[]})
usd_setattribelement(int stagehandle, string primpath, string name, int index, <type> value)#usd_setattribelement(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:<type> value})
usd_setcollectionexcludes(int stagehandle, string collectionpath, string excludes[])#usd_setcollectionexcludes(${1:int stagehandle}, ${2:string collectionpath}, ${3:string excludes[]})
usd_setcollectionexpansionrule(int stagehandle, string collectionpath, string rule)#usd_setcollectionexpansionrule(${1:int stagehandle}, ${2:string collectionpath}, ${3:string rule})
usd_setcollectionincludes(int stagehandle, string collectionpath, string includes[])#usd_setcollectionincludes(${1:int stagehandle}, ${2:string collectionpath}, ${3:string includes[]})
usd_setdrawmode(int stagehandle, string primpath, string mode)#usd_setdrawmode(${1:int stagehandle}, ${2:string primpath}, ${3:string mode})
usd_setkind(int stagehandle, string primpath, string kind)#usd_setkind(${1:int stagehandle}, ${2:string primpath}, ${3:string kind})
usd_setmetadata(int stagehandle, string path, string name, <type> value)#usd_setmetadata(${1:int stagehandle}, ${2:string path}, ${3:string name}, ${4:<type> value})
usd_setmetadata(int stagehandle, string path, string name, <type> value[])#usd_setmetadata(${1:int stagehandle}, ${2:string path}, ${3:string name}, ${4:<type> value[]})
usd_setmetadataelement(int stagehandle, string path, string name, int index, <type> value)#usd_setmetadataelement(${1:int stagehandle}, ${2:string path}, ${3:string name}, ${4:int index}, ${5:<type> value})
usd_setprimvar(int stagehandle, string primpath, string name, <type> value)#usd_setprimvar(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:<type> value})
usd_setprimvar(int stagehandle, string primpath, string name, <type> value[])#usd_setprimvar(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:<type> value[]})
usd_setprimvarelement(int stagehandle, string primpath, string name, int index, <type> value)#usd_setprimvarelement(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:int index}, ${5:<type> value})
usd_setprimvarelementsize(int stagehandle, string primpath, string name, int size)#usd_setprimvarelementsize(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:int size})
usd_setprimvarindices(int stagehandle, string primpath, string name, int indices[])#usd_setprimvarindices(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:int indices[]})
usd_setprimvarinterpolation(int stagehandle, string primpath, string name, string interpolation)#usd_setprimvarinterpolation(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string interpolation})
usd_setpurpose(int stagehandle, string primpath, string purpose)#usd_setpurpose(${1:int stagehandle}, ${2:string primpath}, ${3:string purpose})
usd_setrelationshiptargets(int stagehandle, string primpath, string name, string targets[])#usd_setrelationshiptargets(${1:int stagehandle}, ${2:string primpath}, ${3:string name}, ${4:string targets[]})
usd_settransformorder(int stagehandle, string primpath, string transformorder[])#usd_settransformorder(${1:int stagehandle}, ${2:string primpath}, ${3:string transformorder[]})
usd_settransformreset(int stagehandle, string primpath, int flag)#usd_settransformreset(${1:int stagehandle}, ${2:string primpath}, ${3:int flag})
usd_setvariantselection(<stage> stage, string primpath, string variantset, string variant)#usd_setvariantselection(${1:<stage> stage}, ${2:string primpath}, ${3:string variantset}, ${4:string variant})
usd_setvisibility(int stagehandle, string primpath, int code)#usd_setvisibility(${1:int stagehandle}, ${2:string primpath}, ${3:int code})
usd_setvisible(int stagehandle, string primpath, int flag)#usd_setvisible(${1:int stagehandle}, ${2:string primpath}, ${3:int flag})
usd_specifier(<stage> stage, string primpath)#usd_specifier(${1:<stage> stage}, ${2:string primpath})
usd_transformname(int transformtype, string suffix)#usd_transformname(${1:int transformtype}, ${2:string suffix})
usd_transformorder(<stage> stage, string primpath)#usd_transformorder(${1:<stage> stage}, ${2:string primpath})
usd_transformsuffix(string name)#usd_transformsuffix(${1:string name})
usd_transformtype(string name)#usd_transformtype(${1:string name})
usd_typename(<stage> stage, string primpath)#usd_typename(${1:<stage> stage}, ${2:string primpath})
usd_uniquetransformname(<stage> stage, string primpath, int transformtype, string suffix)#usd_uniquetransformname(${1:<stage> stage}, ${2:string primpath}, ${3:int transformtype}, ${4:string suffix})
usd_variants(<stage> stage, string primpath, string variantset)#usd_variants(${1:<stage> stage}, ${2:string primpath}, ${3:string variantset})
usd_variantselection(<stage> stage, string primpath, string variantset)#usd_variantselection(${1:<stage> stage}, ${2:string primpath}, ${3:string variantset})
usd_variantsets(<stage> stage, string primpath)#usd_variantsets(${1:<stage> stage}, ${2:string primpath})
usd_worldtransform(<stage> stage, string primpath)#usd_worldtransform(${1:<stage> stage}, ${2:string primpath})
usd_worldtransform(<stage> stage, string primpath, float timecode)#usd_worldtransform(${1:<stage> stage}, ${2:string primpath}, ${3:float timecode})
assert_enabled()#assert_enabled(${1:})
assign(float &c1, float &c2, vector2 source)#assign(${1:float &c1}, ${2:float &c2}, ${3:vector2 source})
assign(float &c1, float &c2, float &c3, vector source)#assign(${1:float &c1}, ${2:float &c2}, ${3:float &c3}, ${4:vector source})
assign(float &c1, float &c2, float &c3, float &c4, vector4 source)#assign(${1:float &c1}, ${2:float &c2}, ${3:float &c3}, ${4:float &c4}, ${5:vector4 source})
assign(float &c1, float &c2, float &c3, float &c4, matrix2 source)#assign(${1:float &c1}, ${2:float &c2}, ${3:float &c3}, ${4:float &c4}, ${5:matrix2 source})
assign(float &c1, float &c2, float &c3, float &c4, float &c5, float &c6, float &c7, float &c8, float &c9, matrix3 source)#assign(${1:float &c1}, ${2:float &c2}, ${3:float &c3}, ${4:float &c4}, ${5:float &c5}, ${6:float &c6}, ${7:float &c7}, ${8:float &c8}, ${9:float &c9}, ${10:matrix3 source})
assign(float &c1, float &c2, float &c3, float &c4, float &c5, float &c6, float &c7, float &c8, float &c9, float &c10, float &c11, float &c12, float &c13, float &c14, float &c15, float &c16, matrix source)#assign(${1:float &c1}, ${2:float &c2}, ${3:float &c3}, ${4:float &c4}, ${5:float &c5}, ${6:float &c6}, ${7:float &c7}, ${8:float &c8}, ${9:float &c9}, ${10:float &c10}, ${11:float &c11}, ${12:float &c12}, ${13:float &c13}, ${14:float &c14}, ${15:float &c15}, ${16:float &c16}, ${17:matrix source})
error(string format, ...)#error(${1:string format}, ${2:...})
getcomp(<vector> v, int index)#getcomp(${1:<vector> v}, ${2:int index})
getcomp(<matrix> m, int row, int column)#getcomp(${1:<matrix> m}, ${2:int row}, ${3:int column})
getcomp(<type> array[], int index)#getcomp(${1:<type> array[]}, ${2:int index})
getcomp(<vector> array[], int i, int j)#getcomp(${1:<vector> array[]}, ${2:int i}, ${3:int j})
getcomp(<matrix> array[], int i, int j, int k)#getcomp(${1:<matrix> array[]}, ${2:int i}, ${3:int j}, ${4:int k})
getcomp(dict d, string index)#getcomp(${1:dict d}, ${2:string index})
getcomp(dict d, string index, <type> defvalue)#getcomp(${1:dict d}, ${2:string index}, ${3:<type> defvalue})
getcomp(dict d, string index, <type> defvalue[])#getcomp(${1:dict d}, ${2:string index}, ${3:<type> defvalue[]})
getcomp(string value, int index)#getcomp(${1:string value}, ${2:int index})
isbound(string variable_name)#isbound(${1:string variable_name})
isvarying(<type> x)#isvarying(${1:<type> x})
isvarying(<type> x[])#isvarying(${1:<type> x[]})
opend(int handle)#opend(${1:int handle})
opstart(string message)#opstart(${1:string message})
pack_inttosafefloat(int i)#pack_inttosafefloat(${1:int i})
print_once(string msg, ...)#print_once(${1:string msg}, ${2:...})
printf(string format, ...)#printf(${1:string format}, ${2:...})
ramp_lookup(float pos, string ramp)#ramp_lookup(${1:float pos}, ${2:string ramp})
ramp_lookup(float pos, string basis[], float key[], float val[])#ramp_lookup(${1:float pos}, ${2:string basis[]}, ${3:float key[]}, ${4:float val[]})
ramp_lookup(float pos, string basis[], float key[], vector val[])#ramp_lookup(${1:float pos}, ${2:string basis[]}, ${3:float key[]}, ${4:vector val[]})
ramp_pack(string basis[], float pos[], float value[])#ramp_pack(${1:string basis[]}, ${2:float pos[]}, ${3:float value[]})
ramp_pack(string basis[], float pos[], vector value[])#ramp_pack(${1:string basis[]}, ${2:float pos[]}, ${3:vector value[]})
ramp_pack(string basis[], float pos[], vector4 value[])#ramp_pack(${1:string basis[]}, ${2:float pos[]}, ${3:vector4 value[]})
ramp_unpack(string ramp, string &basis[], float &pos[], float &value[])#ramp_unpack(${1:string ramp}, ${2:string &basis[]}, ${3:float &pos[]}, ${4:float &value[]})
ramp_unpack(string ramp, string &basis[], float &pos[], vector &value[])#ramp_unpack(${1:string ramp}, ${2:string &basis[]}, ${3:float &pos[]}, ${4:vector &value[]})
ramp_unpack(string ramp, string &basis[], float &pos[], vector4 &value[])#ramp_unpack(${1:string ramp}, ${2:string &basis[]}, ${3:float &pos[]}, ${4:vector4 &value[]})
select(int conditional, <type> a, <type> b)#select(${1:int conditional}, ${2:<type> a}, ${3:<type> b})
select(int conditional, <type> a[], <type> b[])#select(${1:int conditional}, ${2:<type> a[]}, ${3:<type> b[]})
set(float v1, float v2)#set(${1:float v1}, ${2:float v2})
set(float v1, float v2, float v3)#set(${1:float v1}, ${2:float v2}, ${3:float v3})
set(float v1, float v2, float v3, float v4)#set(${1:float v1}, ${2:float v2}, ${3:float v3}, ${4:float v4})
set(float v1, float v2, float v4, float v4, float v5, float v6, float v7, float v8, float v9)#set(${1:float v1}, ${2:float v2}, ${3:float v4}, ${4:float v4}, ${5:float v5}, ${6:float v6}, ${7:float v7}, ${8:float v8}, ${9:float v9})
set(float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9, float v10, float v11, float v12, float v13, float v14, float v15, float v16)#set(${1:float v1}, ${2:float v2}, ${3:float v3}, ${4:float v4}, ${5:float v5}, ${6:float v6}, ${7:float v7}, ${8:float v8}, ${9:float v9}, ${10:float v10}, ${11:float v11}, ${12:float v12}, ${13:float v13}, ${14:float v14}, ${15:float v15}, ${16:float v16})
set(float nums[])#set(${1:float nums[]})
set(float|intv)#set(${1:float|intv})
set(vector2 row1, vector2 row2)#set(${1:vector2 row1}, ${2:vector2 row2})
set(vector row1, vector row2, vector row3)#set(${1:vector row1}, ${2:vector row2}, ${3:vector row3})
set(vector4 row1, vector4 row2, vector4 row3, vector4 row4)#set(${1:vector4 row1}, ${2:vector4 row2}, ${3:vector4 row3}, ${4:vector4 row4})
set(vector rows[])#set(${1:vector rows[]})
set(vector4 rows[])#set(${1:vector4 rows[]})
set(matrix3 m)#set(${1:matrix3 m})
set(matrix m)#set(${1:matrix m})
set(vector2 v)#set(${1:vector2 v})
set(vector v)#set(${1:vector v})
set(matrix2 m)#set(${1:matrix2 m})
set(vector4 v)#set(${1:vector4 v})
set(<vector> v)#set(${1:<vector> v})
set(<matrix> m)#set(${1:<matrix> m})
set(float v)#set(${1:float v})
set(int v)#set(${1:int v})
set(int vs[])#set(${1:int vs[]})
set(float vs[])#set(${1:float vs[]})
set(float num)#set(${1:float num})
set(string key, ...)#set(${1:string key}, ${2:...})
set(<type> v)#set(${1:<type> v})
set(<type> v[])#set(${1:<type> v[]})
setcomp(<vector> &target, float value, int index)#setcomp(${1:<vector> &target}, ${2:float value}, ${3:int index})
setcomp(<matrix> &target, float value, int row, int column)#setcomp(${1:<matrix> &target}, ${2:float value}, ${3:int row}, ${4:int column})
setcomp(<type> &array[], <type> value, int index)#setcomp(${1:<type> &array[]}, ${2:<type> value}, ${3:int index})
setcomp(<vector> &array[], float value, int i, int j)#setcomp(${1:<vector> &array[]}, ${2:float value}, ${3:int i}, ${4:int j})
setcomp(<matrix> &array[], float value, int i, int j, int k)#setcomp(${1:<matrix> &array[]}, ${2:float value}, ${3:int i}, ${4:int j}, ${5:int k})
setcomp(dict &d, <type> value, string index)#setcomp(${1:dict &d}, ${2:<type> value}, ${3:string index})
setcomp(dict &d, <type> value[], string index)#setcomp(${1:dict &d}, ${2:<type> value[]}, ${3:string index})
sleep(int milliseconds)#sleep(${1:int milliseconds})
swizzle(vector2 v, int i0, int i1)#swizzle(${1:vector2 v}, ${2:int i0}, ${3:int i1})
swizzle(vector v, int i0, int i1, int i2)#swizzle(${1:vector v}, ${2:int i0}, ${3:int i1}, ${4:int i2})
swizzle(vector4 v, int i0, int i1, int i2, int i3)#swizzle(${1:vector4 v}, ${2:int i0}, ${3:int i1}, ${4:int i2}, ${5:int i3})
unpack_intfromsafefloat(float f)#unpack_intfromsafefloat(${1:float f})
warning(string format, ...)#warning(${1:string format}, ${2:...})
volume(vector pos, ...)#volume(${1:vector pos}, ${2:...})
volumecubicsample(<geometry> geometry, int primnum, vector pos)#volumecubicsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumecubicsample(<geometry> geometry, string volumename, vector pos)#volumecubicsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumecubicsample(<geometry> geometry, int primnum, vector pos, vector &grad)#volumecubicsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:vector &grad})
volumecubicsample(<geometry> geometry, string volumename, vector pos, vector &grad)#volumecubicsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:vector &grad})
volumecubicsample(<geometry> geometry, int primnum, vector pos, vector &grad, matrix3 &hess)#volumecubicsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:vector &grad}, ${5:matrix3 &hess})
volumecubicsample(<geometry> geometry, string volumename, vector pos, vector &grad, matrix3 &hess)#volumecubicsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:vector &grad}, ${5:matrix3 &hess})
volumecubicsamplev(<geometry> geometry, int primnum, vector pos)#volumecubicsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumecubicsamplev(<geometry> geometry, string volumename, vector pos)#volumecubicsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumecubicsamplev(<geometry> geometry, int primnum, vector pos, matrix3 &grad)#volumecubicsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:matrix3 &grad})
volumecubicsamplev(<geometry> geometry, string volumename, vector pos, matrix3 &grad)#volumecubicsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:matrix3 &grad})
volumecubicsamplev(<geometry> geometry, int primnum, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)#volumecubicsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:matrix3 &grad}, ${5:matrix3 &hessX}, ${6:matrix3 &hessY}, ${7:matrix3 &hessZ})
volumecubicsamplev(<geometry> geometry, string volumename, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)#volumecubicsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:matrix3 &grad}, ${5:matrix3 &hessX}, ${6:matrix3 &hessY}, ${7:matrix3 &hessZ})
volumegradient(<geometry> geometry, int primnum, vector pos)#volumegradient(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumegradient(<geometry> geometry, string volumename, vector pos)#volumegradient(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumeindex(<geometry> geometry, int primnum, vector voxel)#volumeindex(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindex(<geometry> geometry, string volumename, vector voxel)#volumeindex(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindexactive(<geometry> geometry, int primnum, vector voxel)#volumeindexactive(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindexactive(<geometry> geometry, string volumename, vector voxel)#volumeindexactive(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindexi(<geometry> geometry, int primnum, vector voxel)#volumeindexi(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindexi(<geometry> geometry, string volumename, vector voxel)#volumeindexi(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindexorigin(<geometry> geometry, int primnum)#volumeindexorigin(${1:<geometry> geometry}, ${2:int primnum})
volumeindexorigin(<geometry> geometry, string volumename)#volumeindexorigin(${1:<geometry> geometry}, ${2:string volumename})
volumeindexp(<geometry> geometry, int primnum, vector voxel)#volumeindexp(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindexp(<geometry> geometry, string volumename, vector voxel)#volumeindexp(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindextopos(<geometry> geometry, int primnum, vector voxel)#volumeindextopos(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindextopos(<geometry> geometry, string volumename, vector voxel)#volumeindextopos(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindexu(<geometry> geometry, int primnum, vector voxel)#volumeindexu(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindexu(<geometry> geometry, string volumename, vector voxel)#volumeindexu(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumeindexv(<geometry> geometry, int primnum, vector voxel)#volumeindexv(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector voxel})
volumeindexv(<geometry> geometry, string volumename, vector voxel)#volumeindexv(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector voxel})
volumepostoindex(<geometry> geometry, int primnum, vector position)#volumepostoindex(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector position})
volumepostoindex(<geometry> geometry, string volumename, vector position)#volumepostoindex(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector position})
volumeres(<geometry> geometry, int primnum)#volumeres(${1:<geometry> geometry}, ${2:int primnum})
volumeres(<geometry> geometry, string volumename)#volumeres(${1:<geometry> geometry}, ${2:string volumename})
volumesample(<geometry> geometry, int primnum, vector pos)#volumesample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesample(<geometry> geometry, string volumename, vector pos)#volumesample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesamplei(<geometry> geometry, int primnum, vector pos)#volumesamplei(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesamplei(<geometry> geometry, string volumename, vector pos)#volumesamplei(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesamplep(<geometry> geometry, int primnum, vector pos)#volumesamplep(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesamplep(<geometry> geometry, string volumename, vector pos)#volumesamplep(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesampleu(<geometry> geometry, int primnum, vector pos)#volumesampleu(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesampleu(<geometry> geometry, string volumename, vector pos)#volumesampleu(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesamplev(<geometry> geometry, int primnum, vector pos)#volumesamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesamplev(<geometry> geometry, string volumename, vector pos)#volumesamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesmoothsample(<geometry> geometry, int primnum, vector pos)#volumesmoothsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesmoothsample(<geometry> geometry, string volumename, vector pos)#volumesmoothsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesmoothsample(<geometry> geometry, int primnum, vector pos, vector &grad)#volumesmoothsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:vector &grad})
volumesmoothsample(<geometry> geometry, string volumename, vector pos, vector &grad)#volumesmoothsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:vector &grad})
volumesmoothsample(<geometry> geometry, int primnum, vector pos, vector &grad, matrix3 &hess)#volumesmoothsample(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:vector &grad}, ${5:matrix3 &hess})
volumesmoothsample(<geometry> geometry, string volumename, vector pos, vector &grad, matrix3 &hess)#volumesmoothsample(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:vector &grad}, ${5:matrix3 &hess})
volumesmoothsamplev(<geometry> geometry, int primnum, vector pos)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos})
volumesmoothsamplev(<geometry> geometry, string volumename, vector pos)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos})
volumesmoothsamplev(<geometry> geometry, int primnum, vector pos, matrix3 &grad)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:matrix3 &grad})
volumesmoothsamplev(<geometry> geometry, string volumename, vector pos, matrix3 &grad)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:matrix3 &grad})
volumesmoothsamplev(<geometry> geometry, int primnum, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:int primnum}, ${3:vector pos}, ${4:matrix3 &grad}, ${5:matrix3 &hessX}, ${6:matrix3 &hessY}, ${7:matrix3 &hessZ})
volumesmoothsamplev(<geometry> geometry, string volumename, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)#volumesmoothsamplev(${1:<geometry> geometry}, ${2:string volumename}, ${3:vector pos}, ${4:matrix3 &grad}, ${5:matrix3 &hessX}, ${6:matrix3 &hessY}, ${7:matrix3 &hessZ})
volumetypeid(<geometry> geometry, int primnum)#volumetypeid(${1:<geometry> geometry}, ${2:int primnum})
volumetypeid(<geometry> geometry, string volumename)#volumetypeid(${1:<geometry> geometry}, ${2:string volumename})
volumevoxeldiameter(<geometry> geometry, int primnum)#volumevoxeldiameter(${1:<geometry> geometry}, ${2:int primnum})
volumevoxeldiameter(<geometry> geometry, string primname)#volumevoxeldiameter(${1:<geometry> geometry}, ${2:string primname})
weightarrayblend(string &names[], float &weights[], string newname, float blend)#weightarrayblend(${1:string &names[]}, ${2:float &weights[]}, ${3:string newname}, ${4:float blend})
weightarrayblend(string &names[], float &weights[], string newnames[], float newweights[], float blend)#weightarrayblend(${1:string &names[]}, ${2:float &weights[]}, ${3:string newnames[]}, ${4:float newweights[]}, ${5:float blend})
weightarrayfromname(string &names[], float &weights[], string name)#weightarrayfromname(${1:string &names[]}, ${2:float &weights[]}, ${3:string name})
weightarraynormalize(float &weights[])#weightarraynormalize(${1:float &weights[]})
weightarraythreshold(string &names[], float &weights[], float threshold)#weightarraythreshold(${1:string &names[]}, ${2:float &weights[]}, ${3:float threshold})